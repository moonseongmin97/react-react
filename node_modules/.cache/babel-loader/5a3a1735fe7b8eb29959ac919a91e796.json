{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\Slip\\\\JournalDetail.js\";\nimport React, { useState, useEffect } from \"react\";\nimport useStyles from \"./Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Button, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport FinancialDialog from \"./Dialog/FinancialDialog\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\nimport axios from \"axios\"; //=================================================== 2020-09-14 조편백 일반전표 분개상세 =========================================\n\nconst JournalDetail = props => {\n  const theme = useStyles(); //CSS\n\n  const [journalDetailData, setJournalDetailData] = useState([]); //분개상세그리드 값\n\n  const [nodeId, setNodeId] = useState(\"\"); //분개상세그리드 row의indexid\n\n  const [financialRow, setFinancialRow] = useState(\"\"); //금융기관 다이알로그 상태값\n\n  const [deptRow, setDeptRow] = useState(\"\"); //부서 다이알로그 상태값\n\n  var [openSearchFinancialDialog, setOpenSearchFinancialDialog] = useState(false); //금융기관 다이알로그\n\n  var divisionCode1 = null; //var [divisionCode, setdivisionCode] = useState(\"\");\n\n  const [datePickerr, setdatePicker] = useState(\"\");\n  var [data, setData] = useState(null); //=================================================== ag Grid 초기화 시 실행 =========================================\n\n  const onGridReady = params => {\n    // console.log(params);\n    setJournalDetailData(params.api); //분개상세그리드 동적값 SET\n\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n    // params.columnApi.autoSizeColumns([column])\n  }; //=================================================== cell event  =========================================\n\n\n  const onCellClicked = e => {\n    e.api.sizeColumnsToFit(); //그리드 사이즈자동조절\n    //금융기관 이면 Dialog 열기\n\n    if (e.data.accountControlType === 'SELECT' || e.data.accountControlType === 'SEARCH') {\n      setNodeId(e.rowIndex);\n      divisionCode1 = e.data.accountControlName;\n      console.log(divisionCode1);\n      FinancialList();\n      setOpenSearchFinancialDialog(true); //금융기관\n    }\n  };\n\n  function FinancialList() {\n    axios.get(\"http://localhost:8282/acc/base/getDetailCodeList\", {\n      params: {\n        divisionCodeNo: divisionCode1\n      }\n    }).then(response => {\n      setData(response.data.detailCodeList);\n      console.log(\"data\" + data);\n    }).catch(e => {\n      console.log(e);\n    });\n  } //=================================================== Grid  =========================================\n\n\n  const column = {\n    columnDefs: [{\n      headerName: \"\",\n      field: \"check\",\n      width: 100,\n      checkboxSelection: true\n    }, {\n      headerName: \"분개번호\",\n      field: \"journalDetailNo\"\n    }, {\n      headerName: \"계정명\",\n      field: \"accountControlName\"\n    }, {\n      headerName: \"계정내용\",\n      field: \"accountControlType\"\n    }, {\n      headerName: \"상세내용\",\n      field: \"journalDescription\",\n      editable: true,\n      cellEditor: getDatePicker(),\n      //달력\n      cellEditorParams: function (params) {\n        //선택한 셀마다 동적 값 얻기\n        setdatePicker(params.data.accountControlName);\n      }\n    }] //  components: { datePicker: getDatePicker() },\n\n  }; //ag그리드 datePicker\n\n  function getDatePicker(e) {\n    if (datePickerr === \"만기일\") {\n      function datePicker() {}\n\n      datePicker.prototype.init = function (paramss) {\n        this.eInput = document.createElement(\"input\");\n        this.eInput.setAttribute(\"type\", \"date\");\n        this.cell = paramss.eGridCell;\n        this.oldWidth = this.cell.style.width;\n        this.cell.style.width = \"200px\";\n        this.eInput.value = paramss.value;\n      };\n\n      datePicker.prototype.getGui = function () {\n        return this.eInput;\n      };\n\n      datePicker.prototype.afterGuiAttached = function () {\n        this.eInput.focus();\n        this.eInput.select();\n      };\n\n      datePicker.prototype.getValue = function () {\n        this.cell.style.width = this.oldWidth;\n        return this.eInput.value;\n      };\n\n      return datePicker;\n    } else {\n      return;\n    }\n  } //=================================================== 분개상세저장버튼  =========================================\n\n\n  const saveBtn = () => {\n    journalDetailData.stopEditing(); //편집 중지\n\n    journalDetailData.selectAll();\n    const SaveJournalDetailList = journalDetailData.getSelectedRows(); // 그리드의 모든 값\n\n    if (SaveJournalDetailList.length === 0) {\n      alert(\"분개상세내용이 없습니다. 분개상세내용을 조회해주세요.\");\n    } else if (!window.confirm(\" 저 장 ?\")) {\n      alert(\" 취 소 \");\n      return;\n    } else {\n      props.handlSaveJournalDetailList(SaveJournalDetailList);\n      alert(\" 저 장 완 료 \");\n    }\n  }; //=================================================== 금융기관 다이알로그 CLOSED  =========================================\n\n\n  const handleFinancialClose = value => {\n    setOpenSearchFinancialDialog(false);\n\n    if (value.data === undefined) {\n      return;\n    } else {\n      setFinancialRow(value.data); //금융기관 Row값을 set\n    }\n  }; //==================================================금융기관 상세내용 렌더링  ===================================================\n\n\n  useEffect(() => {\n    // accountDialog 에 클릭한 row 값\n    if (financialRow[0] !== undefined) {\n      let itemsToUpdate = []; // rowNode:분개상세그리드의 rows , index:분개상세그리드의 index\n\n      journalDetailData.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n        // 분개상세그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n        if (index !== nodeId) {\n          return;\n        }\n\n        let FinancialData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n\n        FinancialData.journalDescription = financialRow; //계정코드\n\n        itemsToUpdate.push(FinancialData); // 배열에 집어넣고,\n      });\n      journalDetailData.updateRowData({\n        update: itemsToUpdate\n      }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n    }\n  }, [financialRow]); // accountRow 값이 변할 때마다  useEffect를 실행\n  //==================================================부서 상세내용 렌더링 (수정중 여기 지금 ) ===================================================\n\n  useEffect(() => {\n    // accountDialog 에 클릭한 row 값\n    if (deptRow[0] !== undefined) {\n      let itemsToUpdate = []; // rowNode:분개상세그리드의 rows , index:분개상세그리드의 index\n\n      journalDetailData.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n        // 분개상세그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n        if (index !== nodeId) {\n          return;\n        }\n\n        let DeptData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n\n        DeptData.journalDescription = deptRow; //계정코드\n\n        itemsToUpdate.push(DeptData); // 배열에 집어넣고,\n      });\n      journalDetailData.updateRowData({\n        update: itemsToUpdate\n      }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n    }\n  }, [deptRow]); // accountRow 값이 변할 때마다  useEffect를 실행\n  //=================================================================================================================\n\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(FinancialDialog, {\n    open: openSearchFinancialDialog,\n    divisionCodeData: data,\n    close: handleFinancialClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    align: \"right\",\n    className: theme.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    color: \"primary\",\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"\\uBD84\\uAC1C\\uC0C1\\uC138\"), React.createElement(Typography, {\n    variant: \"h6\",\n    className: theme.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: saveBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"\\uBD84\\uAC1C\\uC0C1\\uC138 \\uC800\\uC7A5\")))), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    skipHeaderOnAutoSize: \"true\",\n    enableColResize: \"true\",\n    enableSorting: \"true\",\n    enableFilter: \"true\",\n    enableRangeSelection: \"true\",\n    rowStyle: {\n      \"text-align\": \"center\"\n    },\n    style: {\n      height: \"200px\",\n      width: \"100%\",\n      //paddingTop: \"25px\",\n      float: \"center\"\n    },\n    cellStyle: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: column.columnDefs //정의된 컬럼\n    ,\n    rowData: props.journalDetailList //Reduce에서 받아온 데이터\n    ,\n    rowSelection: \"single\" //하나만 선택하거나 복수개를 선택할 수 있음\n    ,\n    onGridReady: onGridReady //onload 이벤트와 유사한 것\n    ,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onCellClicked: onCellClicked //셀클릭\n    //singleClickEdit={true} //편집 한번클릭\n    ,\n    onCellEditingStarted: event => {\n      console.log(\"223134214\" + event); //event.api.sizeColumnsToFit();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }))));\n};\n\nexport default JournalDetail;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/page/Slip/JournalDetail.js"],"names":["React","useState","useEffect","useStyles","AgGridReact","Button","AppBar","Toolbar","Typography","FinancialDialog","useThemeSwitcher","axios","JournalDetail","props","theme","journalDetailData","setJournalDetailData","nodeId","setNodeId","financialRow","setFinancialRow","deptRow","setDeptRow","openSearchFinancialDialog","setOpenSearchFinancialDialog","divisionCode1","datePickerr","setdatePicker","data","setData","onGridReady","params","api","sizeColumnsToFit","onCellClicked","e","accountControlType","rowIndex","accountControlName","console","log","FinancialList","get","divisionCodeNo","then","response","detailCodeList","catch","column","columnDefs","headerName","field","width","checkboxSelection","editable","cellEditor","getDatePicker","cellEditorParams","datePicker","prototype","init","paramss","eInput","document","createElement","setAttribute","cell","eGridCell","oldWidth","style","value","getGui","afterGuiAttached","focus","select","getValue","saveBtn","stopEditing","selectAll","SaveJournalDetailList","getSelectedRows","length","alert","window","confirm","handlSaveJournalDetailList","handleFinancialClose","undefined","itemsToUpdate","forEachNodeAfterFilterAndSort","rowNode","index","FinancialData","journalDescription","push","updateRowData","update","DeptData","dark","root","title","height","float","textAlign","journalDetailList","param","event"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useStyles from \"./Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Button, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport FinancialDialog from \"./Dialog/FinancialDialog\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\nimport axios from \"axios\";\n//=================================================== 2020-09-14 조편백 일반전표 분개상세 =========================================\nconst JournalDetail = props => {\n  const theme = useStyles(); //CSS\n  const [journalDetailData, setJournalDetailData] = useState([]); //분개상세그리드 값\n  const [nodeId, setNodeId] = useState(\"\"); //분개상세그리드 row의indexid\n  const [financialRow, setFinancialRow] = useState(\"\"); //금융기관 다이알로그 상태값\n  const [deptRow , setDeptRow] = useState(\"\"); //부서 다이알로그 상태값\n  var [openSearchFinancialDialog, setOpenSearchFinancialDialog] = useState(\n    false,\n  ); //금융기관 다이알로그\n  var divisionCode1=null;\n  //var [divisionCode, setdivisionCode] = useState(\"\");\n  const [datePickerr, setdatePicker] = useState(\"\");\n  var [data, setData] = useState(null);\n  //=================================================== ag Grid 초기화 시 실행 =========================================\n  const onGridReady = params => {\n    // console.log(params);\n    setJournalDetailData(params.api); //분개상세그리드 동적값 SET\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n    // params.columnApi.autoSizeColumns([column])\n  };\n  //=================================================== cell event  =========================================\n  const onCellClicked = e => {\n    e.api.sizeColumnsToFit(); //그리드 사이즈자동조절\n\n    //금융기관 이면 Dialog 열기\n      if(e.data.accountControlType === 'SELECT' || \n        e.data.accountControlType ==='SEARCH'){\n      setNodeId(e.rowIndex);\n      divisionCode1=e.data.accountControlName;\n      console.log(divisionCode1)\n      FinancialList();\n      setOpenSearchFinancialDialog(true); //금융기관\n      }\n  };\n  function FinancialList() {\n    axios.get(\"http://localhost:8282/acc/base/getDetailCodeList\",\n        { params: { divisionCodeNo: divisionCode1 } }\n    ).then(response => {\n        setData(response.data.detailCodeList);\n        console.log(\"data\" + data);\n    }).catch(e => { console.log(e); });\n}\n  //=================================================== Grid  =========================================\n  const column = {\n    columnDefs: [\n      { headerName: \"\", field: \"check\", width: 100, checkboxSelection: true },\n      { headerName: \"분개번호\", field: \"journalDetailNo\" },\n      { headerName: \"계정명\", field: \"accountControlName\" },\n      { headerName: \"계정내용\", field: \"accountControlType\" },\n      {\n        headerName: \"상세내용\",\n        field: \"journalDescription\",\n        editable: true,\n        cellEditor: getDatePicker(), //달력\n        cellEditorParams: function(params) {\n          //선택한 셀마다 동적 값 얻기\n          setdatePicker(params.data.accountControlName);\n        },\n      },\n    ],\n    //  components: { datePicker: getDatePicker() },\n  };\n\n  //ag그리드 datePicker\n  function getDatePicker(e) {\n    if (datePickerr === \"만기일\") {\n      function datePicker() {}\n      datePicker.prototype.init = function(paramss) {\n        this.eInput = document.createElement(\"input\");\n        this.eInput.setAttribute(\"type\", \"date\");\n        this.cell = paramss.eGridCell;\n        this.oldWidth = this.cell.style.width;\n        this.cell.style.width = \"200px\";\n        this.eInput.value = paramss.value;\n      };\n      datePicker.prototype.getGui = function() {\n        return this.eInput;\n      };\n      datePicker.prototype.afterGuiAttached = function() {\n        this.eInput.focus();\n        this.eInput.select();\n      };\n      datePicker.prototype.getValue = function() {\n        this.cell.style.width = this.oldWidth;\n        return this.eInput.value;\n      };\n\n      return datePicker;\n    } else {\n      return;\n    }\n  }\n\n  //=================================================== 분개상세저장버튼  =========================================\n  const saveBtn = () => {\n    journalDetailData.stopEditing(); //편집 중지\n    journalDetailData.selectAll();\n    const SaveJournalDetailList = journalDetailData.getSelectedRows(); // 그리드의 모든 값\n\n    if (SaveJournalDetailList.length === 0) {\n      alert(\"분개상세내용이 없습니다. 분개상세내용을 조회해주세요.\");\n    } else if (!window.confirm(\" 저 장 ?\")) {\n      alert(\" 취 소 \");\n      return;\n    } else {\n      props.handlSaveJournalDetailList(SaveJournalDetailList);\n      alert(\" 저 장 완 료 \");\n    }\n  };\n  //=================================================== 금융기관 다이알로그 CLOSED  =========================================\n  const handleFinancialClose = value => {\n    setOpenSearchFinancialDialog(false);\n    if (value.data === undefined) {\n      return;\n    } else {\n      setFinancialRow(value.data); //금융기관 Row값을 set\n    }\n  };\n\n  //==================================================금융기관 상세내용 렌더링  ===================================================\n  useEffect(() => {\n    // accountDialog 에 클릭한 row 값\n    if (financialRow[0] !== undefined) {\n      let itemsToUpdate = [];\n      // rowNode:분개상세그리드의 rows , index:분개상세그리드의 index\n      journalDetailData.forEachNodeAfterFilterAndSort(function(rowNode, index) {\n        // 분개상세그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n        if (index !== nodeId) {\n          return;\n        }\n        let FinancialData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n        FinancialData.journalDescription = financialRow; //계정코드\n        itemsToUpdate.push(FinancialData); // 배열에 집어넣고,\n      });\n      journalDetailData.updateRowData({ update: itemsToUpdate }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n    }\n  }, [financialRow]); // accountRow 값이 변할 때마다  useEffect를 실행\n    //==================================================부서 상세내용 렌더링 (수정중 여기 지금 ) ===================================================\n    useEffect(() => {\n      // accountDialog 에 클릭한 row 값\n      if (deptRow[0] !== undefined) {\n        let itemsToUpdate = [];\n        // rowNode:분개상세그리드의 rows , index:분개상세그리드의 index\n        journalDetailData.forEachNodeAfterFilterAndSort(function(rowNode, index) {\n          // 분개상세그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n          if (index !== nodeId) {\n            return;\n          }\n          let DeptData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n          DeptData.journalDescription = deptRow; //계정코드\n          itemsToUpdate.push(DeptData); // 배열에 집어넣고,\n        });\n        journalDetailData.updateRowData({ update: itemsToUpdate }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n      }\n    }, [deptRow]); // accountRow 값이 변할 때마다  useEffect를 실행\n  //=================================================================================================================\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <>\n      <div>\n        <FinancialDialog\n          open={openSearchFinancialDialog}\n          divisionCodeData={data}\n          close={handleFinancialClose}\n        />\n        \n        <div align=\"right\" className={theme.root}>\n          <AppBar color=\"primary\" position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h4\">분개상세</Typography>\n              <Typography variant=\"h6\" className={theme.title} />\n              <Button variant=\"contained\" color=\"secondary\" onClick={saveBtn}>\n                분개상세 저장\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <div\n          className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n          skipHeaderOnAutoSize=\"true\"\n          enableColResize=\"true\"\n          enableSorting=\"true\"\n          enableFilter=\"true\"\n          enableRangeSelection=\"true\"\n          rowStyle={{ \"text-align\": \"center\" }}\n          style={{\n            height: \"200px\",\n            width: \"100%\",\n            //paddingTop: \"25px\",\n            float: \"center\",\n          }}\n          cellStyle={{ textAlign: \"center\" }}\n        >\n          <AgGridReact\n            columnDefs={column.columnDefs} //정의된 컬럼\n            rowData={props.journalDetailList} //Reduce에서 받아온 데이터\n            rowSelection=\"single\" //하나만 선택하거나 복수개를 선택할 수 있음\n            onGridReady={onGridReady} //onload 이벤트와 유사한 것\n            getRowStyle={function(param) {\n              return { \"text-align\": \"center\" };\n            }} //body 가운데 정렬\n            onCellClicked={onCellClicked} //셀클릭\n            //singleClickEdit={true} //편집 한번클릭\n            onCellEditingStarted={event => {\n              console.log(\"223134214\" + event);\n              //event.api.sizeColumnsToFit();\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default JournalDetail;\n"]},"metadata":{},"sourceType":"module"}