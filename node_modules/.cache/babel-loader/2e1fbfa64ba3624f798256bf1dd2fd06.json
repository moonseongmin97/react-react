{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\sales\\\\page\\\\Estimate\\\\EstimateRegister\\\\Containers\\\\EstimateRegister.js\";\nimport { Typography, AppBar, Toolbar, TextField, Button } from '@material-ui/core';\nimport { AgGridReact } from 'ag-grid-react/lib/agGridReact';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport CustomerDialog from '../Presentational/CustomerDialog';\nimport ItemDialog from '../Presentational/ItemDialog';\nimport AmountDialog from '../Presentational/AmountDialog';\nimport EstimateDetail from '../Presentational/EstimateDetail';\nimport Estimate from '../Presentational/Estimate';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { getDatePicker } from 'util/LogiUtil/DatePicker';\nimport * as api from 'erp/logistic/sales/api';\nimport useAsync from 'util/useAsync';\n\nconst EstimateRegister = () => {\n  const today = moment().format('YYYY-MM-DD');\n  const [gridApiEstimate, setGridApiEstimate] = useState(null);\n  const [gridApiEstimateDetail, setGridApiEstimateDetail] = useState();\n  const [gridColumnApiEstimate, setGridColumnApiEstimate] = useState(null);\n  const [gridColumnApiEstimateDetail, setGridColumnApiEstimateDetail] = useState(null);\n  const [targetDate, setTargetDate] = useState(today);\n  const [startDate, setStartDate] = useState(today);\n  const [endDate, setEndDate] = useState(today);\n  const [rowDataEstimate, setRowDataEstimate] = useState([]);\n  const [rowDataEstimateDetail, setRowDataEstimateDetail] = useState([]);\n  const [openCustomerDialog, setOpenCustomerDialog] = useState(false);\n  const [openItemDialog, setOpenItemDialog] = useState(false);\n  const [openAmountDialog, setOpenAmountDialog] = useState(false);\n  const [idEstimate, setIdEstimate] = useState(0);\n  const [idEstimateDetail, setIdEstimateDetail] = useState(0); // 견적 그리드 컬럼 정보\n\n  const columnDefsEstimate = [{\n    headerName: '거래처명',\n    field: 'customerName'\n  }, {\n    headerName: '견적일자',\n    field: 'estimateDate',\n    cellEditor: 'datePicker'\n  }, {\n    headerName: '유효일자',\n    field: 'effectiveDate',\n    cellEditor: 'datePicker'\n  }, {\n    headerName: '견적담당자',\n    field: 'personCodeInCharge'\n  }, {\n    headerName: '견적요청자',\n    field: 'estimateRequester'\n  }, {\n    headerName: '비고',\n    field: 'description'\n  }];\n  const columnDefsEstimateDetail = [{\n    headerName: '품목코드',\n    field: 'itemCode'\n  }, {\n    headerName: '품목명',\n    field: 'itemName'\n  }, {\n    headerName: '단위',\n    field: 'unitOfEstimate'\n  }, {\n    headerName: '납기일',\n    field: 'dueDateOfEstimate',\n    cellEditor: 'datePicker'\n  }, {\n    headerName: '견적수량',\n    field: 'estimateAmount'\n  }, {\n    headerName: '견적단가',\n    field: 'unitPriceOfEstimate'\n  }, {\n    headerName: '합계액',\n    field: 'sumPriceOfEstimate'\n  }, {\n    headerName: '비고',\n    field: 'description'\n  }, {\n    headerName: '삭제',\n    field: 'remove',\n    cellRenderer: 'btnRemove'\n  }];\n  const frameworkComponents = {\n    btnRemove: () => {\n      return BtnRemove(handleRemove);\n    }\n  };\n\n  function onGridReadyEstimate(params) {\n    setGridApiEstimate(params.api);\n    setGridColumnApiEstimate(params.columnApi);\n    params.api.sizeColumnsToFit();\n  }\n\n  function onGridReadyEstimateDetail(params) {\n    setGridApiEstimateDetail(params.api);\n    setGridColumnApiEstimateDetail(params.columnApi);\n    params.api.sizeColumnsToFit();\n  }\n\n  const handleChangeDate = e => {\n    if (e.target.id === 'targetDate') {\n      setTargetDate(e.target.value);\n    }\n  };\n\n  const handleOpenDialog = params => {\n    if (params.colDef.field === 'customerName') {\n      setOpenCustomerDialog(true);\n    } else if (params.colDef.field === 'itemName' || params.colDef.field === 'itemCode') {\n      setOpenItemDialog(true);\n    } else if (params.colDef.field === 'estimateAmount' || params.colDef.field === 'unitPriceOfEstimate') {\n      setOpenAmountDialog(true);\n    } else if (params.colDef.field === 'remove') {\n      var row = gridApiEstimateDetail.getSelectedRows();\n      gridApiEstimateDetail.updateRowData({\n        remove: row\n      });\n      var newData = rowDataEstimateDetail.filter(node => node.id !== row[0].id);\n      setRowDataEstimateDetail(newData);\n    }\n  };\n\n  const handleCloseCustomerDialog = params => {\n    setOpenCustomerDialog(false);\n  };\n\n  const handleCloseItemDialog = params => {\n    setOpenItemDialog(false);\n  };\n\n  const handleCloseAmountDialog = params => {\n    setOpenAmountDialog(false);\n  };\n\n  const handleAddEstimateRow = () => {\n    console.log(gridApiEstimate.getDisplayedRowCount());\n\n    if (gridApiEstimate.getDisplayedRowCount() < 1) {\n      var newRow = [{\n        customerName: '',\n        estimateDate: today,\n        effectiveDate: '',\n        personCodeInCharge: sessionStorage.getItem('empNameInfo_token'),\n        estimateRequester: sessionStorage.getItem('empNameInfo_token'),\n        description: '',\n        status: 'INSERT',\n        id: idEstimate\n      }];\n      setIdEstimateDetail(idEstimate + 1);\n      gridApiEstimate.updateRowData({\n        add: newRow\n      });\n      setRowDataEstimate(newRow);\n    }\n  };\n\n  const handleAddEstimateDetailRow = () => {\n    var newData = {\n      itemCode: '',\n      itemName: '',\n      unitOfEstimate: 'EA',\n      dueDateOfEstimate: '',\n      estimateAmount: 0,\n      unitPriceOfEstimate: 0,\n      sumPriceOfEstimate: 0,\n      description: '',\n      remove: '',\n      status: 'INSERT',\n      id: idEstimateDetail\n    };\n    setIdEstimateDetail(idEstimateDetail + 1);\n    setRowDataEstimateDetail([...rowDataEstimateDetail, newData]);\n  };\n\n  const handleCustomerSelected = params => {\n    var selectedData = gridApiEstimate.getSelectedRows();\n    selectedData[0].customerName = params.data.customerName;\n    selectedData[0].customerCode = params.data.customerCode;\n    gridApiEstimate.updateRowData({\n      update: selectedData\n    });\n    setRowDataEstimate(selectedData);\n    handleAddEstimateDetailRow();\n  };\n\n  useEffect(() => {\n    console.log(rowDataEstimateDetail);\n  }, [rowDataEstimateDetail]);\n  useEffect(() => {\n    console.log(rowDataEstimate);\n  }, [rowDataEstimate]);\n\n  const handleItemSelected = params => {\n    var selectedData = gridApiEstimateDetail.getSelectedRows();\n    selectedData[0].itemCode = params.data.itemCode;\n    selectedData[0].itemName = params.data.itemName;\n    gridApiEstimateDetail.updateRowData({\n      update: selectedData\n    });\n  };\n\n  const [itemCost, searchItemCostFetch] = useAsync(param => api.searchItemCode(param), [], true);\n\n  const handleSearchItemCode = () => {\n    var row = gridApiEstimateDetail.getSelectedRows();\n    let param = {\n      itemCode: row[0].itemCode\n    };\n    searchItemCostFetch(param);\n  };\n\n  const handleRemove = e => {\n    e.defaultPrevented();\n    console.log(e);\n  };\n\n  const [estimateRow, saveEstimateRowFetch] = useAsync(param => api.saveEstimateRow(param), [], true);\n\n  const handleSaveEstimateRow = () => {\n    rowDataEstimate[0].estimateDetailTOList = rowDataEstimateDetail;\n    console.log(rowDataEstimate);\n    saveEstimateRowFetch(rowDataEstimate[0]);\n    setRowDataEstimate([]);\n    setRowDataEstimateDetail([]);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    position: \"static\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"\\uACAC\\uC801\\uB4F1\\uB85D\")))), React.createElement(Estimate, {\n    onChangeDate: handleChangeDate,\n    addEstimateRow: handleAddEstimateRow,\n    saveEstimateRow: handleSaveEstimateRow,\n    columnDefsEstimate: columnDefsEstimate,\n    onGridReady: onGridReadyEstimate,\n    handleOpenDialog: handleOpenDialog,\n    components: {\n      datePicker: getDatePicker()\n    },\n    rowData: rowDataEstimate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }), React.createElement(MyDialog, {\n    open: openCustomerDialog,\n    close: handleCloseCustomerDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, React.createElement(CustomerDialog, {\n    close: handleCloseCustomerDialog,\n    onCellClicked: handleCustomerSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  })), React.createElement(EstimateDetail, {\n    handleAddEstimateDetailRow: handleAddEstimateDetailRow,\n    columnDefsEstimateDetail: columnDefsEstimateDetail,\n    onGridReadyEstimateDetail: onGridReadyEstimateDetail,\n    handleOpenDialog: handleOpenDialog,\n    frameworkComponents: frameworkComponents,\n    components: {\n      datePicker: getDatePicker()\n    },\n    rowData: rowDataEstimateDetail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), React.createElement(MyDialog, {\n    open: openItemDialog,\n    close: handleCloseItemDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(ItemDialog, {\n    close: handleCloseItemDialog,\n    onCellClicked: handleItemSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  })), React.createElement(MyDialog, {\n    open: openAmountDialog,\n    close: handleCloseAmountDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, React.createElement(AmountDialog, {\n    close: handleCloseAmountDialog,\n    handleSearchItemCode: handleSearchItemCode,\n    itemCost: itemCost.data ? itemCost.data.gridRowJson : null,\n    gridApiEstimateDetail: gridApiEstimateDetail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }))));\n};\n\nconst BtnRemove = handleRemove => {\n  return React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"Remove\");\n};\n\nexport default EstimateRegister;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/sales/page/Estimate/EstimateRegister/Containers/EstimateRegister.js"],"names":["Typography","AppBar","Toolbar","TextField","Button","AgGridReact","MyDialog","CustomerDialog","ItemDialog","AmountDialog","EstimateDetail","Estimate","moment","Axios","React","useState","useEffect","getDatePicker","api","useAsync","EstimateRegister","today","format","gridApiEstimate","setGridApiEstimate","gridApiEstimateDetail","setGridApiEstimateDetail","gridColumnApiEstimate","setGridColumnApiEstimate","gridColumnApiEstimateDetail","setGridColumnApiEstimateDetail","targetDate","setTargetDate","startDate","setStartDate","endDate","setEndDate","rowDataEstimate","setRowDataEstimate","rowDataEstimateDetail","setRowDataEstimateDetail","openCustomerDialog","setOpenCustomerDialog","openItemDialog","setOpenItemDialog","openAmountDialog","setOpenAmountDialog","idEstimate","setIdEstimate","idEstimateDetail","setIdEstimateDetail","columnDefsEstimate","headerName","field","cellEditor","columnDefsEstimateDetail","cellRenderer","frameworkComponents","btnRemove","BtnRemove","handleRemove","onGridReadyEstimate","params","columnApi","sizeColumnsToFit","onGridReadyEstimateDetail","handleChangeDate","e","target","id","value","handleOpenDialog","colDef","row","getSelectedRows","updateRowData","remove","newData","filter","node","handleCloseCustomerDialog","handleCloseItemDialog","handleCloseAmountDialog","handleAddEstimateRow","console","log","getDisplayedRowCount","newRow","customerName","estimateDate","effectiveDate","personCodeInCharge","sessionStorage","getItem","estimateRequester","description","status","add","handleAddEstimateDetailRow","itemCode","itemName","unitOfEstimate","dueDateOfEstimate","estimateAmount","unitPriceOfEstimate","sumPriceOfEstimate","handleCustomerSelected","selectedData","data","customerCode","update","handleItemSelected","itemCost","searchItemCostFetch","param","searchItemCode","handleSearchItemCode","defaultPrevented","estimateRow","saveEstimateRowFetch","saveEstimateRow","handleSaveEstimateRow","estimateDetailTOList","datePicker","gridRowJson"],"mappings":"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","sourcesContent":["import { Typography, AppBar, Toolbar, TextField, Button } from '@material-ui/core';\nimport { AgGridReact } from 'ag-grid-react/lib/agGridReact';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport CustomerDialog from '../Presentational/CustomerDialog';\nimport ItemDialog from '../Presentational/ItemDialog';\nimport AmountDialog from '../Presentational/AmountDialog';\nimport EstimateDetail from '../Presentational/EstimateDetail';\nimport Estimate from '../Presentational/Estimate';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { getDatePicker } from 'util/LogiUtil/DatePicker';\nimport * as api from 'erp/logistic/sales/api';\nimport useAsync from 'util/useAsync';\n\nconst EstimateRegister = () => {\n    const today = moment().format('YYYY-MM-DD');\n    const [gridApiEstimate, setGridApiEstimate] = useState(null);\n    const [gridApiEstimateDetail, setGridApiEstimateDetail] = useState();\n    const [gridColumnApiEstimate, setGridColumnApiEstimate] = useState(null);\n    const [gridColumnApiEstimateDetail, setGridColumnApiEstimateDetail] = useState(null);\n    const [targetDate, setTargetDate] = useState(today);\n    const [startDate, setStartDate] = useState(today);\n    const [endDate, setEndDate] = useState(today);\n    const [rowDataEstimate, setRowDataEstimate] = useState([]);\n    const [rowDataEstimateDetail, setRowDataEstimateDetail] = useState([]);\n    const [openCustomerDialog, setOpenCustomerDialog] = useState(false);\n    const [openItemDialog, setOpenItemDialog] = useState(false);\n    const [openAmountDialog, setOpenAmountDialog] = useState(false);\n    const [idEstimate, setIdEstimate] = useState(0);\n    const [idEstimateDetail, setIdEstimateDetail] = useState(0);\n\n    // 견적 그리드 컬럼 정보\n    const columnDefsEstimate = [\n        { headerName: '거래처명', field: 'customerName' },\n        { headerName: '견적일자', field: 'estimateDate', cellEditor: 'datePicker' },\n        { headerName: '유효일자', field: 'effectiveDate', cellEditor: 'datePicker' },\n        { headerName: '견적담당자', field: 'personCodeInCharge' },\n        { headerName: '견적요청자', field: 'estimateRequester' },\n        { headerName: '비고', field: 'description' }\n    ];\n\n    const columnDefsEstimateDetail = [\n        { headerName: '품목코드', field: 'itemCode' },\n        { headerName: '품목명', field: 'itemName' },\n        { headerName: '단위', field: 'unitOfEstimate' },\n        { headerName: '납기일', field: 'dueDateOfEstimate', cellEditor: 'datePicker' },\n        { headerName: '견적수량', field: 'estimateAmount' },\n        { headerName: '견적단가', field: 'unitPriceOfEstimate' },\n        { headerName: '합계액', field: 'sumPriceOfEstimate' },\n        { headerName: '비고', field: 'description' },\n        {\n            headerName: '삭제',\n            field: 'remove',\n            cellRenderer: 'btnRemove'\n        }\n    ];\n\n    const frameworkComponents = {\n        btnRemove: () => {\n            return BtnRemove(handleRemove);\n        }\n    };\n\n    function onGridReadyEstimate(params) {\n        setGridApiEstimate(params.api);\n        setGridColumnApiEstimate(params.columnApi);\n        params.api.sizeColumnsToFit();\n    }\n\n    function onGridReadyEstimateDetail(params) {\n        setGridApiEstimateDetail(params.api);\n        setGridColumnApiEstimateDetail(params.columnApi);\n        params.api.sizeColumnsToFit();\n    }\n\n    const handleChangeDate = e => {\n        if (e.target.id === 'targetDate') {\n            setTargetDate(e.target.value);\n        }\n    };\n\n    const handleOpenDialog = params => {\n        if (params.colDef.field === 'customerName') {\n            setOpenCustomerDialog(true);\n        } else if (params.colDef.field === 'itemName' || params.colDef.field === 'itemCode') {\n            setOpenItemDialog(true);\n        } else if (\n            params.colDef.field === 'estimateAmount' ||\n            params.colDef.field === 'unitPriceOfEstimate'\n        ) {\n            setOpenAmountDialog(true);\n        } else if (params.colDef.field === 'remove') {\n            var row = gridApiEstimateDetail.getSelectedRows();\n            gridApiEstimateDetail.updateRowData({ remove: row });\n\n            var newData = rowDataEstimateDetail.filter(node => node.id !== row[0].id);\n            setRowDataEstimateDetail(newData);\n        }\n    };\n\n    const handleCloseCustomerDialog = params => {\n        setOpenCustomerDialog(false);\n    };\n\n    const handleCloseItemDialog = params => {\n        setOpenItemDialog(false);\n    };\n    const handleCloseAmountDialog = params => {\n        setOpenAmountDialog(false);\n    };\n\n    const handleAddEstimateRow = () => {\n        console.log(gridApiEstimate.getDisplayedRowCount());\n\n        if (gridApiEstimate.getDisplayedRowCount() < 1) {\n            var newRow = [\n                {\n                    customerName: '',\n                    estimateDate: today,\n                    effectiveDate: '',\n                    personCodeInCharge: sessionStorage.getItem('empNameInfo_token'),\n                    estimateRequester: sessionStorage.getItem('empNameInfo_token'),\n                    description: '',\n                    status: 'INSERT',\n                    id: idEstimate\n                }\n            ];\n            setIdEstimateDetail(idEstimate + 1);\n\n            gridApiEstimate.updateRowData({ add: newRow });\n            setRowDataEstimate(newRow);\n\n        }\n    };\n\n    const handleAddEstimateDetailRow = () => {\n\n        var newData = {\n            itemCode: '',\n            itemName: '',\n            unitOfEstimate: 'EA',\n            dueDateOfEstimate: '',\n            estimateAmount: 0,\n            unitPriceOfEstimate: 0,\n            sumPriceOfEstimate: 0,\n            description: '',\n            remove: '',\n            status: 'INSERT',\n            id: idEstimateDetail\n        };\n        setIdEstimateDetail(idEstimateDetail + 1);\n        setRowDataEstimateDetail([...rowDataEstimateDetail, newData]);\n    };\n\n    const handleCustomerSelected = params => {\n        var selectedData = gridApiEstimate.getSelectedRows();\n        selectedData[0].customerName = params.data.customerName;\n        selectedData[0].customerCode = params.data.customerCode;\n\n        gridApiEstimate.updateRowData({ update: selectedData });\n\n        setRowDataEstimate(selectedData);\n\n        handleAddEstimateDetailRow();\n    };\n\n    useEffect(() => {\n        console.log(rowDataEstimateDetail);\n    }, [rowDataEstimateDetail]);\n\n    useEffect(() => {\n        console.log(rowDataEstimate);\n    }, [rowDataEstimate]);\n\n    const handleItemSelected = params => {\n        var selectedData = gridApiEstimateDetail.getSelectedRows();\n        selectedData[0].itemCode = params.data.itemCode;\n        selectedData[0].itemName = params.data.itemName;\n\n        gridApiEstimateDetail.updateRowData({ update: selectedData });\n    };\n\nconst [itemCost, searchItemCostFetch] = useAsync((param) =>api.searchItemCode(param), [], true);\n\n    const handleSearchItemCode = () => {\n        var row = gridApiEstimateDetail.getSelectedRows();\n        let param = {\n            itemCode: row[0].itemCode\n        };\n        searchItemCostFetch(param);\n    };\n\n    const handleRemove = e => {\n        e.defaultPrevented();\n        console.log(e);\n    };\n\nconst [estimateRow, saveEstimateRowFetch] = useAsync((param) =>api.saveEstimateRow(param), [], true);\n    const handleSaveEstimateRow = () => {\n        rowDataEstimate[0].estimateDetailTOList = rowDataEstimateDetail;\n        console.log(rowDataEstimate);\n\n        saveEstimateRowFetch(rowDataEstimate[0]);\n        setRowDataEstimate([]);\n        setRowDataEstimateDetail([]);\n    };\n\n    return (\n        <>\n            <div>\n                <div>\n                    <AppBar position=\"static\" color=\"primary\">\n                        <Toolbar>\n                            <Typography component=\"h2\" variant=\"h4\">\n                                견적등록\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                </div>\n\n                <Estimate\n                    onChangeDate={handleChangeDate}\n                    addEstimateRow={handleAddEstimateRow}\n                    saveEstimateRow={handleSaveEstimateRow}\n                    columnDefsEstimate={columnDefsEstimate}\n                    onGridReady={onGridReadyEstimate}\n                    handleOpenDialog={handleOpenDialog}\n                    components={{ datePicker: getDatePicker() }}\n                    rowData={rowDataEstimate}\n                />\n\n                <MyDialog open={openCustomerDialog} close={handleCloseCustomerDialog}>\n                    <CustomerDialog\n                        close={handleCloseCustomerDialog}\n                        onCellClicked={handleCustomerSelected}\n                    />\n                </MyDialog>\n\n                {/* 견적상세 그리드 및 버튼 */}\n                <EstimateDetail\n                    handleAddEstimateDetailRow={handleAddEstimateDetailRow}\n                    columnDefsEstimateDetail={columnDefsEstimateDetail}\n                    onGridReadyEstimateDetail={onGridReadyEstimateDetail}\n                    handleOpenDialog={handleOpenDialog}\n                    frameworkComponents={frameworkComponents}\n                    components={{ datePicker: getDatePicker() }}\n                    rowData={rowDataEstimateDetail}\n                />\n\n                <MyDialog open={openItemDialog} close={handleCloseItemDialog}>\n                    <ItemDialog close={handleCloseItemDialog} onCellClicked={handleItemSelected} />\n                </MyDialog>\n\n                <MyDialog open={openAmountDialog} close={handleCloseAmountDialog}>\n                    <AmountDialog\n                        close={handleCloseAmountDialog}\n                        handleSearchItemCode={handleSearchItemCode}\n                        itemCost={itemCost.data ? itemCost.data.gridRowJson:null}\n                        gridApiEstimateDetail={gridApiEstimateDetail}\n                    />\n                </MyDialog>\n            </div>\n        </>\n    );\n};\n\nconst BtnRemove = handleRemove => {\n    return (\n        <Button variant=\"contained\" color=\"secondary\">\n            Remove\n        </Button>\n    );\n};\n\nexport default EstimateRegister;\n"]},"metadata":{},"sourceType":"module"}