{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\Slip\\\\Journal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport useStyles from \"./Theme\";\nimport SearchAccountDialog from \"erp/account/statement/page/AccountLedger/AccountSearchDialog\";\nimport CustomerDialog from \"./Dialog/CustomerDialog\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Button, Box, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport OpenDialog from \"./SalaryAndDelivery/OpenDialog\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\"; //=================================================== 2020-09-14 조편백 일반전표 분개 =========================================\n//=================================================== 2020-11-18 박민호 일반전표 분개 수정=========================================\n\nconst Journal = props => {\n  const theme = useStyles();\n  var [openSearchAccountDialog, setOpenSearchAccountDialog] = useState(false); //계정과목\n\n  var [deadlineDialog, setDeadlineDialog] = useState(false); //임금/납품다이얼로그\n\n  var [openCustomerDialog, setOpenCustomerDialog] = useState(false); //거래처 다이알로그\n\n  const [journalRow, setJournalRow] = React.useState(); //분개그리드\n\n  const [accountRow, setAccountRow] = useState(\"\"); //계정별원장 다이알로그 상태값\n\n  const [customerRow, setCustomerRow] = useState(\"\"); //거래처 다이알로그 상태값\n\n  const [nodeId, setNodeId] = useState(\"\"); //분개그리드 row의indexid\n\n  const [price, setPrice] = useState(\"\"); //분개 그리드 row 가격 상태값\n\n  const [salaryRow, setSalaryRow] = useState(\"\"); //임금 다이알로그 상태값\n\n  const [divsion, setDivsion] = useState(\"\"); // 다이알로그 구분\n\n  const [salaryInsert, setSalaryInsert] = useState(\"\"); // 다이알로그 구분\n  //=================================================== ag Grid 초기화 시 실행 =========================================\n\n  const onGridReady = params => {\n    console.log(\"ddddd\");\n    setJournalRow(params.api); //동적으로변하는 분개그리드 값 할당\n\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n\n  console.log(\"divsion\", divsion); //=================================================== Grid  =========================================\n\n  const column = {\n    columnDefs: [{\n      width: \"50\",\n      headerCheckboxSelection: true,\n      checkboxSelection: true\n    }, //체크박스\n    {\n      headerName: \"분개일련번호\",\n      field: \"journalNo\",\n      editable: true\n    }, {\n      headerName: \"계정코드\",\n      field: \"accountCode\"\n    }, {\n      headerName: \"계정명\",\n      field: \"accountName\"\n    }, {\n      headerName: \"대차구분\",\n      field: \"balanceDivision\",\n      editable: true,\n      cellEditor: \"agSelectCellEditor\",\n      //콤보 생성\n      //콤보List\n      cellEditorParams: {\n        values: [\"대변\", \"차변\"]\n      }\n    }, {\n      headerName: \"거래처코드\",\n      field: \"customerCode\"\n    }, {\n      headerName: \"거래처명\",\n      field: \"customerName\",\n      hide: true\n    }, {\n      headerName: \"차변\",\n      field: \"leftDebtorPrice\",\n      editable: true //valueFormatter:' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"',\n\n    }, {\n      headerName: \"대변\",\n      field: \"rightCreditsPrice\",\n      editable: true //valueFormatter:' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"',\n\n    }],\n    autoGroupColumnDef: {\n      minWidth: 100\n    }\n  }; //===============================================월급 자동 =================================================\n\n  const deadlineOpen = () => {\n    setDeadlineDialog(true);\n  }; //=================================================== 분개추가버튼  =========================================\n\n\n  const addBtn = () => {\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n\n    journalRow.updateRowData({\n      add: [newItem],\n      addIndex: \"\"\n    }); // ag그리드 api로 그리드에 add 함\n  }; //추가할 컬럼 선언\n\n\n  const NewRowData = () => {\n    let newData = {\n      journalNo: \"NEW\",\n      accountCode: \"\",\n      accountName: \"\",\n      balanceDivision: \"대변\",\n      customerCode: \"\",\n      customerName: \"\",\n      leftDebtorPrice: \"0\",\n      rightCreditsPrice: \"0\"\n    };\n    return newData;\n  }; //=================================================== 분개삭제버튼  =========================================\n\n\n  const deleteBtn = () => {\n    const journalRows = journalRow.getSelectedRows(); // 그리드의 모든 값을 반환\n\n    if (journalRows.length === 0) {\n      alert(\"삭제할 분개를 선택해주세요.\");\n      return;\n    } else if (props.silpRow[0].slipStatus === \"승인\" || props.silpRow[0].slipStatus === \"반려\") {\n      alert(\"승인상태 [ \" + props.silpRow[0].slipStatus + \" ]  : 삭제 불가능 \");\n      return; //전표그리드에 승인상태를 유효성검사로 검사함\n    } else if (journalRows[0].journalNo === \"NEW\") {\n      journalRow.updateRowData({\n        remove: journalRows\n      }); // 선택된 row 삭제\n\n      return;\n    } else if (!window.confirm(\" 삭제 ? \")) {\n      alert(\" 취소되었습니다. \");\n      return;\n    } else {\n      const slipNo = journalRows[0].slipNo; //걍 변수에담음\n\n      const journalNo = journalRows[0].journalNo; //걍 변수에담음\n\n      props.handleDeleteJournal(slipNo, journalNo); //삭제 SAGA\n\n      journalRow.updateRowData({\n        remove: journalRows\n      }); // 선택된 row 삭제\n\n      alert(\" 삭제 \");\n    }\n  }; //=================================================== 분개저장버튼  =========================================\n\n\n  const saveBtn = () => {\n    const journalRows = journalRow.getSelectedRows(); // 그리드의 모든 값\n\n    const rowsCount = journalRow.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n\n    var leftDebtorPrice = 0;\n    var rightCreditsPrice = 0;\n    journalRow.stopEditing(); //편집 중지\n\n    journalRow.selectAll(); // 그리드 전체 값 Read\n\n    if (rowsCount === 0 || rowsCount === 1) {\n      alert(\" 분개를 작성해주세요 \");\n      return;\n    }\n\n    console.log(\"rowsCount\", rowsCount);\n\n    if (journalRows.length !== rowsCount) {\n      alert(\"체크박스 확인바랍니다\");\n      return;\n    }\n\n    for (var ii = 0; ii < journalRows.length; ii++) {\n      console.log(journalRows[ii].leftDebtorPrice);\n      leftDebtorPrice += parseInt(journalRows[ii].leftDebtorPrice); //대변차변 합계 유효성검사\n\n      rightCreditsPrice += parseInt(journalRows[ii].rightCreditsPrice);\n      console.log(\"journalRows[ii].customerCode\", journalRows[ii].customerCode);\n\n      if (journalRows[ii].accountName === null || journalRows[ii].customerCode === null || journalRows[ii].customerCode === \"\" || journalRows[ii].accountName === \"\" || journalRows[ii].balanceDivision === \"\") {\n        alert(\" 빈칸을 입력해주세요 . \");\n        return;\n      } //1 째 row 가있는데 2번째 row가 없으면?\n\n    }\n\n    if (rowsCount === 1) {\n      alert(journalRows[0].balanceDivision + \"만 있으면 안됨\");\n      return; //분개는 차변 1 개 대변 1개 가세트임 중복되면 return\n      //1.2 번째 ROW 가 있으면 차변대변 금액비교\n    } else if (journalRows[0].balanceDivision === journalRows[1].balanceDivision) {\n      alert(\"대차구분에 [\" + journalRows[0].balanceDivision + \"]  이 중복됩니다. 수정해주세요.\");\n      return;\n    } else if (leftDebtorPrice !== rightCreditsPrice) {\n      console.log(leftDebtorPrice);\n      console.log(rightCreditsPrice);\n      alert(\" [ 차변금액 : \" + leftDebtorPrice + \" ]  [대변금액 : \" + rightCreditsPrice + \" ] 금액이 일치하지않습니다.\");\n      return;\n    } //전표가 승인 or 반려면 분개 수정 불가능\n\n\n    if (props.silpRow[0].slipStatus === \"승인\" || props.silpRow[0].slipStatus === \"반려\") {\n      alert(\"승인상태 [ \" + props.silpRow[0].slipStatus + \" ]  : 수정 불가능 \");\n      return;\n    } else if (!window.confirm(\" 저 장 ? \")) {\n      alert(\" 취 소 \");\n      return; //전표 , 분개 번호 생성 insert\n    } else if (props.silpRow[0].slipNo === \"NEW\") {\n      console.log(\"insert\");\n      let slipData = props.silpRow[0];\n      slipData.journalList = journalRows; // {전표 ,분개키값:[{분개1},{분개2},{분개3}...]}\n      //journalList 로 한 이유는 뒷단 ..to/SlipBean 에 ArrayList<JournalBean> journalList; 라고적혀있음 (journalList 키값에 분개 List가 할당됨\n\n      if (!!props.error) {\n        alert(\"ERROR : \" + props.error);\n      }\n\n      if (!!props.journalList) {\n        if (divsion === \"Salary\") {\n          //임금 마감 Y작업\n          console.log(\"salaryInsert\", salaryInsert);\n\n          for (var i = 0; i < salaryInsert.length; i++) {\n            salaryInsert[i].finalizeStatus = \"Y\";\n          }\n\n          props.handlCloseSalaryWithSlipRequest(salaryInsert);\n        } else if (divsion === \"Delivery\") {\n          //납품 마감 Y작업\n          console.log(\"salaryInsert\", salaryInsert);\n\n          for (var i = 0; i < salaryInsert.length; i++) {\n            salaryInsert[i].finalizeStatus = \"Y\";\n          }\n\n          console.log(\"salaryInsert:::::::::::::::::::::::\", salaryInsert);\n          props.handlCloseDeliveryWithStart(salaryInsert);\n        } // 발주 마감하면 ORDER_INFO / order_slip_status => 'Y'로 바꾸기\n        else if (divsion === \"Order\") {\n            console.log(\"salaryInsert\", salaryInsert);\n\n            for (var i = 0; i < salaryInsert.length; i++) {\n              salaryInsert[i].orderSlipStatus = \"Y\";\n            }\n\n            console.log(\"salaryInsert:::::::::::::::::::::::\", salaryInsert);\n            props.handlCloseOrderWithStart(salaryInsert);\n          }\n\n        alert(\" 완 료 \");\n      }\n\n      slipData.journalDeadline = salaryInsert;\n\n      if (salaryInsert === \"\") {\n        slipData.journalDeadline = [{\n          0: 0\n        }];\n      }\n\n      slipData.divsion = divsion;\n      console.log(\"slipData\", slipData);\n      props.handleSaveJournal(slipData); //저장 db\n      //전표, 분개 update\n    } else if (props.silpRow[0].slipNo !== \"NEW\") {\n      console.log(\"update\");\n      props.handleUpdateJournal(journalRows); //업데이트 db\n      //console.log(\":::\" + props.journalList)\n\n      if (!!props.error) {\n        alert(\"ERROR : \" + props.error);\n      }\n\n      if (!!props.journalList) {\n        alert(\" 완 료 \");\n      }\n    }\n  }; //=================================================== cell event  =========================================\n  //=================================================대변 차변 계정과목 금액  유효성 검사  합계잔액시산표 금액 불일치 때문 2020-11-13 수정 ==========================\n  // ==============================================그리드 셀 하나 Auto============================\n\n\n  const onCellClicked = e => {\n    props.handleSearchJournalDetail(e.data.journalNo); //분개상세조회\n    //분개버튼 활성화\n\n    if (props.silpRow[0].slipStatus !== \"승인\" || props.silpRow[0].slipStatus !== \"반려\") {\n      props.setVisibleState(false);\n    } //계정별원장\n\n\n    if (e.colDef.field === \"accountCode\" || e.colDef.field === \"accountName\") {\n      setNodeId(e.rowIndex);\n      setOpenSearchAccountDialog(true);\n\n      if (e.colDef.field.value === undefined || e.colDef.field.value === undefined) {\n        if (e.rowIndex === 0) {\n          if (journalRow.getDisplayedRowCount() === 1) {\n            const newItem = NewRowData(); //새로운 row를 변수에담음\n\n            journalRow.updateRowData({\n              add: [newItem],\n              addIndex: \"\"\n            }); // ag그리드 api로 그리드에 add 함\n\n            let rowChange = journalRow.getRowNode(e.rowIndex + 1); //자동 컬럼추가\n\n            rowChange.setDataValue(\"balanceDivision\", \"차변\");\n            return;\n          }\n        }\n      } //거래처\n\n    } else if (e.colDef.field === \"customerCode\" || e.colDef.field === \"customerName\") {\n      setNodeId(e.rowIndex);\n      setOpenCustomerDialog(true);\n    } else if (e.colDef.field === \"balanceDivision\") {\n      setNodeId(e.rowIndex); //let test1=journalRow.getRowNode(e.rowIndex+1).i\n\n      if (e.rowIndex + 2 === journalRow.getDisplayedRowCount()) {\n        if (e.data.balanceDivision === \"대변\") {\n          let balanceDivision = journalRow.getRowNode(e.rowIndex + 1);\n          balanceDivision.setDataValue(\"balanceDivision\", \"차변\");\n          return;\n        } else {\n          let balanceDivision1 = journalRow.getRowNode(e.rowIndex + 1);\n          balanceDivision1.setDataValue(\"balanceDivision\", \"대변\");\n          return;\n        }\n      }\n    } else if (e.colDef.field === \"leftDebtorPrice\" || e.colDef.field === \"rightCreditsPrice\") {\n      setNodeId(e.rowIndex);\n\n      if (journalRow.getRowNode(e.rowIndex).data.balanceDivision === \"대변\") {\n        if (e.colDef.field === \"leftDebtorPrice\") {\n          alert(\"차변기입금지\");\n          return;\n        }\n      } else if (journalRow.getRowNode(e.rowIndex).data.balanceDivision === \"차변\") {\n        if (e.colDef.field === \"rightCreditsPrice\") {\n          alert(\"대변기입금지\");\n          return;\n        }\n      }\n    }\n  }; //========================================임금/납품 다이얼로그 CLOSED============================================\n\n\n  const handleOpenTotal = value => {\n    setDeadlineDialog(false);\n\n    if (value.newJournal === undefined) {\n      return;\n    }\n\n    if (value.division === \"Delivery\") {\n      setDivsion(value.division);\n      setSalaryRow(value.newJournal); //납품 Row값을 set\n\n      setSalaryInsert(value.deliveryRows);\n    } else if (value.division === \"Salary\") {\n      setDivsion(value.division);\n      setSalaryRow(value.newJournal); //임금 Row값을 set\n\n      setSalaryInsert(value.salaryRows);\n    } else if (value.division === \"Order\") {\n      setDivsion(value.division);\n      setSalaryRow(value.newJournal); //발주 Row값을 set\n\n      setSalaryInsert(value.orderInfoRows);\n    }\n  }; //=================================================== 계정별원장 다이알로그 CLOSED  =========================================\n\n\n  const handleAccountClose = value => {\n    setOpenSearchAccountDialog(false);\n\n    if (value.data === undefined) {\n      return;\n    } else {\n      setAccountRow(value.data); //계정별원장 Row값을 set\n    }\n  }; //=================================================== 거래처 다이알로그 CLOSED  =========================================\n\n\n  const handleCustomerClose = value => {\n    setOpenCustomerDialog(false);\n\n    if (value.data === undefined) {\n      return;\n    } else {\n      console.log(\"거래처 : \" + JSON.stringify(value.data));\n      setCustomerRow(value.data); //거래처 Row값을 set\n    }\n  }; //================================================== 계정별원장 렌더링  ===================================================\n\n\n  useEffect(() => {\n    // accountDialog 에 클릭한 row 값\n    if (accountRow[0] !== undefined) {\n      let itemsToUpdate = []; // rowNode:분개그리드의 rows , index:분개그리드의 index\n\n      journalRow.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n        // 분개그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n        if (index !== nodeId) {\n          if (nodeId + 1 === rowNode.childIndex) {\n            let AccountData = rowNode.data;\n            AccountData.accountCode = accountRow[0].accountInnerCode; //계정코드\n\n            AccountData.accountName = accountRow[0].accountName; //계정명\n\n            itemsToUpdate.push(AccountData); // 배열에 집어넣고,\n          }\n\n          return;\n        } else {\n          let AccountData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n\n          AccountData.accountCode = accountRow[0].accountInnerCode; //계정코드\n\n          AccountData.accountName = accountRow[0].accountName; //계정명\n\n          itemsToUpdate.push(AccountData); // 배열에 집어넣고,\n        }\n      });\n      journalRow.updateRowData({\n        update: itemsToUpdate\n      }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n    }\n  }, [accountRow]); // accountRow 값이 변할 때마다  useEffect를 실행\n  //================================================================================================================\n  //================================================== 거래처 렌더링  ===================================================\n\n  useEffect(onCellClicked => {\n    if (customerRow[0] !== undefined) {\n      // customerDialog 에 클릭한 row 값\n      let itemsToUpdate = []; // rowNode:분개그리드의 rows , index:분개그리드의 index\n\n      journalRow.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n        // 분개그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n        if (index !== nodeId) {\n          if (nodeId + 1 === rowNode.childIndex) {\n            // 대변 차변 자동 설정 위함\n            let CustomerData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n\n            CustomerData.customerCode = customerRow[0].customerCode; //계정코드\n\n            CustomerData.customerName = customerRow[0].customerName; //계정명\n\n            itemsToUpdate.push(CustomerData); //\n          }\n\n          return;\n        }\n\n        let CustomerData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n\n        CustomerData.customerCode = customerRow[0].customerCode; //계정코드\n\n        CustomerData.customerName = customerRow[0].customerName; //계정명\n\n        itemsToUpdate.push(CustomerData); // 배열에 집어넣고,\n      });\n      journalRow.updateRowData({\n        update: itemsToUpdate\n      }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n    }\n  }, [customerRow]); // customerRow 값이 변할 때마다  useEffect를 실행\n  //=========================================임금 랜더링====================================================================\n\n  useEffect(() => {\n    if (salaryRow[0] !== undefined) {\n      for (var i = 0; i < salaryRow.length; i++) {\n        journalRow.updateRowData({\n          add: [salaryRow[i]],\n          addIndex: \"\"\n        }); // ag그리드 api로 그리드에 add 함\n      }\n    }\n  }, [salaryRow]); //=================================================================================================================\n\n  useEffect(() => {\n    console.log(journalRow + \"###\");\n  }, [journalRow]);\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442\n    },\n    __self: this\n  }, React.createElement(OpenDialog, {\n    open: deadlineDialog,\n    close: handleOpenTotal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443\n    },\n    __self: this\n  }), React.createElement(SearchAccountDialog, {\n    open: openSearchAccountDialog,\n    close: handleAccountClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444\n    },\n    __self: this\n  }), React.createElement(CustomerDialog, {\n    open: openCustomerDialog,\n    close: handleCustomerClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    align: \"right\",\n    className: theme.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    color: \"primary\",\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452\n    },\n    __self: this\n  }, \"\\uBD84\\uAC1C\"), React.createElement(Typography, {\n    variant: \"h6\",\n    className: theme.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    onClick: deadlineOpen,\n    color: \"secondary\",\n    disabled: props.visibleState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454\n    },\n    __self: this\n  }, \"\\uBC1C\\uC8FC/\\uB0A9\\uD488 \\uB9C8\\uAC10\\uC2E0\\uCCAD\"), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    onClick: addBtn,\n    color: \"secondary\",\n    disabled: props.visibleState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463\n    },\n    __self: this\n  }, \"\\uBD84\\uAC1C\\uCD94\\uAC00\"), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    onClick: deleteBtn,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472\n    },\n    __self: this\n  }, \"\\uBD84\\uAC1C\\uC0AD\\uC81C\"), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    onClick: saveBtn,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  }, \"\\uBD84\\uAC1C\\uC800\\uC7A5\")))), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    skipHeaderOnAutoSize: \"true\",\n    enableColResize: \"true\",\n    enableSorting: \"true\",\n    enableFilter: \"true\",\n    enableRangeSelection: \"true\",\n    suppressChangeDetection: \"false\",\n    rowStyle: {\n      \"text-align\": \"center\"\n    },\n    style: {\n      height: \"215px\",\n      width: \"100%\",\n      //paddingTop: \"25px\",\n      float: \"center\"\n    },\n    cellStyle: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: column.columnDefs //정의된 컬럼\n    ,\n    rowData: props.journalList,\n    rowSelection: \"multiple\" //하나만 선택하거나 복수개를 선택할 수 있음\n    ,\n    onGridReady: onGridReady //onload 이벤트와 유사한 것\n    ,\n    autoGroupColumnDef: column.autoGroupColumnDef,\n    suppressAggFuncInHeader: true,\n    enableCellChangeFlash: true,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onCellClicked: onCellClicked //셀 클릭\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508\n    },\n    __self: this\n  }))));\n};\n\nexport default Journal;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/page/Slip/Journal.js"],"names":["React","useState","useEffect","useStyles","SearchAccountDialog","CustomerDialog","AgGridReact","Button","Box","AppBar","Toolbar","Typography","OpenDialog","useThemeSwitcher","Journal","props","theme","openSearchAccountDialog","setOpenSearchAccountDialog","deadlineDialog","setDeadlineDialog","openCustomerDialog","setOpenCustomerDialog","journalRow","setJournalRow","accountRow","setAccountRow","customerRow","setCustomerRow","nodeId","setNodeId","price","setPrice","salaryRow","setSalaryRow","divsion","setDivsion","salaryInsert","setSalaryInsert","onGridReady","params","console","log","api","sizeColumnsToFit","column","columnDefs","width","headerCheckboxSelection","checkboxSelection","headerName","field","editable","cellEditor","cellEditorParams","values","hide","autoGroupColumnDef","minWidth","deadlineOpen","addBtn","newItem","NewRowData","updateRowData","add","addIndex","newData","journalNo","accountCode","accountName","balanceDivision","customerCode","customerName","leftDebtorPrice","rightCreditsPrice","deleteBtn","journalRows","getSelectedRows","length","alert","silpRow","slipStatus","remove","window","confirm","slipNo","handleDeleteJournal","saveBtn","rowsCount","getDisplayedRowCount","stopEditing","selectAll","ii","parseInt","slipData","journalList","error","i","finalizeStatus","handlCloseSalaryWithSlipRequest","handlCloseDeliveryWithStart","orderSlipStatus","handlCloseOrderWithStart","journalDeadline","handleSaveJournal","handleUpdateJournal","onCellClicked","e","handleSearchJournalDetail","data","setVisibleState","colDef","rowIndex","value","undefined","rowChange","getRowNode","setDataValue","balanceDivision1","handleOpenTotal","newJournal","division","deliveryRows","salaryRows","orderInfoRows","handleAccountClose","handleCustomerClose","JSON","stringify","itemsToUpdate","forEachNodeAfterFilterAndSort","rowNode","index","childIndex","AccountData","accountInnerCode","push","update","CustomerData","dark","root","title","menuButton","visibleState","height","float","textAlign","param"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,SAAtB;AACA,OAAOC,mBAAP,MAAgC,8DAAhC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,MAAtB,EAA8BC,OAA9B,EAAuCC,UAAvC,QAAyD,mBAAzD;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,gBAAT,QAAiC,oBAAjC,C,CACA;AACA;;AACA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,QAAMC,KAAK,GAAGb,SAAS,EAAvB;AACA,MAAI,CAACc,uBAAD,EAA0BC,0BAA1B,IAAwDjB,QAAQ,CAAC,KAAD,CAApE,CAFuB,CAEsD;;AAC7E,MAAI,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,KAAD,CAAlD,CAHuB,CAGoC;;AAC3D,MAAI,CAACoB,kBAAD,EAAqBC,qBAArB,IAA8CrB,QAAQ,CAAC,KAAD,CAA1D,CAJuB,CAI4C;;AACnE,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BxB,KAAK,CAACC,QAAN,EAApC,CALuB,CAK+B;;AACtD,QAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,EAAD,CAA5C,CANuB,CAM2B;;AAClD,QAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,EAAD,CAA9C,CAPuB,CAO6B;;AACpD,QAAM,CAAC4B,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,EAAD,CAApC,CARuB,CAQmB;;AAC1C,QAAM,CAAC8B,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC,EAAD,CAAlC,CATuB,CASiB;;AACxC,QAAM,CAACgC,SAAD,EAAYC,YAAZ,IAA4BjC,QAAQ,CAAC,EAAD,CAA1C,CAVuB,CAUyB;;AAChD,QAAM,CAACkC,OAAD,EAAUC,UAAV,IAAwBnC,QAAQ,CAAC,EAAD,CAAtC,CAXuB,CAWqB;;AAC5C,QAAM,CAACoC,YAAD,EAAeC,eAAf,IAAkCrC,QAAQ,CAAC,EAAD,CAAhD,CAZuB,CAY+B;AACtD;;AACA,QAAMsC,WAAW,GAAGC,MAAM,IAAI;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAlB,IAAAA,aAAa,CAACgB,MAAM,CAACG,GAAR,CAAb,CAF4B,CAED;;AAC3BH,IAAAA,MAAM,CAACG,GAAP,CAAWC,gBAAX,GAH4B,CAGG;AAChC,GAJD;;AAKAH,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBP,OAAvB,EAnBuB,CAoBvB;;AACA,QAAMU,MAAM,GAAG;AACbC,IAAAA,UAAU,EAAE,CACV;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,uBAAuB,EAAE,IAAxC;AAA8CC,MAAAA,iBAAiB,EAAE;AAAjE,KADU,EAC+D;AACzE;AAAEC,MAAAA,UAAU,EAAE,QAAd;AAAwBC,MAAAA,KAAK,EAAE,WAA/B;AAA4CC,MAAAA,QAAQ,EAAE;AAAtD,KAFU,EAGV;AAAEF,MAAAA,UAAU,EAAE,MAAd;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAHU,EAIV;AAAED,MAAAA,UAAU,EAAE,KAAd;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KAJU,EAKV;AACED,MAAAA,UAAU,EAAE,MADd;AAEEC,MAAAA,KAAK,EAAE,iBAFT;AAGEC,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,UAAU,EAAE,oBAJd;AAIoC;AAClC;AACAC,MAAAA,gBAAgB,EAAE;AAChBC,QAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP;AADQ;AANpB,KALU,EAeV;AAAEL,MAAAA,UAAU,EAAE,OAAd;AAAuBC,MAAAA,KAAK,EAAE;AAA9B,KAfU,EAgBV;AAAED,MAAAA,UAAU,EAAE,MAAd;AAAsBC,MAAAA,KAAK,EAAE,cAA7B;AAA6CK,MAAAA,IAAI,EAAE;AAAnD,KAhBU,EAiBV;AACEN,MAAAA,UAAU,EAAE,IADd;AAEEC,MAAAA,KAAK,EAAE,iBAFT;AAGEC,MAAAA,QAAQ,EAAE,IAHZ,CAIE;;AAJF,KAjBU,EAuBV;AACEF,MAAAA,UAAU,EAAE,IADd;AAEEC,MAAAA,KAAK,EAAE,mBAFT;AAGEC,MAAAA,QAAQ,EAAE,IAHZ,CAIE;;AAJF,KAvBU,CADC;AA+BbK,IAAAA,kBAAkB,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AA/BP,GAAf,CArBuB,CAsDvB;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACzBvC,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAFD,CAxDuB,CA2DvB;;;AACA,QAAMwC,MAAM,GAAG,MAAM;AACnB,UAAMC,OAAO,GAAGC,UAAU,EAA1B,CADmB,CACW;;AAC9BvC,IAAAA,UAAU,CAACwC,aAAX,CAAyB;AAAEC,MAAAA,GAAG,EAAE,CAACH,OAAD,CAAP;AAAkBI,MAAAA,QAAQ,EAAE;AAA5B,KAAzB,EAFmB,CAEyC;AAC7D,GAHD,CA5DuB,CAgEvB;;;AACA,QAAMH,UAAU,GAAG,MAAM;AACvB,QAAII,OAAO,GAAG;AACZC,MAAAA,SAAS,EAAE,KADC;AAEZC,MAAAA,WAAW,EAAE,EAFD;AAGZC,MAAAA,WAAW,EAAE,EAHD;AAIZC,MAAAA,eAAe,EAAE,IAJL;AAKZC,MAAAA,YAAY,EAAE,EALF;AAMZC,MAAAA,YAAY,EAAE,EANF;AAOZC,MAAAA,eAAe,EAAE,GAPL;AAQZC,MAAAA,iBAAiB,EAAE;AARP,KAAd;AAUA,WAAOR,OAAP;AACD,GAZD,CAjEuB,CA8EvB;;;AACA,QAAMS,SAAS,GAAG,MAAM;AACtB,UAAMC,WAAW,GAAGrD,UAAU,CAACsD,eAAX,EAApB,CADsB,CAC4B;;AAClD,QAAID,WAAW,CAACE,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BC,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;AACD,KAHD,MAGO,IACLhE,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAAjB,KAAgC,IAAhC,IACAlE,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAAjB,KAAgC,IAF3B,EAGL;AACAF,MAAAA,KAAK,CAAC,YAAYhE,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAA7B,GAA0C,eAA3C,CAAL;AACA,aAFA,CAEQ;AACT,KANM,MAMA,IAAIL,WAAW,CAAC,CAAD,CAAX,CAAeT,SAAf,KAA6B,KAAjC,EAAwC;AAC7C5C,MAAAA,UAAU,CAACwC,aAAX,CAAyB;AAAEmB,QAAAA,MAAM,EAAEN;AAAV,OAAzB,EAD6C,CACM;;AACnD;AACD,KAHM,MAGA,IAAI,CAACO,MAAM,CAACC,OAAP,CAAe,QAAf,CAAL,EAA+B;AACpCL,MAAAA,KAAK,CAAC,YAAD,CAAL;AACA;AACD,KAHM,MAGA;AACL,YAAMM,MAAM,GAAGT,WAAW,CAAC,CAAD,CAAX,CAAeS,MAA9B,CADK,CACiC;;AACtC,YAAMlB,SAAS,GAAGS,WAAW,CAAC,CAAD,CAAX,CAAeT,SAAjC,CAFK,CAEuC;;AAC5CpD,MAAAA,KAAK,CAACuE,mBAAN,CAA0BD,MAA1B,EAAkClB,SAAlC,EAHK,CAGyC;;AAC9C5C,MAAAA,UAAU,CAACwC,aAAX,CAAyB;AAAEmB,QAAAA,MAAM,EAAEN;AAAV,OAAzB,EAJK,CAI8C;;AACnDG,MAAAA,KAAK,CAAC,MAAD,CAAL;AACD;AACF,GAxBD,CA/EuB,CAwGvB;;;AACA,QAAMQ,OAAO,GAAG,MAAM;AACpB,UAAMX,WAAW,GAAGrD,UAAU,CAACsD,eAAX,EAApB,CADoB,CAC8B;;AAClD,UAAMW,SAAS,GAAGjE,UAAU,CAACkE,oBAAX,EAAlB,CAFoB,CAEiC;;AAErD,QAAIhB,eAAe,GAAG,CAAtB;AACA,QAAIC,iBAAiB,GAAG,CAAxB;AACAnD,IAAAA,UAAU,CAACmE,WAAX,GANoB,CAMM;;AAC1BnE,IAAAA,UAAU,CAACoE,SAAX,GAPoB,CAOI;;AAExB,QAAIH,SAAS,KAAK,CAAd,IAAmBA,SAAS,KAAK,CAArC,EAAwC;AACtCT,MAAAA,KAAK,CAAC,cAAD,CAAL;AACA;AACD;;AACDtC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB8C,SAAzB;;AAEA,QAAIZ,WAAW,CAACE,MAAZ,KAAuBU,SAA3B,EAAsC;AACpCT,MAAAA,KAAK,CAAC,aAAD,CAAL;AACA;AACD;;AACD,SAAK,IAAIa,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGhB,WAAW,CAACE,MAAlC,EAA0Cc,EAAE,EAA5C,EAAgD;AAC9CnD,MAAAA,OAAO,CAACC,GAAR,CAAYkC,WAAW,CAACgB,EAAD,CAAX,CAAgBnB,eAA5B;AACAA,MAAAA,eAAe,IAAIoB,QAAQ,CAACjB,WAAW,CAACgB,EAAD,CAAX,CAAgBnB,eAAjB,CAA3B,CAF8C,CAEgB;;AAC9DC,MAAAA,iBAAiB,IAAImB,QAAQ,CAACjB,WAAW,CAACgB,EAAD,CAAX,CAAgBlB,iBAAjB,CAA7B;AACAjC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CkC,WAAW,CAACgB,EAAD,CAAX,CAAgBrB,YAA5D;;AACA,UACEK,WAAW,CAACgB,EAAD,CAAX,CAAgBvB,WAAhB,KAAgC,IAAhC,IACAO,WAAW,CAACgB,EAAD,CAAX,CAAgBrB,YAAhB,KAAiC,IADjC,IAEAK,WAAW,CAACgB,EAAD,CAAX,CAAgBrB,YAAhB,KAAiC,EAFjC,IAGAK,WAAW,CAACgB,EAAD,CAAX,CAAgBvB,WAAhB,KAAgC,EAHhC,IAIAO,WAAW,CAACgB,EAAD,CAAX,CAAgBtB,eAAhB,KAAoC,EALtC,EAME;AACAS,QAAAA,KAAK,CAAC,gBAAD,CAAL;AACA;AACD,OAd6C,CAe9C;;AACD;;AACD,QAAIS,SAAS,KAAK,CAAlB,EAAqB;AACjBT,MAAAA,KAAK,CAACH,WAAW,CAAC,CAAD,CAAX,CAAeN,eAAf,GAAiC,UAAlC,CAAL;AACA,aAFiB,CAGjB;AAEF;AACD,KAND,MAMO,IACLM,WAAW,CAAC,CAAD,CAAX,CAAeN,eAAf,KAAmCM,WAAW,CAAC,CAAD,CAAX,CAAeN,eAD7C,EAEL;AACAS,MAAAA,KAAK,CACH,YACEH,WAAW,CAAC,CAAD,CAAX,CAAeN,eADjB,GAEE,qBAHC,CAAL;AAKA;AACD,KATM,MASA,IAAIG,eAAe,KAAKC,iBAAxB,EAA2C;AAChDjC,MAAAA,OAAO,CAACC,GAAR,CAAY+B,eAAZ;AACAhC,MAAAA,OAAO,CAACC,GAAR,CAAYgC,iBAAZ;AACAK,MAAAA,KAAK,CACH,eACEN,eADF,GAEE,cAFF,GAGEC,iBAHF,GAIE,kBALC,CAAL;AAOA;AACD,KA9DmB,CA+DpB;;;AACA,QACE3D,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAAjB,KAAgC,IAAhC,IACAlE,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAAjB,KAAgC,IAFlC,EAGE;AACAF,MAAAA,KAAK,CAAC,YAAYhE,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAA7B,GAA0C,eAA3C,CAAL;AACA;AACD,KAND,MAMO,IAAI,CAACE,MAAM,CAACC,OAAP,CAAe,SAAf,CAAL,EAAgC;AACrCL,MAAAA,KAAK,CAAC,OAAD,CAAL;AACA,aAFqC,CAGrC;AACD,KAJM,MAIA,IAAIhE,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBK,MAAjB,KAA4B,KAAhC,EAAuC;AAC5C5C,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAIoD,QAAQ,GAAG/E,KAAK,CAACiE,OAAN,CAAc,CAAd,CAAf;AACAc,MAAAA,QAAQ,CAACC,WAAT,GAAuBnB,WAAvB,CAH4C,CAGR;AACpC;;AAEA,UAAI,CAAC,CAAC7D,KAAK,CAACiF,KAAZ,EAAmB;AACjBjB,QAAAA,KAAK,CAAC,aAAahE,KAAK,CAACiF,KAApB,CAAL;AACD;;AACD,UAAI,CAAC,CAACjF,KAAK,CAACgF,WAAZ,EAAyB;AACvB,YAAI5D,OAAO,KAAK,QAAhB,EAA0B;AACxB;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,YAA5B;;AACA,eAAK,IAAI4D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5D,YAAY,CAACyC,MAAjC,EAAyCmB,CAAC,EAA1C,EAA8C;AAC5C5D,YAAAA,YAAY,CAAC4D,CAAD,CAAZ,CAAgBC,cAAhB,GAAiC,GAAjC;AACD;;AACDnF,UAAAA,KAAK,CAACoF,+BAAN,CAAsC9D,YAAtC;AACD,SAPD,MAOO,IAAIF,OAAO,KAAK,UAAhB,EAA4B;AACjC;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,YAA5B;;AACA,eAAK,IAAI4D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5D,YAAY,CAACyC,MAAjC,EAAyCmB,CAAC,EAA1C,EAA8C;AAC5C5D,YAAAA,YAAY,CAAC4D,CAAD,CAAZ,CAAgBC,cAAhB,GAAiC,GAAjC;AACD;;AACDzD,UAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDL,YAAnD;AACAtB,UAAAA,KAAK,CAACqF,2BAAN,CAAkC/D,YAAlC;AACD,SARM,CAWP;AAXO,aAaF,IAAIF,OAAO,KAAK,OAAhB,EAAyB;AAC5BM,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,YAA5B;;AACA,iBAAK,IAAI4D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5D,YAAY,CAACyC,MAAjC,EAAyCmB,CAAC,EAA1C,EAA8C;AAC5C5D,cAAAA,YAAY,CAAC4D,CAAD,CAAZ,CAAgBI,eAAhB,GAAkC,GAAlC;AACD;;AACD5D,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDL,YAAnD;AACAtB,YAAAA,KAAK,CAACuF,wBAAN,CAA+BjE,YAA/B;AACD;;AAMD0C,QAAAA,KAAK,CAAC,OAAD,CAAL;AACD;;AACDe,MAAAA,QAAQ,CAACS,eAAT,GAA2BlE,YAA3B;;AACA,UAAIA,YAAY,KAAK,EAArB,EAAyB;AACvByD,QAAAA,QAAQ,CAACS,eAAT,GAA2B,CAAC;AAAE,aAAG;AAAL,SAAD,CAA3B;AACD;;AACDT,MAAAA,QAAQ,CAAC3D,OAAT,GAAmBA,OAAnB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBoD,QAAxB;AACA/E,MAAAA,KAAK,CAACyF,iBAAN,CAAwBV,QAAxB,EAnD4C,CAmDT;AACnC;AACD,KArDM,MAqDA,IAAI/E,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBK,MAAjB,KAA4B,KAAhC,EAAuC;AAC5C5C,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA3B,MAAAA,KAAK,CAAC0F,mBAAN,CAA0B7B,WAA1B,EAF4C,CAEJ;AACxC;;AACA,UAAI,CAAC,CAAC7D,KAAK,CAACiF,KAAZ,EAAmB;AACjBjB,QAAAA,KAAK,CAAC,aAAahE,KAAK,CAACiF,KAApB,CAAL;AACD;;AACD,UAAI,CAAC,CAACjF,KAAK,CAACgF,WAAZ,EAAyB;AACvBhB,QAAAA,KAAK,CAAC,OAAD,CAAL;AACD;AACF;AACF,GA1ID,CAzGuB,CAoPvB;AACA;AACA;;;AACA,QAAM2B,aAAa,GAAGC,CAAC,IAAI;AACzB5F,IAAAA,KAAK,CAAC6F,yBAAN,CAAgCD,CAAC,CAACE,IAAF,CAAO1C,SAAvC,EADyB,CAC0B;AACnD;;AACA,QACEpD,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAAjB,KAAgC,IAAhC,IACAlE,KAAK,CAACiE,OAAN,CAAc,CAAd,EAAiBC,UAAjB,KAAgC,IAFlC,EAGE;AACAlE,MAAAA,KAAK,CAAC+F,eAAN,CAAsB,KAAtB;AACD,KARwB,CAUzB;;;AACA,QAAIH,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,aAAnB,IAAoCwD,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,aAA3D,EAA0E;AACxErB,MAAAA,SAAS,CAAC6E,CAAC,CAACK,QAAH,CAAT;AACA9F,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;;AAEA,UACEyF,CAAC,CAACI,MAAF,CAAS5D,KAAT,CAAe8D,KAAf,KAAyBC,SAAzB,IACAP,CAAC,CAACI,MAAF,CAAS5D,KAAT,CAAe8D,KAAf,KAAyBC,SAF3B,EAGE;AACA,YAAIP,CAAC,CAACK,QAAF,KAAe,CAAnB,EAAsB;AACpB,cAAIzF,UAAU,CAACkE,oBAAX,OAAsC,CAA1C,EAA6C;AAC3C,kBAAM5B,OAAO,GAAGC,UAAU,EAA1B,CAD2C,CACb;;AAC9BvC,YAAAA,UAAU,CAACwC,aAAX,CAAyB;AAAEC,cAAAA,GAAG,EAAE,CAACH,OAAD,CAAP;AAAkBI,cAAAA,QAAQ,EAAE;AAA5B,aAAzB,EAF2C,CAEiB;;AAC5D,gBAAIkD,SAAS,GAAG5F,UAAU,CAAC6F,UAAX,CAAsBT,CAAC,CAACK,QAAF,GAAa,CAAnC,CAAhB,CAH2C,CAGY;;AACvDG,YAAAA,SAAS,CAACE,YAAV,CAAuB,iBAAvB,EAA0C,IAA1C;AACA;AACD;AACF;AACF,OAjBuE,CAkBxE;;AACD,KAnBD,MAmBO,IACLV,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,cAAnB,IACAwD,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,cAFd,EAGL;AACArB,MAAAA,SAAS,CAAC6E,CAAC,CAACK,QAAH,CAAT;AACA1F,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,KANM,MAMA,IAAIqF,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,iBAAvB,EAA0C;AAC/CrB,MAAAA,SAAS,CAAC6E,CAAC,CAACK,QAAH,CAAT,CAD+C,CAE/C;;AAEA,UAAIL,CAAC,CAACK,QAAF,GAAa,CAAb,KAAmBzF,UAAU,CAACkE,oBAAX,EAAvB,EAA0D;AACxD,YAAIkB,CAAC,CAACE,IAAF,CAAOvC,eAAP,KAA2B,IAA/B,EAAqC;AACnC,cAAIA,eAAe,GAAG/C,UAAU,CAAC6F,UAAX,CAAsBT,CAAC,CAACK,QAAF,GAAa,CAAnC,CAAtB;AACA1C,UAAAA,eAAe,CAAC+C,YAAhB,CAA6B,iBAA7B,EAAgD,IAAhD;AACA;AACD,SAJD,MAIO;AACL,cAAIC,gBAAgB,GAAG/F,UAAU,CAAC6F,UAAX,CAAsBT,CAAC,CAACK,QAAF,GAAa,CAAnC,CAAvB;AACAM,UAAAA,gBAAgB,CAACD,YAAjB,CAA8B,iBAA9B,EAAiD,IAAjD;AACA;AACD;AACF;AACF,KAfM,MAeA,IACLV,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,iBAAnB,IACAwD,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,mBAFd,EAGL;AACArB,MAAAA,SAAS,CAAC6E,CAAC,CAACK,QAAH,CAAT;;AACA,UAAIzF,UAAU,CAAC6F,UAAX,CAAsBT,CAAC,CAACK,QAAxB,EAAkCH,IAAlC,CAAuCvC,eAAvC,KAA2D,IAA/D,EAAqE;AACnE,YAAIqC,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,iBAAvB,EAA0C;AACxC4B,UAAAA,KAAK,CAAC,QAAD,CAAL;AACA;AACD;AACF,OALD,MAKO,IACLxD,UAAU,CAAC6F,UAAX,CAAsBT,CAAC,CAACK,QAAxB,EAAkCH,IAAlC,CAAuCvC,eAAvC,KAA2D,IADtD,EAEL;AACA,YAAIqC,CAAC,CAACI,MAAF,CAAS5D,KAAT,KAAmB,mBAAvB,EAA4C;AAC1C4B,UAAAA,KAAK,CAAC,QAAD,CAAL;AACA;AACD;AACF;AACF;AACF,GAtED,CAvPuB,CA8TvB;;;AACA,QAAMwC,eAAe,GAAGN,KAAK,IAAI;AAC/B7F,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;;AACA,QAAI6F,KAAK,CAACO,UAAN,KAAqBN,SAAzB,EAAoC;AAClC;AACD;;AACD,QAAID,KAAK,CAACQ,QAAN,KAAmB,UAAvB,EAAmC;AACjCrF,MAAAA,UAAU,CAAC6E,KAAK,CAACQ,QAAP,CAAV;AACAvF,MAAAA,YAAY,CAAC+E,KAAK,CAACO,UAAP,CAAZ,CAFiC,CAED;;AAChClF,MAAAA,eAAe,CAAC2E,KAAK,CAACS,YAAP,CAAf;AACD,KAJD,MAIO,IAAIT,KAAK,CAACQ,QAAN,KAAmB,QAAvB,EAAiC;AACtCrF,MAAAA,UAAU,CAAC6E,KAAK,CAACQ,QAAP,CAAV;AACAvF,MAAAA,YAAY,CAAC+E,KAAK,CAACO,UAAP,CAAZ,CAFsC,CAEN;;AAChClF,MAAAA,eAAe,CAAC2E,KAAK,CAACU,UAAP,CAAf;AACD,KAJM,MAIA,IAAIV,KAAK,CAACQ,QAAN,KAAmB,OAAvB,EAAgC;AACrCrF,MAAAA,UAAU,CAAC6E,KAAK,CAACQ,QAAP,CAAV;AACAvF,MAAAA,YAAY,CAAC+E,KAAK,CAACO,UAAP,CAAZ,CAFqC,CAEL;;AAChClF,MAAAA,eAAe,CAAC2E,KAAK,CAACW,aAAP,CAAf;AACD;AACF,GAlBD,CA/TuB,CAkVvB;;;AACA,QAAMC,kBAAkB,GAAGZ,KAAK,IAAI;AAClC/F,IAAAA,0BAA0B,CAAC,KAAD,CAA1B;;AACA,QAAI+F,KAAK,CAACJ,IAAN,KAAeK,SAAnB,EAA8B;AAC5B;AACD,KAFD,MAEO;AACLxF,MAAAA,aAAa,CAACuF,KAAK,CAACJ,IAAP,CAAb,CADK,CACsB;AAC5B;AACF,GAPD,CAnVuB,CA2VvB;;;AACA,QAAMiB,mBAAmB,GAAGb,KAAK,IAAI;AACnC3F,IAAAA,qBAAqB,CAAC,KAAD,CAArB;;AACA,QAAI2F,KAAK,CAACJ,IAAN,KAAeK,SAAnB,EAA8B;AAC5B;AACD,KAFD,MAEO;AACLzE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWqF,IAAI,CAACC,SAAL,CAAef,KAAK,CAACJ,IAArB,CAAvB;AACAjF,MAAAA,cAAc,CAACqF,KAAK,CAACJ,IAAP,CAAd,CAFK,CAEuB;AAC7B;AACF,GARD,CA5VuB,CAqWvB;;;AACA3G,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIuB,UAAU,CAAC,CAAD,CAAV,KAAkByF,SAAtB,EAAiC;AAC/B,UAAIe,aAAa,GAAG,EAApB,CAD+B,CAG/B;;AACA1G,MAAAA,UAAU,CAAC2G,6BAAX,CAAyC,UAASC,OAAT,EAAkBC,KAAlB,EAAyB;AAChE;AACA,YAAIA,KAAK,KAAKvG,MAAd,EAAsB;AACpB,cAAIA,MAAM,GAAG,CAAT,KAAesG,OAAO,CAACE,UAA3B,EAAuC;AACrC,gBAAIC,WAAW,GAAGH,OAAO,CAACtB,IAA1B;AACAyB,YAAAA,WAAW,CAAClE,WAAZ,GAA0B3C,UAAU,CAAC,CAAD,CAAV,CAAc8G,gBAAxC,CAFqC,CAEqB;;AAC1DD,YAAAA,WAAW,CAACjE,WAAZ,GAA0B5C,UAAU,CAAC,CAAD,CAAV,CAAc4C,WAAxC,CAHqC,CAGgB;;AACrD4D,YAAAA,aAAa,CAACO,IAAd,CAAmBF,WAAnB,EAJqC,CAIJ;AAClC;;AACD;AACD,SARD,MAQO;AACL,cAAIA,WAAW,GAAGH,OAAO,CAACtB,IAA1B,CADK,CAC2B;;AAChCyB,UAAAA,WAAW,CAAClE,WAAZ,GAA0B3C,UAAU,CAAC,CAAD,CAAV,CAAc8G,gBAAxC,CAFK,CAEqD;;AAC1DD,UAAAA,WAAW,CAACjE,WAAZ,GAA0B5C,UAAU,CAAC,CAAD,CAAV,CAAc4C,WAAxC,CAHK,CAGgD;;AACrD4D,UAAAA,aAAa,CAACO,IAAd,CAAmBF,WAAnB,EAJK,CAI4B;AAClC;AACF,OAhBD;AAiBA/G,MAAAA,UAAU,CAACwC,aAAX,CAAyB;AAAE0E,QAAAA,MAAM,EAAER;AAAV,OAAzB,EArB+B,CAqBsB;AACtD;AACF,GAzBQ,EAyBN,CAACxG,UAAD,CAzBM,CAAT,CAtWuB,CA+XL;AAClB;AACA;;AACAvB,EAAAA,SAAS,CACPwG,aAAa,IAAI;AACf,QAAI/E,WAAW,CAAC,CAAD,CAAX,KAAmBuF,SAAvB,EAAkC;AAChC;AACA,UAAIe,aAAa,GAAG,EAApB,CAFgC,CAGhC;;AACA1G,MAAAA,UAAU,CAAC2G,6BAAX,CAAyC,UAASC,OAAT,EAAkBC,KAAlB,EAAyB;AAChE;AACA,YAAIA,KAAK,KAAKvG,MAAd,EAAsB;AACpB,cAAIA,MAAM,GAAG,CAAT,KAAesG,OAAO,CAACE,UAA3B,EAAuC;AACrC;AACA,gBAAIK,YAAY,GAAGP,OAAO,CAACtB,IAA3B,CAFqC,CAEJ;;AACjC6B,YAAAA,YAAY,CAACnE,YAAb,GAA4B5C,WAAW,CAAC,CAAD,CAAX,CAAe4C,YAA3C,CAHqC,CAGoB;;AACzDmE,YAAAA,YAAY,CAAClE,YAAb,GAA4B7C,WAAW,CAAC,CAAD,CAAX,CAAe6C,YAA3C,CAJqC,CAIoB;;AACzDyD,YAAAA,aAAa,CAACO,IAAd,CAAmBE,YAAnB,EALqC,CAKH;AACnC;;AACD;AACD;;AACD,YAAIA,YAAY,GAAGP,OAAO,CAACtB,IAA3B,CAZgE,CAY/B;;AACjC6B,QAAAA,YAAY,CAACnE,YAAb,GAA4B5C,WAAW,CAAC,CAAD,CAAX,CAAe4C,YAA3C,CAbgE,CAaP;;AACzDmE,QAAAA,YAAY,CAAClE,YAAb,GAA4B7C,WAAW,CAAC,CAAD,CAAX,CAAe6C,YAA3C,CAdgE,CAcP;;AACzDyD,QAAAA,aAAa,CAACO,IAAd,CAAmBE,YAAnB,EAfgE,CAe9B;AACnC,OAhBD;AAiBAnH,MAAAA,UAAU,CAACwC,aAAX,CAAyB;AAAE0E,QAAAA,MAAM,EAAER;AAAV,OAAzB,EArBgC,CAqBqB;AACtD;AACF,GAzBM,EA0BP,CAACtG,WAAD,CA1BO,CAAT,CAlYuB,CA6ZpB;AACH;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI+B,SAAS,CAAC,CAAD,CAAT,KAAiBiF,SAArB,EAAgC;AAC9B,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhE,SAAS,CAAC6C,MAA9B,EAAsCmB,CAAC,EAAvC,EAA2C;AACzC1E,QAAAA,UAAU,CAACwC,aAAX,CAAyB;AAAEC,UAAAA,GAAG,EAAE,CAAC/B,SAAS,CAACgE,CAAD,CAAV,CAAP;AAAuBhC,UAAAA,QAAQ,EAAE;AAAjC,SAAzB,EADyC,CACwB;AAClE;AACF;AACF,GANQ,EAMN,CAAChC,SAAD,CANM,CAAT,CA/ZuB,CAsavB;;AACA/B,EAAAA,SAAS,CAAC,MAAM;AACduC,IAAAA,OAAO,CAACC,GAAR,CAAYnB,UAAU,GAAG,KAAzB;AACD,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;AAIA,QAAM;AAAEoH,IAAAA;AAAF,MAAW9H,gBAAgB,EAAjC;AAEA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEM,cAAlB;AAAkC,IAAA,KAAK,EAAEoG,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,mBAAD;AACE,IAAA,IAAI,EAAEtG,uBADR;AAEE,IAAA,KAAK,EAAE4G,kBAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAME,oBAAC,cAAD;AAAgB,IAAA,IAAI,EAAExG,kBAAtB;AAA0C,IAAA,KAAK,EAAEyG,mBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE;AAAK,IAAA,KAAK,EAAC,OAAX;AAAmB,IAAA,SAAS,EAAE9G,KAAK,CAAC4H,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAwB,IAAA,QAAQ,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAE5H,KAAK,CAAC6H,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAE7H,KAAK,CAAC8H,UADnB;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,OAAO,EAAEnF,YAHX;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,QAAQ,EAAE5C,KAAK,CAACgI,YALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAHF,EAYE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAE/H,KAAK,CAAC8H,UADnB;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,OAAO,EAAElF,MAHX;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,QAAQ,EAAE7C,KAAK,CAACgI,YALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAZF,EAqBE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAE/H,KAAK,CAAC8H,UADnB;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,OAAO,EAAEnE,SAHX;AAIE,IAAA,KAAK,EAAC,WAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCArBF,EA6BE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAE3D,KAAK,CAAC8H,UADnB;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,OAAO,EAAEvD,OAHX;AAIE,IAAA,KAAK,EAAC,WAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCA7BF,CADF,CADF,CAPF,EAiDE;AACE,IAAA,SAAS,EAAEoD,IAAI,GAAG,sBAAH,GAA4B,mBAD7C;AAEE,IAAA,oBAAoB,EAAC,MAFvB;AAGE,IAAA,eAAe,EAAC,MAHlB;AAIE,IAAA,aAAa,EAAC,MAJhB;AAKE,IAAA,YAAY,EAAC,MALf;AAME,IAAA,oBAAoB,EAAC,MANvB;AAOE,IAAA,uBAAuB,EAAC,OAP1B;AAQE,IAAA,QAAQ,EAAE;AAAE,oBAAc;AAAhB,KARZ;AASE,IAAA,KAAK,EAAE;AACLK,MAAAA,MAAM,EAAE,OADH;AAELjG,MAAAA,KAAK,EAAE,MAFF;AAGL;AACAkG,MAAAA,KAAK,EAAE;AAJF,KATT;AAeE,IAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAfb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBE,oBAAC,WAAD;AACE,IAAA,UAAU,EAAErG,MAAM,CAACC,UADrB,CACiC;AADjC;AAEE,IAAA,OAAO,EAAE/B,KAAK,CAACgF,WAFjB;AAGE,IAAA,YAAY,EAAC,UAHf,CAG0B;AAH1B;AAIE,IAAA,WAAW,EAAExD,WAJf,CAI4B;AAJ5B;AAKE,IAAA,kBAAkB,EAAEM,MAAM,CAACY,kBAL7B;AAME,IAAA,uBAAuB,EAAE,IAN3B;AAOE,IAAA,qBAAqB,EAAE,IAPzB;AAQE,IAAA,WAAW,EAAE,UAAS0F,KAAT,EAAgB;AAC3B,aAAO;AAAE,sBAAc;AAAhB,OAAP;AACD,KAVH,CAUK;AAVL;AAWE,IAAA,aAAa,EAAEzC,aAXjB,CAWgC;AAXhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,CAjDF,CADF,CADF;AAqFD,CAlgBD;;AAmgBA,eAAe5F,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport useStyles from \"./Theme\";\nimport SearchAccountDialog from \"erp/account/statement/page/AccountLedger/AccountSearchDialog\";\nimport CustomerDialog from \"./Dialog/CustomerDialog\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Button, Box, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport OpenDialog from \"./SalaryAndDelivery/OpenDialog\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n//=================================================== 2020-09-14 조편백 일반전표 분개 =========================================\n//=================================================== 2020-11-18 박민호 일반전표 분개 수정=========================================\nconst Journal = props => {\n  const theme = useStyles();\n  var [openSearchAccountDialog, setOpenSearchAccountDialog] = useState(false); //계정과목\n  var [deadlineDialog, setDeadlineDialog] = useState(false); //임금/납품다이얼로그\n  var [openCustomerDialog, setOpenCustomerDialog] = useState(false); //거래처 다이알로그\n  const [journalRow, setJournalRow] = React.useState(); //분개그리드\n  const [accountRow, setAccountRow] = useState(\"\"); //계정별원장 다이알로그 상태값\n  const [customerRow, setCustomerRow] = useState(\"\"); //거래처 다이알로그 상태값\n  const [nodeId, setNodeId] = useState(\"\"); //분개그리드 row의indexid\n  const [price, setPrice] = useState(\"\"); //분개 그리드 row 가격 상태값\n  const [salaryRow, setSalaryRow] = useState(\"\"); //임금 다이알로그 상태값\n  const [divsion, setDivsion] = useState(\"\"); // 다이알로그 구분\n  const [salaryInsert, setSalaryInsert] = useState(\"\"); // 다이알로그 구분\n  //=================================================== ag Grid 초기화 시 실행 =========================================\n  const onGridReady = params => {\n    console.log(\"ddddd\");\n    setJournalRow(params.api); //동적으로변하는 분개그리드 값 할당\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n  console.log(\"divsion\", divsion);\n  //=================================================== Grid  =========================================\n  const column = {\n    columnDefs: [\n      { width: \"50\", headerCheckboxSelection: true, checkboxSelection: true }, //체크박스\n      { headerName: \"분개일련번호\", field: \"journalNo\", editable: true },\n      { headerName: \"계정코드\", field: \"accountCode\" },\n      { headerName: \"계정명\", field: \"accountName\" },\n      {\n        headerName: \"대차구분\",\n        field: \"balanceDivision\",\n        editable: true,\n        cellEditor: \"agSelectCellEditor\", //콤보 생성\n        //콤보List\n        cellEditorParams: {\n          values: [\"대변\", \"차변\"],\n        },\n      },\n      { headerName: \"거래처코드\", field: \"customerCode\" },\n      { headerName: \"거래처명\", field: \"customerName\", hide: true },\n      {\n        headerName: \"차변\",\n        field: \"leftDebtorPrice\",\n        editable: true,\n        //valueFormatter:' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"',\n      },\n      {\n        headerName: \"대변\",\n        field: \"rightCreditsPrice\",\n        editable: true,\n        //valueFormatter:' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"',\n      },\n    ],\n    autoGroupColumnDef: { minWidth: 100 },\n  };\n  //===============================================월급 자동 =================================================\n\n  const deadlineOpen = () => {\n    setDeadlineDialog(true);\n  };\n  //=================================================== 분개추가버튼  =========================================\n  const addBtn = () => {\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n    journalRow.updateRowData({ add: [newItem], addIndex: \"\" }); // ag그리드 api로 그리드에 add 함\n  };\n  //추가할 컬럼 선언\n  const NewRowData = () => {\n    let newData = {\n      journalNo: \"NEW\",\n      accountCode: \"\",\n      accountName: \"\",\n      balanceDivision: \"대변\",\n      customerCode: \"\",\n      customerName: \"\",\n      leftDebtorPrice: \"0\",\n      rightCreditsPrice: \"0\",\n    };\n    return newData;\n  };\n  //=================================================== 분개삭제버튼  =========================================\n  const deleteBtn = () => {\n    const journalRows = journalRow.getSelectedRows(); // 그리드의 모든 값을 반환\n    if (journalRows.length === 0) {\n      alert(\"삭제할 분개를 선택해주세요.\");\n      return;\n    } else if (\n      props.silpRow[0].slipStatus === \"승인\" ||\n      props.silpRow[0].slipStatus === \"반려\"\n    ) {\n      alert(\"승인상태 [ \" + props.silpRow[0].slipStatus + \" ]  : 삭제 불가능 \");\n      return; //전표그리드에 승인상태를 유효성검사로 검사함\n    } else if (journalRows[0].journalNo === \"NEW\") {\n      journalRow.updateRowData({ remove: journalRows }); // 선택된 row 삭제\n      return;\n    } else if (!window.confirm(\" 삭제 ? \")) {\n      alert(\" 취소되었습니다. \");\n      return;\n    } else {\n      const slipNo = journalRows[0].slipNo; //걍 변수에담음\n      const journalNo = journalRows[0].journalNo; //걍 변수에담음\n      props.handleDeleteJournal(slipNo, journalNo); //삭제 SAGA\n      journalRow.updateRowData({ remove: journalRows }); // 선택된 row 삭제\n      alert(\" 삭제 \");\n    }\n  };\n  //=================================================== 분개저장버튼  =========================================\n  const saveBtn = () => {\n    const journalRows = journalRow.getSelectedRows(); // 그리드의 모든 값\n    const rowsCount = journalRow.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n\n    var leftDebtorPrice = 0;\n    var rightCreditsPrice = 0;\n    journalRow.stopEditing(); //편집 중지\n    journalRow.selectAll(); // 그리드 전체 값 Read\n\n    if (rowsCount === 0 || rowsCount === 1) {\n      alert(\" 분개를 작성해주세요 \");\n      return;\n    }\n    console.log(\"rowsCount\", rowsCount);\n\n    if (journalRows.length !== rowsCount) {\n      alert(\"체크박스 확인바랍니다\");\n      return;\n    }\n    for (var ii = 0; ii < journalRows.length; ii++) {\n      console.log(journalRows[ii].leftDebtorPrice);\n      leftDebtorPrice += parseInt(journalRows[ii].leftDebtorPrice); //대변차변 합계 유효성검사\n      rightCreditsPrice += parseInt(journalRows[ii].rightCreditsPrice);\n      console.log(\"journalRows[ii].customerCode\", journalRows[ii].customerCode);\n      if (\n        journalRows[ii].accountName === null ||\n        journalRows[ii].customerCode === null ||\n        journalRows[ii].customerCode === \"\" ||\n        journalRows[ii].accountName === \"\" ||\n        journalRows[ii].balanceDivision === \"\"\n      ) {\n        alert(\" 빈칸을 입력해주세요 . \");\n        return;\n      }\n      //1 째 row 가있는데 2번째 row가 없으면?\n    }\n    if (rowsCount === 1) {    \n        alert(journalRows[0].balanceDivision + \"만 있으면 안됨\");\n        return;\n        //분개는 차변 1 개 대변 1개 가세트임 중복되면 return\n      \n      //1.2 번째 ROW 가 있으면 차변대변 금액비교\n    } else if (\n      journalRows[0].balanceDivision === journalRows[1].balanceDivision\n    ) {\n      alert(\n        \"대차구분에 [\" +\n          journalRows[0].balanceDivision +\n          \"]  이 중복됩니다. 수정해주세요.\",\n      );\n      return;\n    } else if (leftDebtorPrice !== rightCreditsPrice) {\n      console.log(leftDebtorPrice);\n      console.log(rightCreditsPrice);\n      alert(\n        \" [ 차변금액 : \" +\n          leftDebtorPrice +\n          \" ]  [대변금액 : \" +\n          rightCreditsPrice +\n          \" ] 금액이 일치하지않습니다.\",\n      );\n      return;\n    }\n    //전표가 승인 or 반려면 분개 수정 불가능\n    if (\n      props.silpRow[0].slipStatus === \"승인\" ||\n      props.silpRow[0].slipStatus === \"반려\"\n    ) {\n      alert(\"승인상태 [ \" + props.silpRow[0].slipStatus + \" ]  : 수정 불가능 \");\n      return;\n    } else if (!window.confirm(\" 저 장 ? \")) {\n      alert(\" 취 소 \");\n      return;\n      //전표 , 분개 번호 생성 insert\n    } else if (props.silpRow[0].slipNo === \"NEW\") {\n      console.log(\"insert\");\n      let slipData = props.silpRow[0];\n      slipData.journalList = journalRows; // {전표 ,분개키값:[{분개1},{분개2},{분개3}...]}\n      //journalList 로 한 이유는 뒷단 ..to/SlipBean 에 ArrayList<JournalBean> journalList; 라고적혀있음 (journalList 키값에 분개 List가 할당됨\n\n      if (!!props.error) {\n        alert(\"ERROR : \" + props.error);\n      }\n      if (!!props.journalList) {\n        if (divsion === \"Salary\") {\n          //임금 마감 Y작업\n          console.log(\"salaryInsert\", salaryInsert);\n          for (var i = 0; i < salaryInsert.length; i++) {\n            salaryInsert[i].finalizeStatus = \"Y\";\n          }\n          props.handlCloseSalaryWithSlipRequest(salaryInsert);\n        } else if (divsion === \"Delivery\") {\n          //납품 마감 Y작업\n          console.log(\"salaryInsert\", salaryInsert);\n          for (var i = 0; i < salaryInsert.length; i++) {\n            salaryInsert[i].finalizeStatus = \"Y\";\n          }\n          console.log(\"salaryInsert:::::::::::::::::::::::\", salaryInsert);\n          props.handlCloseDeliveryWithStart(salaryInsert);\n        } \n        \n        \n        // 발주 마감하면 ORDER_INFO / order_slip_status => 'Y'로 바꾸기\n        \n        else if (divsion === \"Order\") {\n          console.log(\"salaryInsert\", salaryInsert);\n          for (var i = 0; i < salaryInsert.length; i++) {\n            salaryInsert[i].orderSlipStatus = \"Y\";\n          }\n          console.log(\"salaryInsert:::::::::::::::::::::::\", salaryInsert);\n          props.handlCloseOrderWithStart(salaryInsert);\n        }\n\n\n\n\n\n        alert(\" 완 료 \");\n      }\n      slipData.journalDeadline = salaryInsert;\n      if (salaryInsert === \"\") {\n        slipData.journalDeadline = [{ 0: 0 }];\n      }\n      slipData.divsion = divsion;\n      console.log(\"slipData\", slipData);\n      props.handleSaveJournal(slipData); //저장 db\n      //전표, 분개 update\n    } else if (props.silpRow[0].slipNo !== \"NEW\") {\n      console.log(\"update\");\n      props.handleUpdateJournal(journalRows); //업데이트 db\n      //console.log(\":::\" + props.journalList)\n      if (!!props.error) {\n        alert(\"ERROR : \" + props.error);\n      }\n      if (!!props.journalList) {\n        alert(\" 완 료 \");\n      }\n    }\n  };\n  //=================================================== cell event  =========================================\n  //=================================================대변 차변 계정과목 금액  유효성 검사  합계잔액시산표 금액 불일치 때문 2020-11-13 수정 ==========================\n  // ==============================================그리드 셀 하나 Auto============================\n  const onCellClicked = e => {\n    props.handleSearchJournalDetail(e.data.journalNo); //분개상세조회\n    //분개버튼 활성화\n    if (\n      props.silpRow[0].slipStatus !== \"승인\" ||\n      props.silpRow[0].slipStatus !== \"반려\"\n    ) {\n      props.setVisibleState(false);\n    }\n\n    //계정별원장\n    if (e.colDef.field === \"accountCode\" || e.colDef.field === \"accountName\") {\n      setNodeId(e.rowIndex);\n      setOpenSearchAccountDialog(true);\n\n      if (\n        e.colDef.field.value === undefined ||\n        e.colDef.field.value === undefined\n      ) {\n        if (e.rowIndex === 0) {\n          if (journalRow.getDisplayedRowCount() === 1) {\n            const newItem = NewRowData(); //새로운 row를 변수에담음\n            journalRow.updateRowData({ add: [newItem], addIndex: \"\" }); // ag그리드 api로 그리드에 add 함\n            let rowChange = journalRow.getRowNode(e.rowIndex + 1); //자동 컬럼추가\n            rowChange.setDataValue(\"balanceDivision\", \"차변\");\n            return;\n          }\n        }\n      }\n      //거래처\n    } else if (\n      e.colDef.field === \"customerCode\" ||\n      e.colDef.field === \"customerName\"\n    ) {\n      setNodeId(e.rowIndex);\n      setOpenCustomerDialog(true);\n    } else if (e.colDef.field === \"balanceDivision\") {\n      setNodeId(e.rowIndex);\n      //let test1=journalRow.getRowNode(e.rowIndex+1).i\n\n      if (e.rowIndex + 2 === journalRow.getDisplayedRowCount()) {\n        if (e.data.balanceDivision === \"대변\") {\n          let balanceDivision = journalRow.getRowNode(e.rowIndex + 1);\n          balanceDivision.setDataValue(\"balanceDivision\", \"차변\");\n          return;\n        } else {\n          let balanceDivision1 = journalRow.getRowNode(e.rowIndex + 1);\n          balanceDivision1.setDataValue(\"balanceDivision\", \"대변\");\n          return;\n        }\n      }\n    } else if (\n      e.colDef.field === \"leftDebtorPrice\" ||\n      e.colDef.field === \"rightCreditsPrice\"\n    ) {\n      setNodeId(e.rowIndex);\n      if (journalRow.getRowNode(e.rowIndex).data.balanceDivision === \"대변\") {\n        if (e.colDef.field === \"leftDebtorPrice\") {\n          alert(\"차변기입금지\");\n          return;\n        }\n      } else if (\n        journalRow.getRowNode(e.rowIndex).data.balanceDivision === \"차변\"\n      ) {\n        if (e.colDef.field === \"rightCreditsPrice\") {\n          alert(\"대변기입금지\");\n          return;\n        }\n      }\n    }\n  };\n  //========================================임금/납품 다이얼로그 CLOSED============================================\n  const handleOpenTotal = value => {\n    setDeadlineDialog(false);\n    if (value.newJournal === undefined) {\n      return;\n    }\n    if (value.division === \"Delivery\") {\n      setDivsion(value.division);\n      setSalaryRow(value.newJournal); //납품 Row값을 set\n      setSalaryInsert(value.deliveryRows);\n    } else if (value.division === \"Salary\") {\n      setDivsion(value.division);\n      setSalaryRow(value.newJournal); //임금 Row값을 set\n      setSalaryInsert(value.salaryRows);\n    } else if (value.division === \"Order\") {\n      setDivsion(value.division);\n      setSalaryRow(value.newJournal); //발주 Row값을 set\n      setSalaryInsert(value.orderInfoRows);\n    }\n  };\n  //=================================================== 계정별원장 다이알로그 CLOSED  =========================================\n  const handleAccountClose = value => {\n    setOpenSearchAccountDialog(false);\n    if (value.data === undefined) {\n      return;\n    } else {\n      setAccountRow(value.data); //계정별원장 Row값을 set\n    }\n  };\n  //=================================================== 거래처 다이알로그 CLOSED  =========================================\n  const handleCustomerClose = value => {\n    setOpenCustomerDialog(false);\n    if (value.data === undefined) {\n      return;\n    } else {\n      console.log(\"거래처 : \" + JSON.stringify(value.data));\n      setCustomerRow(value.data); //거래처 Row값을 set\n    }\n  };\n  //================================================== 계정별원장 렌더링  ===================================================\n  useEffect(() => {\n    // accountDialog 에 클릭한 row 값\n    if (accountRow[0] !== undefined) {\n      let itemsToUpdate = [];\n\n      // rowNode:분개그리드의 rows , index:분개그리드의 index\n      journalRow.forEachNodeAfterFilterAndSort(function(rowNode, index) {\n        // 분개그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n        if (index !== nodeId) {\n          if (nodeId + 1 === rowNode.childIndex) {\n            let AccountData = rowNode.data;\n            AccountData.accountCode = accountRow[0].accountInnerCode; //계정코드\n            AccountData.accountName = accountRow[0].accountName; //계정명\n            itemsToUpdate.push(AccountData); // 배열에 집어넣고,\n          }\n          return;\n        } else {\n          let AccountData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n          AccountData.accountCode = accountRow[0].accountInnerCode; //계정코드\n          AccountData.accountName = accountRow[0].accountName; //계정명\n          itemsToUpdate.push(AccountData); // 배열에 집어넣고,\n        }\n      });\n      journalRow.updateRowData({ update: itemsToUpdate }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n    }\n  }, [accountRow]); // accountRow 값이 변할 때마다  useEffect를 실행\n  //================================================================================================================\n  //================================================== 거래처 렌더링  ===================================================\n  useEffect(\n    onCellClicked => {\n      if (customerRow[0] !== undefined) {\n        // customerDialog 에 클릭한 row 값\n        let itemsToUpdate = [];\n        // rowNode:분개그리드의 rows , index:분개그리드의 index\n        journalRow.forEachNodeAfterFilterAndSort(function(rowNode, index) {\n          // 분개그리드 indexId  !== 클릭한 셀 indexId ( 결국 클릭한 셀에 index에 값을 insert 할려고 비교연산함 )\n          if (index !== nodeId) {\n            if (nodeId + 1 === rowNode.childIndex) {\n              // 대변 차변 자동 설정 위함\n              let CustomerData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n              CustomerData.customerCode = customerRow[0].customerCode; //계정코드\n              CustomerData.customerName = customerRow[0].customerName; //계정명\n              itemsToUpdate.push(CustomerData); //\n            }\n            return;\n          }\n          let CustomerData = rowNode.data; // rowNode : Dialog에서 넘어온 data를 estimateData에 넣고,\n          CustomerData.customerCode = customerRow[0].customerCode; //계정코드\n          CustomerData.customerName = customerRow[0].customerName; //계정명\n          itemsToUpdate.push(CustomerData); // 배열에 집어넣고,\n        });\n        journalRow.updateRowData({ update: itemsToUpdate }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n      }\n    },\n    [customerRow],\n  ); // customerRow 값이 변할 때마다  useEffect를 실행\n  //=========================================임금 랜더링====================================================================\n  useEffect(() => {\n    if (salaryRow[0] !== undefined) {\n      for (var i = 0; i < salaryRow.length; i++) {\n        journalRow.updateRowData({ add: [salaryRow[i]], addIndex: \"\" }); // ag그리드 api로 그리드에 add 함\n      }\n    }\n  }, [salaryRow]);\n  //=================================================================================================================\n  useEffect(() => {\n    console.log(journalRow + \"###\");\n  }, [journalRow]);\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <>\n      <div>\n        <OpenDialog open={deadlineDialog} close={handleOpenTotal} />\n        <SearchAccountDialog\n          open={openSearchAccountDialog}\n          close={handleAccountClose}\n        />\n        <CustomerDialog open={openCustomerDialog} close={handleCustomerClose} />\n        <div align=\"right\" className={theme.root}>\n          <AppBar color=\"primary\" position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h4\">분개</Typography>\n              <Typography variant=\"h6\" className={theme.title} />\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                onClick={deadlineOpen}\n                color=\"secondary\"\n                disabled={props.visibleState}\n              >\n                발주/납품 마감신청\n              </Button>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                onClick={addBtn}\n                color=\"secondary\"\n                disabled={props.visibleState}\n              >\n                분개추가\n              </Button>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                onClick={deleteBtn}\n                color=\"secondary\"\n              >\n                분개삭제\n              </Button>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                onClick={saveBtn}\n                color=\"secondary\"\n              >\n                분개저장\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <div\n          className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n          skipHeaderOnAutoSize=\"true\"\n          enableColResize=\"true\"\n          enableSorting=\"true\"\n          enableFilter=\"true\"\n          enableRangeSelection=\"true\"\n          suppressChangeDetection=\"false\"\n          rowStyle={{ \"text-align\": \"center\" }}\n          style={{\n            height: \"215px\",\n            width: \"100%\",\n            //paddingTop: \"25px\",\n            float: \"center\",\n          }}\n          cellStyle={{ textAlign: \"center\" }}\n        >\n          <AgGridReact\n            columnDefs={column.columnDefs} //정의된 컬럼\n            rowData={props.journalList}\n            rowSelection=\"multiple\" //하나만 선택하거나 복수개를 선택할 수 있음\n            onGridReady={onGridReady} //onload 이벤트와 유사한 것\n            autoGroupColumnDef={column.autoGroupColumnDef}\n            suppressAggFuncInHeader={true}\n            enableCellChangeFlash={true}\n            getRowStyle={function(param) {\n              return { \"text-align\": \"center\" };\n            }} //body 가운데 정렬\n            onCellClicked={onCellClicked} //셀 클릭\n          />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Journal;\n"]},"metadata":{},"sourceType":"module"}