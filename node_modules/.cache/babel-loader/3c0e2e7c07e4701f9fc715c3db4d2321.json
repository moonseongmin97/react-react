{"ast":null,"code":"import { takeEvery, put, takeLatest, delay, fork } from \"redux-saga/effects\";\nimport accountApi from \"api/accountApi\";\nimport * as types from \"../reducer/AccountReducer\";\nimport createRequestSaga from \"util/createRequestSaga\";\nimport * as api from '../api'; //------------일반전표------------------\n//------------전표------------------\n\nconst selectSlipSaga = createRequestSaga(types.SELECT_SLIP_START, api.selectSlip);\nconst deleteSlipSaga = createRequestSaga(types.DELETE_SLIP_START, api.deleteSlip);\nconst updateSlipSaga = createRequestSaga(types.UPDATE_SLIP_START, api.updateSlip); //------------분개------------------\n\nconst searchJournalSaga = createRequestSaga(types.SELECT_JOURNAL_START, api.searchJournal);\nconst deleteJournalSaga = createRequestSaga(types.DELETE_JOURNAL_START, api.deleteJournal);\nconst saveJournalSaga = createRequestSaga(types.SAVE_JOURNAL_START, api.saveJournal);\nconst updateJournalSaga = createRequestSaga(types.UPDATE_JOURNAL_START, api.updateJournal); //------------분개상세------------------\n\nconst searchJournalDetailSaga = createRequestSaga(types.SELECT_JOURNAL_DETAIL_START, api.searchJournalDetail);\nconst saveJournalDetailSaga = createRequestSaga(types.SAVE_JOURNAL_DETAIL_START, api.saveJournalDetail);\nconst hrAddSlip = createRequestSaga(types.ADD_SALARY_SLIP_REQUEST, api.hrAddSlip); //------------전표승인------------------\n\nconst amSlipRequest = createRequestSaga(types.SEARCH_AM_SLIP_REQUEST, api.amSlipRequest);\nconst amJournalRequest = createRequestSaga(types.SEARCH_AM_JOURNAL_REQUEST, api.amJournalRequest);\n\nfunction* updateSlip(action) {\n  try {\n    yield accountApi.put(\"/account/approveSlip\", {\n      approvalData: action.params.approvalData\n    });\n    const {\n      data\n    } = yield accountApi.get(\"/account/findRangedSlipList\", {\n      params: {\n        startDate: action.params.startDate,\n        endDate: action.params.endDate,\n        slipStatus: action.params.slipStatus\n      }\n    });\n    yield put({\n      type: types.SEARCH_AM_SLIP_SUCCESS,\n      data\n    });\n  } catch (error) {\n    yield put({\n      type: types.UPDATE_AM_SLIP_FAILURE,\n      error\n    });\n  }\n}\n\nconst getJournalNo = createRequestSaga(types.SET_JOURNAL_NO_REQUEST, api.getJournalNo);\nconst selectGeneralAccountLedgerSaga = createRequestSaga(types.SELECT_GENERAL_ACCOUNT_LEDGER_START, api.selectGeneralAccountLedger);\nconst searchJournalDoubleSaga = createRequestSaga(types.SEARCH_JOURNAL_DOUBLE_REQUEST, api.searchJournalDouble); //고정자산리스트 조회 수정 삭제 박민호====================================\n\nconst selectNonCurrentSaga = createRequestSaga(types.SEARCH_NON_CURRENT_REQUEST, api.selectNonCurrent);\nconst saveNonCurrentSaga = createRequestSaga(types.SAVE_NON_CURRENT_START, api.saveNonCurrent);\nconst deleteNonCurrentSaga = createRequestSaga(types.DELETE_NON_CURRENT_START, api.deleteNonCurrent); //====================고정자산리스트 조회 수정 삭제 박민호====================================\n\nexport default function* AccountSaga() {\n  // <===============  2020-09-10 일반전표 시작 조편백  ================\n  yield takeEvery(types.SELECT_SLIP_START, selectSlipSaga); //전표조회\n\n  yield takeEvery(types.DELETE_SLIP_START, deleteSlipSaga); //전표삭제\n\n  yield takeEvery(types.UPDATE_SLIP_START, updateSlipSaga); //전표 업데이트\n\n  yield takeEvery(types.SELECT_JOURNAL_START, searchJournalSaga); //분개조회\n\n  yield takeEvery(types.DELETE_JOURNAL_START, deleteJournalSaga); //분개삭제\n\n  yield takeEvery(types.SAVE_JOURNAL_START, saveJournalSaga); //분개저장 insert\n\n  yield takeEvery(types.UPDATE_JOURNAL_START, updateJournalSaga); //분개저장 update\n\n  yield takeEvery(types.SELECT_JOURNAL_DETAIL_START, searchJournalDetailSaga); //분개상세 조회\n\n  yield takeEvery(types.SAVE_JOURNAL_DETAIL_START, saveJournalDetailSaga); //분개상세저장\n\n  yield takeLatest(types.ADD_SALARY_SLIP_REQUEST, hrAddSlip); // <===============  2020-09-10 일반전표 끝 조편백  ================\n  // <===============  전표승인  ================\n\n  yield takeLatest(types.SEARCH_AM_SLIP_REQUEST, amSlipRequest);\n  yield takeLatest(types.SEARCH_AM_JOURNAL_REQUEST, amJournalRequest);\n  yield takeLatest(types.UPDATE_AM_SLIP_REQUEST, updateSlip);\n  yield takeEvery(types.SET_JOURNAL_NO_REQUEST, getJournalNo); // //*********** 2020-08-28 정대현 추가 **********\n\n  yield takeEvery(types.SELECT_GENERAL_ACCOUNT_LEDGER_START, selectGeneralAccountLedgerSaga); //************************* 2020-12-04 분개장 시작 *************************\n\n  yield takeEvery(types.SEARCH_JOURNAL_DOUBLE_REQUEST, searchJournalDoubleSaga); //************************* 2020-12-04 분개장 종료 *************************\n  //고장자산 수정 삭제 조회 등록 박미노==========================================\n\n  yield takeEvery(types.SEARCH_NON_CURRENT_REQUEST, selectNonCurrentSaga);\n  yield takeEvery(types.SAVE_NON_CURRENT_START, saveNonCurrentSaga);\n  yield takeEvery(types.DELETE_NON_CURRENT_START, deleteNonCurrentSaga);\n} //********************************** 2021-02-24 이은기 **********************************","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/saga/AccountSaga.js"],"names":["takeEvery","put","takeLatest","delay","fork","accountApi","types","createRequestSaga","api","selectSlipSaga","SELECT_SLIP_START","selectSlip","deleteSlipSaga","DELETE_SLIP_START","deleteSlip","updateSlipSaga","UPDATE_SLIP_START","updateSlip","searchJournalSaga","SELECT_JOURNAL_START","searchJournal","deleteJournalSaga","DELETE_JOURNAL_START","deleteJournal","saveJournalSaga","SAVE_JOURNAL_START","saveJournal","updateJournalSaga","UPDATE_JOURNAL_START","updateJournal","searchJournalDetailSaga","SELECT_JOURNAL_DETAIL_START","searchJournalDetail","saveJournalDetailSaga","SAVE_JOURNAL_DETAIL_START","saveJournalDetail","hrAddSlip","ADD_SALARY_SLIP_REQUEST","amSlipRequest","SEARCH_AM_SLIP_REQUEST","amJournalRequest","SEARCH_AM_JOURNAL_REQUEST","action","approvalData","params","data","get","startDate","endDate","slipStatus","type","SEARCH_AM_SLIP_SUCCESS","error","UPDATE_AM_SLIP_FAILURE","getJournalNo","SET_JOURNAL_NO_REQUEST","selectGeneralAccountLedgerSaga","SELECT_GENERAL_ACCOUNT_LEDGER_START","selectGeneralAccountLedger","searchJournalDoubleSaga","SEARCH_JOURNAL_DOUBLE_REQUEST","searchJournalDouble","selectNonCurrentSaga","SEARCH_NON_CURRENT_REQUEST","selectNonCurrent","saveNonCurrentSaga","SAVE_NON_CURRENT_START","saveNonCurrent","deleteNonCurrentSaga","DELETE_NON_CURRENT_START","deleteNonCurrent","AccountSaga","UPDATE_AM_SLIP_REQUEST"],"mappings":"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","sourcesContent":["import { takeEvery, put, takeLatest, delay, fork } from \"redux-saga/effects\";\nimport accountApi from \"api/accountApi\";\nimport * as types from \"../reducer/AccountReducer\";\nimport createRequestSaga from \"util/createRequestSaga\";\nimport * as api from '../api';\n\n//------------일반전표------------------\n//------------전표------------------\nconst selectSlipSaga = createRequestSaga(types.SELECT_SLIP_START, api.selectSlip);\n\nconst deleteSlipSaga = createRequestSaga(types.DELETE_SLIP_START, api.deleteSlip);\n  \nconst updateSlipSaga = createRequestSaga(types.UPDATE_SLIP_START, api.updateSlip);\n\n//------------분개------------------\nconst searchJournalSaga = createRequestSaga(types.SELECT_JOURNAL_START, api.searchJournal);\n  \nconst deleteJournalSaga = createRequestSaga(types.DELETE_JOURNAL_START, api.deleteJournal);\n\nconst saveJournalSaga = createRequestSaga(types.SAVE_JOURNAL_START, api.saveJournal);\n\nconst updateJournalSaga = createRequestSaga(types.UPDATE_JOURNAL_START, api.updateJournal);\n  \n//------------분개상세------------------\nconst searchJournalDetailSaga = createRequestSaga(types.SELECT_JOURNAL_DETAIL_START, api.searchJournalDetail);\n\nconst saveJournalDetailSaga = createRequestSaga(types.SAVE_JOURNAL_DETAIL_START, api.saveJournalDetail);\n\nconst hrAddSlip = createRequestSaga(types.ADD_SALARY_SLIP_REQUEST, api.hrAddSlip);\n\n\n//------------전표승인------------------\nconst amSlipRequest = createRequestSaga(types.SEARCH_AM_SLIP_REQUEST, api.amSlipRequest);\n  \nconst amJournalRequest = createRequestSaga(types.SEARCH_AM_JOURNAL_REQUEST, api.amJournalRequest);\n  \n  function* updateSlip(action) {\n    try {\n      yield accountApi.put(\"/account/approveSlip\", {\n        approvalData: action.params.approvalData,\n      });\n      const { data } = yield accountApi.get(\"/account/findRangedSlipList\", {\n        params: {\n          startDate: action.params.startDate,\n          endDate: action.params.endDate,\n          slipStatus: action.params.slipStatus,\n        },\n      });\n      yield put({ type: types.SEARCH_AM_SLIP_SUCCESS, data });\n    } catch (error) {\n      yield put({ type: types.UPDATE_AM_SLIP_FAILURE, error });\n    }\n  }\n\nconst getJournalNo = createRequestSaga(types.SET_JOURNAL_NO_REQUEST, api.getJournalNo);\n\nconst selectGeneralAccountLedgerSaga = createRequestSaga(types.SELECT_GENERAL_ACCOUNT_LEDGER_START, api.selectGeneralAccountLedger);\n\nconst searchJournalDoubleSaga = createRequestSaga(types.SEARCH_JOURNAL_DOUBLE_REQUEST, api.searchJournalDouble);\n\n\n//고정자산리스트 조회 수정 삭제 박민호====================================\nconst selectNonCurrentSaga = createRequestSaga(types.SEARCH_NON_CURRENT_REQUEST, api.selectNonCurrent);\n\nconst saveNonCurrentSaga = createRequestSaga(types.SAVE_NON_CURRENT_START, api.saveNonCurrent);\n\nconst deleteNonCurrentSaga = createRequestSaga(types.DELETE_NON_CURRENT_START, api.deleteNonCurrent);\n//====================고정자산리스트 조회 수정 삭제 박민호====================================\n\n\n\nexport default function* AccountSaga() {\n    // <===============  2020-09-10 일반전표 시작 조편백  ================\n    yield takeEvery(types.SELECT_SLIP_START, selectSlipSaga); //전표조회\n    yield takeEvery(types.DELETE_SLIP_START, deleteSlipSaga); //전표삭제\n    yield takeEvery(types.UPDATE_SLIP_START, updateSlipSaga); //전표 업데이트\n    yield takeEvery(types.SELECT_JOURNAL_START, searchJournalSaga); //분개조회\n    yield takeEvery(types.DELETE_JOURNAL_START, deleteJournalSaga); //분개삭제\n    yield takeEvery(types.SAVE_JOURNAL_START, saveJournalSaga); //분개저장 insert\n    yield takeEvery(types.UPDATE_JOURNAL_START, updateJournalSaga); //분개저장 update\n    yield takeEvery(types.SELECT_JOURNAL_DETAIL_START, searchJournalDetailSaga); //분개상세 조회\n    yield takeEvery(types.SAVE_JOURNAL_DETAIL_START, saveJournalDetailSaga); //분개상세저장\n    yield takeLatest(types.ADD_SALARY_SLIP_REQUEST, hrAddSlip);\n    // <===============  2020-09-10 일반전표 끝 조편백  ================\n\n    // <===============  전표승인  ================\n    yield takeLatest(types.SEARCH_AM_SLIP_REQUEST, amSlipRequest);\n    yield takeLatest(types.SEARCH_AM_JOURNAL_REQUEST, amJournalRequest);\n    yield takeLatest(types.UPDATE_AM_SLIP_REQUEST, updateSlip);\n    \n    yield takeEvery(types.SET_JOURNAL_NO_REQUEST, getJournalNo); // //*********** 2020-08-28 정대현 추가 **********\n    yield takeEvery(types.SELECT_GENERAL_ACCOUNT_LEDGER_START,selectGeneralAccountLedgerSaga,);\n     //************************* 2020-12-04 분개장 시작 *************************\n    yield takeEvery(types.SEARCH_JOURNAL_DOUBLE_REQUEST, searchJournalDoubleSaga);\n    //************************* 2020-12-04 분개장 종료 *************************\n\n    //고장자산 수정 삭제 조회 등록 박미노==========================================\n    yield takeEvery(types.SEARCH_NON_CURRENT_REQUEST, selectNonCurrentSaga);\n    yield takeEvery(types.SAVE_NON_CURRENT_START, saveNonCurrentSaga);\n    yield takeEvery(types.DELETE_NON_CURRENT_START, deleteNonCurrentSaga);\n}\n\n//********************************** 2021-02-24 이은기 **********************************"]},"metadata":{},"sourceType":"module"}