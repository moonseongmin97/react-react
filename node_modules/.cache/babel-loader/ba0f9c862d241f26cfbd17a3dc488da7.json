{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68react\\\\src\\\\common\\\\page\\\\dashboard\\\\components\\\\Plane.js\";\nimport React, { forwardRef, useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport lerp from \"lerp\";\nimport \"./CustomMaterial\";\nimport { useBlock } from \"../blocks\";\nimport state from \"../store\";\nconst Plane = forwardRef(({\n  color = \"white\",\n  shift = 1,\n  opacity = 1,\n  args,\n  map,\n  ...props\n}, ref) => {\n  const {\n    viewportHeight,\n    offsetFactor\n  } = useBlock();\n  const material = useRef();\n  let last = state.top.current;\n  useFrame(() => {\n    const {\n      pages,\n      top\n    } = state;\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1);\n    material.current.shift = lerp(material.current.shift, (top.current - last) / shift, 0.1);\n    last = top.current;\n  });\n  return React.createElement(\"mesh\", Object.assign({\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: args,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), React.createElement(\"customMaterial\", {\n    ref: material,\n    attach: \"material\",\n    color: color,\n    map: map,\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }));\n});\nexport default Plane;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68react/src/common/page/dashboard/components/Plane.js"],"names":["React","forwardRef","useRef","useFrame","lerp","useBlock","state","Plane","color","shift","opacity","args","map","props","ref","viewportHeight","offsetFactor","material","last","top","current","pages","scale"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,MAA5B,QAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,kBAAP;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,MAAMC,KAAK,GAAGN,UAAU,CAAC,CAAC;AAAEO,EAAAA,KAAK,GAAG,OAAV;AAAmBC,EAAAA,KAAK,GAAG,CAA3B;AAA8BC,EAAAA,OAAO,GAAG,CAAxC;AAA2CC,EAAAA,IAA3C;AAAiDC,EAAAA,GAAjD;AAAsD,KAAGC;AAAzD,CAAD,EAAmEC,GAAnE,KAA2E;AAClG,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAmCX,QAAQ,EAAjD;AACA,QAAMY,QAAQ,GAAGf,MAAM,EAAvB;AACA,MAAIgB,IAAI,GAAGZ,KAAK,CAACa,GAAN,CAAUC,OAArB;AACAjB,EAAAA,QAAQ,CAAC,MAAM;AACb,UAAM;AAAEkB,MAAAA,KAAF;AAASF,MAAAA;AAAT,QAAiBb,KAAvB;AACAW,IAAAA,QAAQ,CAACG,OAAT,CAAiBE,KAAjB,GAAyBlB,IAAI,CAACa,QAAQ,CAACG,OAAT,CAAiBE,KAAlB,EAAyBN,YAAY,GAAGG,GAAG,CAACC,OAAJ,IAAe,CAACC,KAAK,GAAG,CAAT,IAAcN,cAA7B,CAAxC,EAAsF,GAAtF,CAA7B;AACAE,IAAAA,QAAQ,CAACG,OAAT,CAAiBX,KAAjB,GAAyBL,IAAI,CAACa,QAAQ,CAACG,OAAT,CAAiBX,KAAlB,EAAyB,CAACU,GAAG,CAACC,OAAJ,GAAcF,IAAf,IAAuBT,KAAhD,EAAuD,GAAvD,CAA7B;AACAS,IAAAA,IAAI,GAAGC,GAAG,CAACC,OAAX;AACD,GALO,CAAR;AAMA,SACE;AAAM,IAAA,GAAG,EAAEN;AAAX,KAAoBD,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAEF,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAgB,IAAA,GAAG,EAAEM,QAArB;AAA+B,IAAA,MAAM,EAAC,UAAtC;AAAiD,IAAA,KAAK,EAAET,KAAxD;AAA+D,IAAA,GAAG,EAAEI,GAApE;AAAyE,IAAA,WAAW,MAApF;AAAqF,IAAA,OAAO,EAAEF,OAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAhBuB,CAAxB;AAkBA,eAAeH,KAAf","sourcesContent":["import React, { forwardRef, useRef } from \"react\"\nimport { useFrame } from \"react-three-fiber\"\nimport lerp from \"lerp\"\nimport \"./CustomMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst Plane = forwardRef(({ color = \"white\", shift = 1, opacity = 1, args, map, ...props }, ref) => {\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, (top.current - last) / shift, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh ref={ref} {...props}>\n      <planeBufferGeometry attach=\"geometry\" args={args} />\n      <customMaterial ref={material} attach=\"material\" color={color} map={map} transparent opacity={opacity} />\n    </mesh>\n  )\n})\n\nexport default Plane\n"]},"metadata":{},"sourceType":"module"}