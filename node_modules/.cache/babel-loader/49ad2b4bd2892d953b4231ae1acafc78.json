{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n    this.resize();\n    const options = this.container.options;\n    const element = this.element;\n\n    if (element) {\n      if (options.backgroundMode.enable) {\n        this.originalStyle = Utils_1.Utils.deepExtend({}, element.style);\n        element.style.position = \"fixed\";\n        element.style.zIndex = options.backgroundMode.zIndex.toString(10);\n        element.style.top = \"0\";\n        element.style.left = \"0\";\n        element.style.width = \"100%\";\n        element.style.height = \"100%\";\n      } else {\n        element.style.position = (_b = (_a = this.originalStyle) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : \"\";\n        element.style.zIndex = (_d = (_c = this.originalStyle) === null || _c === void 0 ? void 0 : _c.zIndex) !== null && _d !== void 0 ? _d : \"\";\n        element.style.top = (_f = (_e = this.originalStyle) === null || _e === void 0 ? void 0 : _e.top) !== null && _f !== void 0 ? _f : \"\";\n        element.style.left = (_h = (_g = this.originalStyle) === null || _g === void 0 ? void 0 : _g.left) !== null && _h !== void 0 ? _h : \"\";\n        element.style.width = (_k = (_j = this.originalStyle) === null || _j === void 0 ? void 0 : _j.width) !== null && _k !== void 0 ? _k : \"\";\n        element.style.height = (_m = (_l = this.originalStyle) === null || _l === void 0 ? void 0 : _l.height) !== null && _m !== void 0 ? _m : \"\";\n      }\n    }\n\n    const cover = options.backgroundMask.cover;\n    const color = cover.color;\n    const trail = options.particles.move.trail;\n    const coverRgb = Utils_1.ColorUtils.colorToRgb(color);\n    this.coverColor = coverRgb !== undefined ? {\n      r: coverRgb.r,\n      g: coverRgb.g,\n      b: coverRgb.b,\n      a: cover.opacity\n    } : undefined;\n    this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n    this.initBackground();\n    this.paint();\n  }\n\n  loadCanvas(canvas, generatedCanvas) {\n    var _a;\n\n    if (!canvas.className) {\n      canvas.className = Utils_1.Constants.canvasClass;\n    }\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : this.generatedCanvas;\n    this.element = canvas;\n    this.originalStyle = Utils_1.Utils.deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.element.width = this.size.width;\n    this.element.height = this.size.height;\n  }\n\n  paint() {\n    const options = this.container.options;\n\n    if (!this.context) {\n      return;\n    }\n\n    if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor, this.coverColor.a));\n    } else {\n      this.paintBase();\n    }\n  }\n\n  clear() {\n    const options = this.container.options;\n    const trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container;\n    container.canvas.initSize();\n    container.particles.setDensity();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.resize !== undefined) {\n        plugin.resize();\n      }\n    }\n  }\n\n  initSize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container;\n    const pxRatio = container.retina.pixelRatio;\n    container.canvas.size.width = this.element.offsetWidth * pxRatio;\n    container.canvas.size.height = this.element.offsetHeight * pxRatio;\n    this.element.width = container.canvas.size.width;\n    this.element.height = container.canvas.size.height;\n  }\n\n  drawConnectLine(p1, p2) {\n    var _a;\n\n    const lineStyle = this.lineStyle(p1, p2);\n\n    if (!lineStyle) {\n      return;\n    }\n\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    var _a;\n\n    const container = this.container;\n    const ctx = container.canvas.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const beginPos = particle.getPosition();\n    Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n  }\n\n  drawParticleShadow(particle, mousePos) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawParticleShadow(this.container, this.context, particle, mousePos);\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link1.destination;\n    const p3 = link2.destination;\n    const triangleOptions = p1.particlesOptions.links.triangles;\n    const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n    if (opacityTriangle <= 0) {\n      return;\n    }\n\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const pos3 = p3.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    if (Utils_1.NumberUtils.getDistance(pos1, pos2) > container.retina.linksDistance || Utils_1.NumberUtils.getDistance(pos3, pos2) > container.retina.linksDistance || Utils_1.NumberUtils.getDistance(pos3, pos1) > container.retina.linksDistance) {\n      return;\n    }\n\n    let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n    if (!colorTriangle) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n      colorTriangle = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);\n    }\n\n    if (!colorTriangle) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n  }\n\n  drawLinkLine(p1, link) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link.destination;\n    let opacity = link.opacity;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorLine;\n    const twinkle = p1.particlesOptions.twinkle.lines;\n\n    if (twinkle.enable) {\n      const twinkleFreq = twinkle.frequency;\n      const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      const twinkling = Math.random() < twinkleFreq;\n\n      if (twinkling && twinkleRgb !== undefined) {\n        colorLine = twinkleRgb;\n        opacity = twinkle.opacity;\n      }\n    }\n\n    if (!colorLine) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n      colorLine = Utils_1.ColorUtils.getLinkColor(p1, p2, linkColor);\n    }\n\n    if (!colorLine) {\n      return;\n    }\n\n    const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n    const maxDistance = (_b = p1.linksDistance) !== null && _b !== void 0 ? _b : container.retina.linksDistance;\n    Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.particlesOptions.links.shadow);\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b, _c, _d;\n\n    if (((_a = particle.image) === null || _a === void 0 ? void 0 : _a.loaded) === false || particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor();\n    const psColor = (_b = particle.getStrokeColor()) !== null && _b !== void 0 ? _b : pfColor;\n\n    if (!pfColor && !psColor) {\n      return;\n    }\n\n    const options = this.container.options;\n    const pOptions = particle.particlesOptions;\n    const twinkle = pOptions.twinkle.particles;\n    const twinkleFreq = twinkle.frequency;\n    const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n    const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n    const radius = particle.getRadius();\n    const opacity = twinkling ? twinkle.opacity : (_c = particle.bubble.opacity) !== null && _c !== void 0 ? _c : particle.opacity.value;\n    const infectionStage = particle.infecter.infectionStage;\n    const infection = options.infection;\n    const infectionStages = infection.stages;\n    const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n    const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n    const fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : pfColor ? Utils_1.ColorUtils.hslToRgb(pfColor) : undefined;\n    const sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : psColor ? Utils_1.ColorUtils.hslToRgb(psColor) : undefined;\n    const fillColorValue = fColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(fColor, opacity) : undefined;\n\n    if (!this.context || !fillColorValue && !sColor) {\n      return;\n    }\n\n    const strokeColorValue = sColor !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(sColor, (_d = particle.stroke.opacity) !== null && _d !== void 0 ? _d : opacity) : fillColorValue;\n    this.drawParticleLinks(particle);\n\n    if (radius > 0) {\n      Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius, opacity, particle.particlesOptions.shadow);\n    }\n  }\n\n  drawParticleLinks(particle) {\n    if (!this.context) {\n      return;\n    }\n\n    const container = this.container;\n    const particles = container.particles;\n    const pOptions = particle.particlesOptions;\n\n    if (particle.links.length > 0) {\n      this.context.save();\n      const p1Links = particle.links.filter(l => {\n        const linkFreq = container.particles.getLinkFrequency(particle, l.destination);\n        return linkFreq <= pOptions.links.frequency;\n      });\n\n      for (const link of p1Links) {\n        const p2 = link.destination;\n\n        if (pOptions.links.triangles.enable) {\n          const links = p1Links.map(l => l.destination);\n          const vertices = p2.links.filter(t => {\n            const linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n            return linkFreq <= p2.particlesOptions.links.frequency && links.indexOf(t.destination) >= 0;\n          });\n\n          if (vertices.length) {\n            for (const vertex of vertices) {\n              const p3 = vertex.destination;\n              const triangleFreq = particles.getTriangleFrequency(particle, p2, p3);\n\n              if (triangleFreq > pOptions.links.triangles.frequency) {\n                continue;\n              }\n\n              this.drawLinkTriangle(particle, link, vertex);\n            }\n          }\n        }\n\n        if (link.opacity > 0 && container.retina.linksWidth > 0) {\n          this.drawLinkLine(particle, link);\n        }\n      }\n\n      this.context.restore();\n    }\n  }\n\n  drawPlugin(plugin, delta) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n  }\n\n  drawLight(mousePos) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawLight(this.container, this.context, mousePos);\n  }\n\n  paintBase(baseColor) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n  }\n\n  lineStyle(p1, p2) {\n    const options = this.container.options;\n    const connectOptions = options.interactivity.modes.connect;\n\n    if (this.context) {\n      return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n    }\n  }\n\n  initBackground() {\n    const options = this.container.options;\n    const background = options.background;\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const elementStyle = element.style;\n\n    if (background.color) {\n      const color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n      if (color) {\n        elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n      }\n    }\n\n    if (background.image) {\n      elementStyle.backgroundImage = background.image;\n    }\n\n    if (background.position) {\n      elementStyle.backgroundPosition = background.position;\n    }\n\n    if (background.repeat) {\n      elementStyle.backgroundRepeat = background.repeat;\n    }\n\n    if (background.size) {\n      elementStyle.backgroundSize = background.size;\n    }\n  }\n\n}\n\nexports.Canvas = Canvas;","map":null,"metadata":{},"sourceType":"script"}