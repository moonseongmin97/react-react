{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\production\\\\page\\\\MRP\\\\MrpRegister.js\";\nimport React, { useState, useCallback, memo, useEffect } from 'react';\nimport { Paper, TextField, Button, Grid, AppBar, InputLabel, Typography, Toolbar, MenuItem, Select, FormControl, OutlinedInput, NativeSelect } from '@material-ui/core';\nimport axios from 'axios';\nimport UseStyles from './UseStyles';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport useInput from 'util/useInput';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport mpsColumn from './MpsColumn';\nimport { today } from 'erp/hr/util/lib';\nimport { useThemeSwitcher } from 'mui-theme-switcher';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport MrpDialog from './MrpDialog';\nimport Swal from 'sweetalert2';\n\nconst MrpRegister = props => {\n  console.log(today);\n  const classes = UseStyles();\n  const fromDate = useInput(today);\n  const toDate = useInput(today);\n  const columnDefs = mpsColumn;\n  const [rowData, setRowData] = useState(null);\n  const [checkData, setCheckData] = useState(null);\n  const [mrpDialog, setMrpDialog] = useState(false);\n  const [gridApi, setGridApi] = useState(null);\n  const searchMps = useCallback(() => {\n    if (fromDate.value == '' || toDate.value == '') {\n      Swal.fire('알림', ' MRP 조회할 일정을 입력해주세요.', 'info');\n      return;\n    }\n\n    props.searchMpsList({\n      startDate: fromDate.value,\n      endDate: toDate.value\n    });\n  }, [fromDate.value, props, toDate.value]);\n  useEffect(() => {\n    setRowData(props.MrpList);\n  }, [props.MrpList]);\n  const mrpRegister = useCallback(() => {\n    console.log(checkData);\n\n    if (!checkData) {\n      Swal.fire('알림', '모의전개할 mps를 선택하십시오.', 'info');\n      return;\n    }\n\n    setMrpDialog(true);\n  }, [checkData]);\n\n  const mrpClose = () => {\n    setMrpDialog(false);\n  };\n\n  const onRowSelected = useCallback(e => {\n    setCheckData(e.api.getSelectedRows());\n    console.log(checkData);\n  }, [checkData]);\n  const {\n    dark\n  } = useThemeSwitcher();\n\n  const onGridSizeChanged = params => {\n    var gridWidth = document.getElementById('grid-wrapper').offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth(); // console.log('totalColsWidth',totalColsWidth)\n\n      if (column.colDef.hide === true) {\n        //if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.colId); //}\n      } else {\n        columnsToShow.push(column.colId);\n      }\n    }\n\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit(); // console.log('columnsToHide',columnsToHide)\n    //console.log('columnsToShow',columnsToShow)\n  };\n\n  const onGridReady = useCallback(event => {\n    console.log(\"onGridReady\");\n    setGridApi(event.api);\n    setRowData([]);\n    event.api.sizeColumnsToFit();\n  }, []);\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    position: \"relative\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"MRP\\uC8FC\\uC0DD\\uC0B0\\uACC4\\uD68D\"))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"grid-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.searchTextField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: 'fromDate',\n    label: '신청일자',\n    type: 'date',\n    defaultValue: fromDate.value,\n    onChange: fromDate.onChange,\n    className: classes.textField,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), \"~\", React.createElement(TextField, {\n    id: 'toDate',\n    label: '신청일자',\n    type: 'date',\n    defaultValue: toDate.value,\n    onChange: toDate.onChange,\n    className: classes.textField,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: 'contained',\n    color: 'primary',\n    className: dark ? classes.whiteButton : classes.searchButton,\n    onClick: searchMps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"MPS\\uC870\\uD68C\"), React.createElement(Button, {\n    variant: 'contained',\n    color: 'primary',\n    name: 'confirm',\n    onClick: mrpRegister,\n    className: dark ? classes.whiteButton : classes.searchButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"MRP\\uBAA8\\uC758\\uC804\\uAC1C\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: dark ? 'ag-theme-alpine-dark' : 'ag-theme-material',\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: columnDefs,\n    rowData: rowData,\n    onRowSelected: onRowSelected,\n    onGridSizeChanged: onGridSizeChanged //suppressRowClickSelection={'true'}\n    ,\n    onGridReady: onGridReady,\n    rowSelection: \"single\" //여러개선택가능\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), React.createElement(MyDialog, {\n    open: mrpDialog,\n    close: mrpClose,\n    maxWidth: '90%',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(MrpDialog, {\n    searchMrpList: props.searchMrpList,\n    checkData: checkData,\n    setCheckData: setCheckData,\n    MrpSimulatorList: props.MrpSimulatorList,\n    MrpRegisterList: props.MrpRegisterList,\n    mrpRegisterGridApi: gridApi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  })))));\n};\n\nexport default MrpRegister;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/production/page/MRP/MrpRegister.js"],"names":["React","useState","useCallback","memo","useEffect","Paper","TextField","Button","Grid","AppBar","InputLabel","Typography","Toolbar","MenuItem","Select","FormControl","OutlinedInput","NativeSelect","axios","UseStyles","AgGridReact","useInput","RadioGroup","FormControlLabel","Radio","mpsColumn","today","useThemeSwitcher","MyDialog","MrpDialog","Swal","MrpRegister","props","console","log","classes","fromDate","toDate","columnDefs","rowData","setRowData","checkData","setCheckData","mrpDialog","setMrpDialog","gridApi","setGridApi","searchMps","value","fire","searchMpsList","startDate","endDate","MrpList","mrpRegister","mrpClose","onRowSelected","e","api","getSelectedRows","dark","onGridSizeChanged","params","gridWidth","document","getElementById","offsetWidth","columnsToShow","columnsToHide","totalColsWidth","allColumns","columnApi","getAllColumns","i","length","column","getMinWidth","colDef","hide","push","colId","setColumnsVisible","sizeColumnsToFit","onGridReady","event","searchTextField","onChange","textField","whiteButton","searchButton","height","width","searchMrpList","MrpSimulatorList","MrpRegisterList"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, memo, useEffect } from 'react';\nimport {\n    Paper,\n    TextField,\n    Button,\n    Grid,\n    AppBar,\n    InputLabel,\n    Typography,\n    Toolbar,\n    MenuItem,\n    Select,\n    FormControl,\n    OutlinedInput,\n    NativeSelect\n} from '@material-ui/core';\nimport axios from 'axios';\nimport UseStyles from './UseStyles';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport useInput from 'util/useInput';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport mpsColumn from './MpsColumn';\nimport { today } from 'erp/hr/util/lib';\nimport { useThemeSwitcher } from 'mui-theme-switcher';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport MrpDialog from './MrpDialog';\nimport Swal from 'sweetalert2';\n\nconst MrpRegister = props => {\n    console.log(today);\n    const classes = UseStyles();\n    const fromDate = useInput(today);\n    const toDate = useInput(today);\n    const columnDefs = mpsColumn;\n    const [rowData, setRowData] = useState(null);\n    const [checkData, setCheckData] = useState(null);\n    const [mrpDialog, setMrpDialog] = useState(false);\n    const [gridApi, setGridApi] = useState(null);\n\n    const searchMps = useCallback(() => {\n        if (fromDate.value == '' || toDate.value == '') {\n            Swal.fire('알림', ' MRP 조회할 일정을 입력해주세요.', 'info');\n            return;\n        }\n\n        props.searchMpsList({ startDate: fromDate.value, endDate: toDate.value });\n\n    },[fromDate.value, props, toDate.value]);\n\n    useEffect(()=>{\n        setRowData(props.MrpList);\n    },[props.MrpList])\n\n    const mrpRegister = useCallback(() => {\n        console.log(checkData);\n\n        if (!checkData) {\n            Swal.fire('알림', '모의전개할 mps를 선택하십시오.', 'info');\n            return;\n        }\n\n        setMrpDialog(true);\n    },[checkData]);\n\n    const mrpClose = () => {\n        setMrpDialog(false);\n    };\n\n    const onRowSelected = useCallback(e => {\n        setCheckData(e.api.getSelectedRows());\n        console.log(checkData);\n    }, [checkData]);\n\n    const { dark } = useThemeSwitcher();\n    const onGridSizeChanged = params => {\n        var gridWidth = document.getElementById('grid-wrapper').offsetWidth;\n        var columnsToShow = [];\n        var columnsToHide = [];\n        var totalColsWidth = 0;\n        var allColumns = params.columnApi.getAllColumns();\n        for (var i = 0; i < allColumns.length; i++) {\n            var column = allColumns[i];\n            totalColsWidth += column.getMinWidth();\n            // console.log('totalColsWidth',totalColsWidth)\n            if (column.colDef.hide === true) {\n                //if (totalColsWidth > gridWidth) {\n                columnsToHide.push(column.colId);\n                //}\n            } else {\n                columnsToShow.push(column.colId);\n            }\n        }\n        params.columnApi.setColumnsVisible(columnsToShow, true);\n        params.columnApi.setColumnsVisible(columnsToHide, false);\n        params.api.sizeColumnsToFit();\n        // console.log('columnsToHide',columnsToHide)\n        //console.log('columnsToShow',columnsToShow)\n    };\n\n    const onGridReady = useCallback(event => {\n        console.log(\"onGridReady\");\n        setGridApi(event.api);\n        setRowData([]);\n        event.api.sizeColumnsToFit();\n\n    },[]);\n\n\n    return (\n        <Grid item xs={12}>\n            <AppBar position=\"relative\">\n                <Toolbar>\n                    <Typography variant=\"h5\">MRP주생산계획</Typography>\n                </Toolbar>\n            </AppBar>\n            <br />\n            <div id=\"grid-wrapper\">\n                <FormControl variant=\"outlined\" className={classes.searchTextField}></FormControl>\n                <TextField\n                    id={'fromDate'}\n                    label={'신청일자'}\n                    type={'date'}\n                    defaultValue={fromDate.value}\n                    onChange={fromDate.onChange}\n                    className={classes.textField}\n                    variant=\"outlined\"\n                />\n                ~\n                <TextField\n                    id={'toDate'}\n                    label={'신청일자'}\n                    type={'date'}\n                    defaultValue={toDate.value}\n                    onChange={toDate.onChange}\n                    className={classes.textField}\n                    variant=\"outlined\"\n                />\n                <Button\n                    variant={'contained'}\n                    color={'primary'}\n                    className={dark ? classes.whiteButton : classes.searchButton}\n                    onClick={searchMps}\n                >\n                    MPS조회\n                </Button>\n                <Button\n                    variant={'contained'}\n                    color={'primary'}\n                    name={'confirm'}\n                    onClick={mrpRegister}\n                    className={dark ? classes.whiteButton : classes.searchButton}\n                >\n                    MRP모의전개\n                </Button>\n            </div>\n\n            <br />\n            <div\n                className={dark ? 'ag-theme-alpine-dark' : 'ag-theme-material'}\n                style={{\n                    height: '400px',\n                    width: '100%'\n                }}\n            >\n                <AgGridReact\n                    columnDefs={columnDefs}\n                    rowData={rowData}\n                    onRowSelected={onRowSelected}\n                    onGridSizeChanged={onGridSizeChanged}\n                    //suppressRowClickSelection={'true'}\n                    onGridReady={onGridReady}\n                    rowSelection=\"single\" //여러개선택가능\n                />\n\n                <MyDialog open={mrpDialog} close={mrpClose} maxWidth={'90%'}>\n                    <div>\n                        <MrpDialog\n                            searchMrpList={props.searchMrpList}\n                            checkData={checkData}\n                            setCheckData={setCheckData}\n                            MrpSimulatorList={props.MrpSimulatorList}\n                            MrpRegisterList={props.MrpRegisterList}\n                            mrpRegisterGridApi={gridApi}\n                        />\n                    </div>\n                </MyDialog>\n            </div>\n        </Grid>\n    );\n};\nexport default MrpRegister;\n"]},"metadata":{},"sourceType":"module"}