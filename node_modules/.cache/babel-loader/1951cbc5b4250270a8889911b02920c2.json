{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\util\\\\LogiUtil\\\\MyGrid.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nfunction MyGrid(props) {\n  const list = props.list;\n  var size = \"calc(100vh - 220px)\";\n  var align = 'right';\n\n  if (props.align !== undefined) {\n    align = props.align;\n  }\n\n  var marginTop = \"\";\n\n  if (props.children !== undefined) {\n    size = \"calc(100vh - 260px)\";\n  }\n\n  if (props.size !== undefined) {\n    size = props.size;\n  }\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1\n    },\n    title: {\n      flexGrow: 1,\n      marginLeft: \"5vw\",\n      marginTop: \"calc(6vh - 4vh)\",\n      height: \"8vh\",\n      fontSize: \"5vh\"\n    },\n    btn: {\n      flexGrow: 1,\n      marginBottom: \"1vh\",\n      marginTop: \"1vh\"\n    },\n    appBar: {\n      flexGrow: 1,\n      width: \"100%\",\n      height: \"10vh\"\n    }\n  }));\n  const column = props.column;\n\n  const onCellClicked = id => {\n    if (props.onCellClicked !== undefined) props.onCellClicked(id);\n  };\n\n  const onRowClicked = id => {\n    if (props.onRowClicked !== undefined) props.onRowClicked(id);\n  };\n\n  const onRowSelected = id => {\n    if (props.onRowSelected !== undefined) props.onRowSelected(id);\n  };\n\n  const onGridReady = params => {\n    params.api.sizeColumnsToFit();\n    if (props.api !== undefined) props.api(params);\n  };\n\n  const onCellValueChanged = params => {\n    if (props.onCellValueChanged !== undefined) props.onCellValueChanged(params);\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n\n  const onGridSizeChanged = params => {\n    var gridWidth = document.getElementById(\"grid-wrapper\").offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth(); // console.log('totalColsWidth',totalColsWidth)\n\n      if (column.colDef.hide === true) {\n        //if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.colId); //} \n      } else {\n        columnsToShow.push(column.colId);\n      }\n    }\n\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit(); // console.log('columnsToHide',columnsToHide)\n    //console.log('columnsToShow',columnsToShow)\n  };\n\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    id: \"grid-wrapper\",\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    position: \"static\",\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, props.title)), React.createElement(\"div\", {\n    align: align,\n    className: classes.btn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, props.children), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    enableColResize: \"true\" //칼럼 리사이즈 허용 여부\n    ,\n    enableSorting: \"true\" //렬 옵션 허용 여부\n    ,\n    enableFilter: \"true\" //필터 옵션 허용 여부\n    ,\n    style: {\n      height: size,\n      width: \"100%\",\n      paddingTop: \"25px\",\n      float: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: column.columnDefs //정의된 컬럼\n    ,\n    rowData: list //Reduce에서 받아온 데이터\n    ,\n    rowSelection: props.rowSelection //하나만 선택하거나 복수개를 선택할 수 있음\n    ,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onCellClicked: onCellClicked //셀 한번클릭\n    ,\n    onGridReady: onGridReady //onload 이벤트와 유사한 것\n    ,\n    paginationAutoPageSize: true,\n    pagination: true,\n    onRowClicked: onRowClicked,\n    onRowSelected: onRowSelected,\n    components: props.components //특정 컬럼에 컴포넌트 넣기 가능\n    ,\n    onGridSizeChanged: onGridSizeChanged,\n    onCellValueChanged: onCellValueChanged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })));\n}\n\nexport default MyGrid;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/util/LogiUtil/MyGrid.js"],"names":["React","useEffect","useState","AgGridReact","AppBar","Typography","makeStyles","useThemeSwitcher","MyGrid","props","list","size","align","undefined","marginTop","children","useStyles","theme","root","flexGrow","title","marginLeft","height","fontSize","btn","marginBottom","appBar","width","column","onCellClicked","id","onRowClicked","onRowSelected","onGridReady","params","api","sizeColumnsToFit","onCellValueChanged","dark","onGridSizeChanged","gridWidth","document","getElementById","offsetWidth","columnsToShow","columnsToHide","totalColsWidth","allColumns","columnApi","getAllColumns","i","length","getMinWidth","colDef","hide","push","colId","setColumnsVisible","classes","paddingTop","float","columnDefs","rowSelection","param","components"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\nfunction MyGrid(props) {\n  const list = props.list;\n  var size = \"calc(100vh - 220px)\";\n  var align = 'right'\n  if(props.align!==undefined){\n    align = props.align\n  }\n  var marginTop = \"\";\n  if (props.children !== undefined) {\n    size = \"calc(100vh - 260px)\";\n  }\n  if (props.size !== undefined) {\n    size = props.size;\n  }\n  const useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      marginLeft: \"5vw\",\n      marginTop: \"calc(6vh - 4vh)\",\n      height: \"8vh\",\n      fontSize: \"5vh\",\n    },\n    btn: {\n      flexGrow: 1,\n      marginBottom: \"1vh\",\n      marginTop: \"1vh\",\n    },\n    appBar: {\n      flexGrow: 1,\n      width: \"100%\",\n      height: \"10vh\",\n    },\n  }));\n\n  const column = props.column;\n\n  const onCellClicked = id => {\n    if (props.onCellClicked !== undefined) props.onCellClicked(id);\n  };\n  const onRowClicked = id => {\n    if (props.onRowClicked !== undefined) props.onRowClicked(id);\n  };\n  const onRowSelected = id => {\n    if (props.onRowSelected !== undefined) props.onRowSelected(id);\n  };\n  const onGridReady = params => {\n    params.api.sizeColumnsToFit();\n    if (props.api !== undefined) props.api(params);\n  };\n  const onCellValueChanged = params => {\n    if (props.onCellValueChanged !== undefined) \n      props.onCellValueChanged(params);\n  };\n\n  const { dark } = useThemeSwitcher();\n\n  const onGridSizeChanged = params => {\n    var gridWidth = document.getElementById(\"grid-wrapper\").offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth();\n     // console.log('totalColsWidth',totalColsWidth)\n      if(column.colDef.hide===true){\n        //if (totalColsWidth > gridWidth) {\n          columnsToHide.push(column.colId);\n        //} \n      }\n      else {\n        columnsToShow.push(column.colId);\n      }\n    }\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit();\n   // console.log('columnsToHide',columnsToHide)\n    //console.log('columnsToShow',columnsToShow)\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div id=\"grid-wrapper\" className={classes.root}>\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Typography className={classes.title}>{props.title}</Typography>\n      </AppBar>\n      <div align={align} className={classes.btn}>\n        {props.children}\n      </div>\n      <div\n        className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n        enableColResize=\"true\" //칼럼 리사이즈 허용 여부\n        enableSorting=\"true\" //렬 옵션 허용 여부\n        enableFilter=\"true\" //필터 옵션 허용 여부\n        style={{\n          height: size,\n          width: \"100%\",\n          paddingTop: \"25px\",\n          float: \"center\",\n        }}\n      >\n        <AgGridReact\n          columnDefs={column.columnDefs} //정의된 컬럼\n          rowData={list} //Reduce에서 받아온 데이터\n          rowSelection={props.rowSelection} //하나만 선택하거나 복수개를 선택할 수 있음\n          getRowStyle={function(param) {\n            return { \"text-align\": \"center\" };\n          }} //body 가운데 정렬\n          onCellClicked={onCellClicked} //셀 한번클릭\n          onGridReady={onGridReady} //onload 이벤트와 유사한 것\n          paginationAutoPageSize={true}\n          pagination={true}\n          onRowClicked={onRowClicked}\n          onRowSelected={onRowSelected}\n          components={props.components} //특정 컬럼에 컴포넌트 넣기 가능\n          onGridSizeChanged={onGridSizeChanged}\n          onCellValueChanged={onCellValueChanged}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default MyGrid;\n"]},"metadata":{},"sourceType":"module"}