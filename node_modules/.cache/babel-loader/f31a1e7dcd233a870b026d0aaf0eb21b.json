{"ast":null,"code":"//**************************************** 2020.11-23 박민호 수정 시작 ****************************************\nimport { put, takeEvery, takeLatest, call, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport * as types from 'erp/logistic/sales/action/SalesActionType';\nimport deliverySuccess from '../reducer/SalesReducer';\n\nfunction* deliveryCompleteData(action) {\n  try {\n    console.log('action', action);\n    const {\n      data\n    } = yield axios.get('http://localhost:8282/logi/logistics/sales/searchDeliveryInfoList');\n    yield console.log('@@@@@납품데이터조회@@@');\n    yield console.log(data.gridRowJson); //yield put(deliverySuccess(data));\n\n    yield put({\n      type: types.DELIVERY_COMPLETE_SUCCESS,\n      payload: data.gridRowJson\n    });\n  } catch (e) {\n    console.log('@@@@@납품 에러발생 ㅠㅠㅠㅠ@@@@@');\n    console.log(e); // yield put(actions.deliveryCompleteFailure(e.message));\n  }\n}\n\nfunction* deliveryDivisionData(action) {\n  try {\n    yield axios.post('http://localhost:8282/logi/logistics/sales/deliverDivisionUpdate', {\n      deliverUpdate: action.payload.DeliveryInsert\n    });\n  } catch (e) {// yield put(actions.deliveryDivisionFailure(e.message));\n  }\n}\n\nfunction* orderCompleteData(action) {\n  try {\n    console.log('action', action);\n    const {\n      data\n    } = yield axios.get('http://localhost:8282/logi/purchase/getOrderDialog');\n    yield console.log('@@@@@ 발주데이터조회 @@@');\n    yield console.log(data.gridRowJson); //yield put(orderSuccess(data));\n\n    yield put({\n      type: types.ORDER_COMPLETE_SUCCESS,\n      payload: data.gridRowJson\n    });\n  } catch (e) {\n    console.log('@@@@@발주 에러발생 ㅠㅠㅠㅠ@@@@@');\n    console.log(e); // yield put(actions.orderCompleteFailure(e.message));\n  }\n}\n\nfunction* orderDivisionData(action) {\n  try {\n    yield axios.post('http://localhost:8282/logi/purchase/updateOrderInfo', {\n      orderUpdate: action.payload.OrderInsert\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  } catch (e) {// yield put(actions.deliveryDivisionFailure(e.message));\n  }\n}\n\nexport function* deliveryCompleteDataSaga() {\n  yield takeEvery(types.DELIVERY_COMPLETE_REQUEST, deliveryCompleteData);\n}\nexport function* deliveryDivisionDataSaga() {\n  yield takeLatest(types.DELIVERY_DIVISON_START, deliveryDivisionData);\n}\nexport function* orderCompleteDataSaga() {\n  yield takeEvery(types.ORDER_COMPLETE_REQUEST, orderCompleteData);\n}\nexport function* orderDivisionDataSaga() {\n  yield takeLatest(types.ORDER_DIVISON_START, orderDivisionData);\n} //**************************************** 2020.11.23 박민호 수정 종료 ****************************************\n\nexport default function* SalesSaga() {\n  yield all([call(deliveryCompleteDataSaga), call(deliveryDivisionDataSaga), call(orderCompleteDataSaga), call(orderDivisionDataSaga)]);\n}","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/sales/saga/SalesSaga.js"],"names":["put","takeEvery","takeLatest","call","all","axios","types","deliverySuccess","deliveryCompleteData","action","console","log","data","get","gridRowJson","type","DELIVERY_COMPLETE_SUCCESS","payload","e","deliveryDivisionData","post","deliverUpdate","DeliveryInsert","orderCompleteData","ORDER_COMPLETE_SUCCESS","orderDivisionData","orderUpdate","OrderInsert","headers","deliveryCompleteDataSaga","DELIVERY_COMPLETE_REQUEST","deliveryDivisionDataSaga","DELIVERY_DIVISON_START","orderCompleteDataSaga","ORDER_COMPLETE_REQUEST","orderDivisionDataSaga","ORDER_DIVISON_START","SalesSaga"],"mappings":"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","sourcesContent":["//**************************************** 2020.11-23 박민호 수정 시작 ****************************************\nimport { put, takeEvery, takeLatest, call, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport * as types from 'erp/logistic/sales/action/SalesActionType';\nimport deliverySuccess from '../reducer/SalesReducer';\n\n\n\nfunction* deliveryCompleteData(action) {\n    try {\n        console.log('action', action);\n        const { data } = yield axios.get(\n            'http://localhost:8282/logi/logistics/sales/searchDeliveryInfoList'\n        );\n        yield console.log('@@@@@납품데이터조회@@@');\n        yield console.log(data.gridRowJson);\n        //yield put(deliverySuccess(data));\n        yield put({ type: types.DELIVERY_COMPLETE_SUCCESS, payload: data.gridRowJson });\n\n    } catch (e) {\n        console.log('@@@@@납품 에러발생 ㅠㅠㅠㅠ@@@@@');\n        console.log(e);\n        // yield put(actions.deliveryCompleteFailure(e.message));\n    }\n}\n\nfunction* deliveryDivisionData(action) {\n    try {\n        yield axios.post(\n            'http://localhost:8282/logi/logistics/sales/deliverDivisionUpdate',\n\n            {\n                deliverUpdate: action.payload.DeliveryInsert\n            }\n        );\n    } catch (e) {\n        // yield put(actions.deliveryDivisionFailure(e.message));\n    }\n}\n\n\nfunction* orderCompleteData(action) {\n    try {\n        console.log('action', action);\n        const { data } = yield axios.get(\n            'http://localhost:8282/logi/purchase/getOrderDialog'\n        );\n        yield console.log('@@@@@ 발주데이터조회 @@@');\n        yield console.log(data.gridRowJson);\n        //yield put(orderSuccess(data));\n        yield put({ type: types.ORDER_COMPLETE_SUCCESS, payload: data.gridRowJson });\n\n    } catch (e) {\n        console.log('@@@@@발주 에러발생 ㅠㅠㅠㅠ@@@@@');\n        console.log(e);\n        // yield put(actions.orderCompleteFailure(e.message));\n    }\n}\n\n\nfunction* orderDivisionData(action) {\n    try {\n        yield axios.post(\n            'http://localhost:8282/logi/purchase/updateOrderInfo',\n            {orderUpdate: action.payload.OrderInsert},\n            { headers: { \"Content-Type\": \"application/json\" }}\n        \n        );\n    } catch (e) {\n        // yield put(actions.deliveryDivisionFailure(e.message));\n    }\n}\n\n\n\nexport function* deliveryCompleteDataSaga() {\n    yield takeEvery(types.DELIVERY_COMPLETE_REQUEST, deliveryCompleteData);\n}\n\nexport function* deliveryDivisionDataSaga() {\n    yield takeLatest(types.DELIVERY_DIVISON_START, deliveryDivisionData);\n}\n\n\nexport function* orderCompleteDataSaga() {\n    yield takeEvery(types.ORDER_COMPLETE_REQUEST, orderCompleteData);\n}\n\nexport function* orderDivisionDataSaga() {\n    yield takeLatest(types.ORDER_DIVISON_START, orderDivisionData);\n}\n\n//**************************************** 2020.11.23 박민호 수정 종료 ****************************************\nexport default function* SalesSaga() {\n    yield all([call(deliveryCompleteDataSaga),\n                call(deliveryDivisionDataSaga),\n                call(orderCompleteDataSaga), \n                call(orderDivisionDataSaga),\n            ]);\n}\n"]},"metadata":{},"sourceType":"module"}