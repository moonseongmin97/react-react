{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\production\\\\page\\\\MRP\\\\MrpGather.js\";\nimport React, { useState, useCallback, memo, useEffect } from 'react';\nimport { Paper, TextField, Button, Grid, AppBar, InputLabel, Typography, Toolbar, MenuItem, Select, FormControl, OutlinedInput, NativeSelect } from '@material-ui/core';\nimport axios from 'axios';\nimport UseStyles from './UseStyles';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport useInput from 'util/useInput';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport GatherColumn from './GatherColumn';\nimport { today } from 'erp/hr/util/lib';\nimport { useThemeSwitcher } from 'mui-theme-switcher';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport GatherDialog from './GatherDialog';\n\nconst MrpGather = props => {\n  const columnDefs = GatherColumn;\n  const [gatherDialog, setGatherDialog] = useState(false);\n  const [mrpNoList, setMrpNoList] = useState([]);\n  const [mrpNoAndItemCodelist, setmrpNoAndItemCodeList] = useState([]);\n  const [gridApi, setGridApi] = useState(null);\n  const classes = UseStyles();\n  useEffect(() => {\n    const mrpGatheringStatusCondition = '';\n    props.searchGetMrpList({\n      mrpGatheringStatusCondition: mrpGatheringStatusCondition\n    });\n  }, []);\n\n  const MrpGatherRegister = () => {\n    const mrpNoData = [];\n    const mrpNoAndItemCode = {};\n    const size = props.MrpGetList.length;\n\n    for (let mrpNumber = 0; mrpNumber < size; mrpNumber++) {\n      console.log(props.MrpGetList[mrpNumber]);\n      mrpNoData.push(props.MrpGetList[mrpNumber].mrpNo);\n      console.log(props.MrpGetList[mrpNumber].mrpNo + '' + props.MrpGetList[mrpNumber].itemCode);\n      mrpNoAndItemCode[props.MrpGetList[mrpNumber].mrpNo] = props.MrpGetList[mrpNumber].itemCode;\n    }\n\n    setMrpNoList(mrpNoData);\n    setmrpNoAndItemCodeList(mrpNoAndItemCode);\n    setGatherDialog(true);\n  };\n\n  const mrpClose = () => {\n    setGatherDialog(false);\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n\n  const onGridSizeChanged = params => {\n    //var gridWidth = document.getElementById('grid-wrapper').offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth(); // console.log('totalColsWidth',totalColsWidth)\n\n      if (column.colDef.hide === true) {\n        //if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.colId); //}\n      } else {\n        columnsToShow.push(column.colId);\n      }\n    }\n\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit(); // console.log('columnsToHide',columnsToHide)\n    //console.log('columnsToShow',columnsToShow)\n  };\n\n  return React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    position: \"relative\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"\\uC18C\\uC694\\uB7C9\\uCDE8\\uD569\"))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"grid-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.searchTextField,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: 'contained',\n    color: 'primary',\n    name: 'confirm',\n    onClick: MrpGatherRegister,\n    className: dark ? classes.whiteButton : classes.searchButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"\\uC18C\\uC694\\uB7C9 \\uCDE8\\uD569 \\uACB0\\uACFC \\uC870\\uD68C\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: dark ? 'ag-theme-alpine-dark' : 'ag-theme-material',\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: columnDefs,\n    rowData: props.MrpGetList,\n    onGridSizeChanged: onGridSizeChanged,\n    suppressRowClickSelection: 'true',\n    onGridReady: event => {\n      setGridApi(event.api);\n      event.api.sizeColumnsToFit();\n    },\n    rowSelection: \"multiple\" //여러개선택가능\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(MyDialog, {\n    open: gatherDialog,\n    close: mrpClose,\n    maxWidth: '90%',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(GatherDialog, {\n    mrpNoData: mrpNoList,\n    searchGatherList: props.searchGatherList,\n    GatherList: props.GatherList,\n    GatherInsert: props.GatherInsert,\n    mrpNoAndItemCodelist: mrpNoAndItemCodelist,\n    gridApi: gridApi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })))));\n};\n\nexport default MrpGather;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/production/page/MRP/MrpGather.js"],"names":["React","useState","useCallback","memo","useEffect","Paper","TextField","Button","Grid","AppBar","InputLabel","Typography","Toolbar","MenuItem","Select","FormControl","OutlinedInput","NativeSelect","axios","UseStyles","AgGridReact","useInput","RadioGroup","FormControlLabel","Radio","GatherColumn","today","useThemeSwitcher","MyDialog","GatherDialog","MrpGather","props","columnDefs","gatherDialog","setGatherDialog","mrpNoList","setMrpNoList","mrpNoAndItemCodelist","setmrpNoAndItemCodeList","gridApi","setGridApi","classes","mrpGatheringStatusCondition","searchGetMrpList","MrpGatherRegister","mrpNoData","mrpNoAndItemCode","size","MrpGetList","length","mrpNumber","console","log","push","mrpNo","itemCode","mrpClose","dark","onGridSizeChanged","params","columnsToShow","columnsToHide","totalColsWidth","allColumns","columnApi","getAllColumns","i","column","getMinWidth","colDef","hide","colId","setColumnsVisible","api","sizeColumnsToFit","searchTextField","whiteButton","searchButton","height","width","event","searchGatherList","GatherList","GatherInsert"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, memo, useEffect } from 'react';\nimport { Paper, TextField, Button, Grid, AppBar, InputLabel, Typography, Toolbar, MenuItem, Select, FormControl, OutlinedInput, NativeSelect } from '@material-ui/core';\nimport axios from 'axios';\nimport UseStyles from './UseStyles';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport useInput from 'util/useInput';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport GatherColumn from './GatherColumn';\nimport { today } from 'erp/hr/util/lib';\nimport { useThemeSwitcher } from 'mui-theme-switcher';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport GatherDialog from './GatherDialog';\n\nconst MrpGather = props => {\n    const columnDefs = GatherColumn;\n    const [gatherDialog, setGatherDialog] = useState(false);\n    const [mrpNoList, setMrpNoList] = useState([]);\n    const [mrpNoAndItemCodelist, setmrpNoAndItemCodeList] = useState([]);\n    const [gridApi, setGridApi] = useState(null);\n    const classes = UseStyles();\n\n    useEffect(() => {\n        const mrpGatheringStatusCondition = '';\n\n        props.searchGetMrpList({ mrpGatheringStatusCondition: mrpGatheringStatusCondition });\n\n    }, []);\n\n    const MrpGatherRegister = () => {\n        const mrpNoData = [];\n        const mrpNoAndItemCode = {};\n\n        const size = props.MrpGetList.length;\n\n        for (let mrpNumber = 0; mrpNumber < size; mrpNumber++) {\n            console.log(props.MrpGetList[mrpNumber]);\n\n            mrpNoData.push(props.MrpGetList[mrpNumber].mrpNo);\n            console.log(\n                props.MrpGetList[mrpNumber].mrpNo + '' + props.MrpGetList[mrpNumber].itemCode\n            );\n            mrpNoAndItemCode[props.MrpGetList[mrpNumber].mrpNo] =\n                props.MrpGetList[mrpNumber].itemCode;\n        }\n\n        setMrpNoList(mrpNoData);\n        setmrpNoAndItemCodeList(mrpNoAndItemCode);\n\n        setGatherDialog(true);\n    };\n    const mrpClose = () => {\n        setGatherDialog(false);\n    };\n\n    const { dark } = useThemeSwitcher();\n    const onGridSizeChanged = params => {\n        //var gridWidth = document.getElementById('grid-wrapper').offsetWidth;\n        var columnsToShow = [];\n        var columnsToHide = [];\n        var totalColsWidth = 0;\n        var allColumns = params.columnApi.getAllColumns();\n        for (var i = 0; i < allColumns.length; i++) {\n            var column = allColumns[i];\n            totalColsWidth += column.getMinWidth();\n            // console.log('totalColsWidth',totalColsWidth)\n            if (column.colDef.hide === true) {\n                //if (totalColsWidth > gridWidth) {\n                columnsToHide.push(column.colId);\n                //}\n            } else {\n                columnsToShow.push(column.colId);\n            }\n        }\n        params.columnApi.setColumnsVisible(columnsToShow, true);\n        params.columnApi.setColumnsVisible(columnsToHide, false);\n        params.api.sizeColumnsToFit();\n        // console.log('columnsToHide',columnsToHide)\n        //console.log('columnsToShow',columnsToShow)\n    };\n    return (\n        <Grid item xs={12}>\n            <AppBar position=\"relative\">\n                <Toolbar>\n                    <Typography variant=\"h5\">소요량취합</Typography>\n                </Toolbar>\n            </AppBar>\n            <br />\n            <div id=\"grid-wrapper\">\n                <FormControl variant=\"outlined\" className={classes.searchTextField}></FormControl>\n\n                <Button\n                    variant={'contained'}\n                    color={'primary'}\n                    name={'confirm'}\n                    onClick={MrpGatherRegister}\n                    className={dark ? classes.whiteButton : classes.searchButton}\n                >\n                    소요량 취합 결과 조회\n                </Button>\n            </div>\n\n            <br />\n            <div\n                className={dark ? 'ag-theme-alpine-dark' : 'ag-theme-material'}\n                style={{\n                    height: '400px',\n                    width: '100%'\n                }}\n            >\n                <AgGridReact\n                    columnDefs={columnDefs}\n                    rowData={props.MrpGetList}\n                    onGridSizeChanged={onGridSizeChanged}\n                    suppressRowClickSelection={'true'}\n                    onGridReady={event => {\n                        setGridApi(event.api);\n                        event.api.sizeColumnsToFit();\n                    }}\n                    rowSelection=\"multiple\" //여러개선택가능\n                />\n\n                <MyDialog open={gatherDialog} close={mrpClose} maxWidth={'90%'}>\n                    <div>\n                        <GatherDialog\n                            mrpNoData={mrpNoList}\n                            searchGatherList={props.searchGatherList}\n                            GatherList={props.GatherList}\n                            GatherInsert={props.GatherInsert}\n                            mrpNoAndItemCodelist={mrpNoAndItemCodelist}\n                            gridApi={gridApi}\n                        />\n                    </div>\n                </MyDialog>\n            </div>\n        </Grid>\n    );\n};\nexport default MrpGather;\n"]},"metadata":{},"sourceType":"module"}