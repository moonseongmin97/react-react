{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\Slip\\\\SalaryAndDelivery\\\\Order.js\";\nimport React, { useEffect, useState } from 'react';\nimport moment from \"moment\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ORDER_COMPLETE_REQUEST } from 'erp/logistic/sales/action/SalesActionType';\nimport { setSearchOrderInfoListOnDelivery } from 'erp/logistic/purchase/page/StockInfo/stockAxios';\nimport { List, DialogActions, Button, TextField } from '@material-ui/core';\nimport axios from 'axios';\n/*##################################### 2021-06-18 발주현황 PGW  #######################################*/\n\nconst Order = props => {\n  let year = moment(new Date()).format(\"yyyy\");\n  let month = moment(new Date()).format(\"MM\");\n  let toDay = moment(new Date()).format(\"yyyy-MM-DD\");\n  let monthFirstDay = year + \"-\" + month + \"-01\";\n  const [startDate, setStartDate] = useState(monthFirstDay); //시작 날짜\n\n  const [endDate, setEndDate] = useState(toDay);\n  const [positionGridApi, setPositionGridApi] = React.useState();\n  const dispatch = useDispatch();\n  const orderCompleteData = useSelector(({\n    logistic\n  }) => logistic.Sales.orderCompleteData, []);\n  const [orderInfoRows, setOrderInfoRows] = useState([]);\n  const [orderList, setOrderList] = useState([{\n    journalNo: 'NEW JOURNAL',\n    // 여기서 분개 번호가 만들어짐.\n    slipNo: 'NEW',\n    balanceDivision: '차변',\n    accountCode: '0602',\n    //발주 외주비.\n    accountName: '외주비',\n    customerCode: '',\n    leftDebtorPrice: 0,\n    // 차변\n    rightCreditsPrice: '' // 대변\n\n  }, {\n    journalNo: 'NEW JOURNAL',\n    slipNo: 'NEW',\n    balanceDivision: '대변',\n    accountCode: '0101',\n    //급여에 대한 현금\n    accountName: '현금',\n    customerCode: '',\n    leftDebtorPrice: '',\n    // 차변\n    rightCreditsPrice: 0 // 대변\n\n  }]);\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n\n  const column = {\n    accountColumnDefs: [{\n      width: '50',\n      headerCheckboxSelection: true,\n      checkboxSelection: true\n    }, {\n      headerName: '제품코드',\n      field: 'itemCode',\n      width: 150\n    }, {\n      headerName: '제품명',\n      field: 'itemName',\n      width: 150\n    }, {\n      headerName: '단위',\n      field: 'unitOfMrp',\n      width: 100\n    }, {\n      headerName: '발주량',\n      field: 'requiredAmount',\n      width: 110\n    }, //valueFormatter: currencyFormatter\n    {\n      headerName: '재고량',\n      field: 'stockAmount',\n      width: 110\n    }, {\n      headerName: '구매갯수',\n      field: 'calculatedRequiredAmount',\n      width: 150\n    }, {\n      headerName: '제품금액',\n      field: 'standardUnitPrice',\n      width: 150\n    }, {\n      headerName: '합계금액',\n      field: 'sumPrice',\n      width: 200\n    }],\n    autoGroupColumnDef: {\n      minWidth: 100\n    }\n  };\n\n  const selectData = async () => {\n    await dispatch({\n      type: ORDER_COMPLETE_REQUEST,\n      payload: {}\n    });\n  };\n\n  useEffect(() => {\n    setSearchOrderInfoListOnDelivery(setOrderInfoRows);\n  }, []);\n\n  function currencyFormatter(params) {\n    return formatNumber(params.value) + ' 원';\n  }\n\n  function formatNumber(number) {\n    return Math.floor(number).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n  }\n\n  const SumOrder = () => {\n    const orderRows = positionGridApi.getSelectedRows();\n    var sumPrice = 0;\n\n    if (orderRows.length === 0) {\n      alert('선택된 값이 없습니다');\n      return;\n    }\n\n    for (var i = 0; i < orderRows.length; i++) {\n      // if (orderRows[i].finalizeStatus === 'Y') {\n      //     alert('마감여부 확인 바랍니다');\n      //     return;\n      // }\n      console.log('orderRows[i].sumPrice', orderRows[i].sumPrice);\n      sumPrice += parseInt(orderRows[i].sumPrice);\n    }\n\n    const newJournal = orderList.map((journalState, index) => {\n      switch (index) {\n        case 0:\n          return { ...journalState,\n            customerCode: orderRows[0].customerCode,\n            rightCreditsPrice: sumPrice\n          };\n\n        case 1:\n          return { ...journalState,\n            customerCode: orderRows[0].customerCode,\n            leftDebtorPrice: sumPrice\n          };\n\n        default:\n          return { ...journalState\n          };\n      }\n    });\n    props.close({\n      newJournal,\n      orderInfoRows,\n      division: 'Order'\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    Align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"startDate\",\n    type: \"date\",\n    value: startDate,\n    defaultValue: monthFirstDay,\n    onChange: e => {\n      setStartDate(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"endDate\",\n    type: \"date\",\n    value: endDate,\n    defaultValue: toDay,\n    onChange: e => {\n      setEndDate(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    size: \"large\",\n    color: \"primary\",\n    startIcon: React.createElement(SearchIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }) //아이콘\n    ,\n    onClick: selectData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"\\uBC1C\\uC8FC\\uC2E0\\uCCAD \\uD604\\uD669\\uC870\\uD68C\")), React.createElement(\"div\", {\n    className: 'ag-theme-material' //그리드 모양\n    ,\n    style: {\n      height: '540px',\n      width: '100%',\n      paddingTop: '8px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: column.accountColumnDefs //컬럼명\n    ,\n    rowSelection: \"multiple\",\n    getRowStyle: function (param) {\n      return {\n        'text-align': 'center'\n      };\n    } //body 가운데 정렬\n    ,\n    onGridReady: onGridReady,\n    autoGroupColumnDef: column.autoGroupColumnDef,\n    rowData: orderCompleteData,\n    suppressRowClickSelection: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    size: \"large\",\n    color: \"primary\",\n    onClick: SumOrder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"\\uBC1C\\uC8FC \\uC2B9\\uC778\"))));\n};\n\nexport default Order;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/page/Slip/SalaryAndDelivery/Order.js"],"names":["React","useEffect","useState","moment","SearchIcon","AgGridReact","useDispatch","useSelector","ORDER_COMPLETE_REQUEST","setSearchOrderInfoListOnDelivery","List","DialogActions","Button","TextField","axios","Order","props","year","Date","format","month","toDay","monthFirstDay","startDate","setStartDate","endDate","setEndDate","positionGridApi","setPositionGridApi","dispatch","orderCompleteData","logistic","Sales","orderInfoRows","setOrderInfoRows","orderList","setOrderList","journalNo","slipNo","balanceDivision","accountCode","accountName","customerCode","leftDebtorPrice","rightCreditsPrice","onGridReady","params","api","sizeColumnsToFit","column","accountColumnDefs","width","headerCheckboxSelection","checkboxSelection","headerName","field","autoGroupColumnDef","minWidth","selectData","type","payload","currencyFormatter","formatNumber","value","number","Math","floor","toString","replace","SumOrder","orderRows","getSelectedRows","sumPrice","length","alert","i","console","log","parseInt","newJournal","map","journalState","index","close","division","e","target","height","paddingTop","param"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport moment from \"moment\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ORDER_COMPLETE_REQUEST } from 'erp/logistic/sales/action/SalesActionType';\nimport { setSearchOrderInfoListOnDelivery } from 'erp/logistic/purchase/page/StockInfo/stockAxios';\nimport { List, DialogActions, Button, TextField } from '@material-ui/core';\nimport axios from 'axios';\n\n\n/*##################################### 2021-06-18 발주현황 PGW  #######################################*/\n\nconst Order = props => {\n    \n    let year = moment(new Date()).format(\"yyyy\");\n    let month = moment(new Date()).format(\"MM\");\n    let toDay = moment(new Date()).format(\"yyyy-MM-DD\");\n    let monthFirstDay = year + \"-\" + month + \"-01\";\n\n    const [startDate, setStartDate] = useState(monthFirstDay); //시작 날짜\n    const [endDate, setEndDate] = useState(toDay);\n\n\n    const [positionGridApi, setPositionGridApi] = React.useState();\n    const dispatch = useDispatch();\n\n\n    const orderCompleteData = useSelector(\n        ({ logistic }) => logistic.Sales.orderCompleteData,\n    [],);\n\n    const [orderInfoRows, setOrderInfoRows] = useState([]);\n\n    const [orderList, setOrderList] = useState([\n        {\n            journalNo: 'NEW JOURNAL', // 여기서 분개 번호가 만들어짐.\n            slipNo: 'NEW',\n            balanceDivision: '차변',\n            accountCode: '0602', //발주 외주비.\n            accountName: '외주비',\n            customerCode: '',\n            leftDebtorPrice: 0, // 차변\n            rightCreditsPrice: '' // 대변\n        },\n        {\n            journalNo: 'NEW JOURNAL',\n            slipNo: 'NEW',\n            balanceDivision: '대변',\n            accountCode: '0101', //급여에 대한 현금\n            accountName: '현금',\n            customerCode: '',\n            leftDebtorPrice: '', // 차변\n            rightCreditsPrice: 0 // 대변\n        }\n    ]);\n\n    const onGridReady = params => {\n        setPositionGridApi(params.api);\n        params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n    };\n    const column = {\n        accountColumnDefs: [\n            { width: '50', headerCheckboxSelection: true, checkboxSelection: true },\n            { headerName: '제품코드', field: 'itemCode', width: 150 },\n            { headerName: '제품명', field: 'itemName', width: 150  },\n            { headerName: '단위', field: 'unitOfMrp', width: 100 },\n            { headerName: '발주량', field: 'requiredAmount', width: 110 }, //valueFormatter: currencyFormatter\n            { headerName: '재고량', field: 'stockAmount', width: 110 },\n            { headerName: '구매갯수', field: 'calculatedRequiredAmount', width: 150 },\n            { headerName: '제품금액', field: 'standardUnitPrice', width: 150 },\n            { headerName: '합계금액', field: 'sumPrice', width: 200 },\n        ],\n        autoGroupColumnDef: { minWidth: 100 }\n    };\n\n    \n    const selectData = async () => {\n        await dispatch({\n            type: ORDER_COMPLETE_REQUEST,\n            payload: {}\n        });\n    };\n\n    useEffect(() => {\n        setSearchOrderInfoListOnDelivery(setOrderInfoRows)\n    }\n    , []);\n\n    function currencyFormatter(params) {\n        return formatNumber(params.value) + ' 원';\n    }\n\n    function formatNumber(number) {\n        return Math.floor(number)\n            .toString()\n            .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n    }\n\n    const SumOrder = () => {\n        const orderRows = positionGridApi.getSelectedRows();\n\n        var sumPrice = 0;\n\n        if (orderRows.length === 0) {\n            alert('선택된 값이 없습니다');\n            return;\n        }\n\n        for (var i = 0; i < orderRows.length; i++) {\n            // if (orderRows[i].finalizeStatus === 'Y') {\n            //     alert('마감여부 확인 바랍니다');\n            //     return;\n            // }\n            console.log('orderRows[i].sumPrice', orderRows[i].sumPrice);\n            sumPrice += parseInt(orderRows[i].sumPrice);\n        }\n\n        const newJournal = orderList.map((journalState, index) => {\n            switch (index) {\n                case 0:\n                    return {\n                        ...journalState,\n                        customerCode: orderRows[0].customerCode,\n                        rightCreditsPrice: sumPrice\n                    };\n\n                case 1:\n                    return {\n                        ...journalState,\n                        customerCode: orderRows[0].customerCode,\n                        leftDebtorPrice: sumPrice\n                    };\n\n                default:\n                    return { ...journalState };\n            }\n        });\n\n        props.close({\n            newJournal,\n            orderInfoRows,\n            division: 'Order'\n        });\n    };\n\n    return (\n        <div>\n            <List>\n                <div Align=\"center\">\n                    <TextField\n                    id=\"startDate\"\n                    type={\"date\"}\n                    value={startDate}\n                    defaultValue={monthFirstDay}\n                    onChange={e => {\n                        setStartDate(e.target.value);\n                    }}\n                    /> \n                    <TextField\n                    id=\"endDate\"\n                    type={\"date\"}\n                    value={endDate}\n                    defaultValue={toDay}\n                    onChange={e => {\n                        setEndDate(e.target.value);\n                    }}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        size=\"large\"\n                        color=\"primary\"\n                        startIcon={<SearchIcon />} //아이콘\n                        onClick={selectData}\n                    >\n                        발주신청 현황조회\n                    </Button>\n                </div>\n                <div\n                    className={'ag-theme-material'} //그리드 모양\n                    style={{\n                        height: '540px',\n                        width: '100%',\n\n                        paddingTop: '8px'\n                    }}\n                >\n                    <AgGridReact\n                        columnDefs={column.accountColumnDefs} //컬럼명\n                        rowSelection=\"multiple\"\n                        getRowStyle={function(param) {\n                            return { 'text-align': 'center' };\n                        }} //body 가운데 정렬\n                        onGridReady={onGridReady}\n                        autoGroupColumnDef={column.autoGroupColumnDef}\n                        rowData={orderCompleteData}\n                        suppressRowClickSelection={true}\n                    />\n                </div>\n            </List>\n            <div>\n                <DialogActions>\n                    <Button variant=\"contained\"\n                        size=\"large\"\n                        color=\"primary\"\n                        onClick={SumOrder}>\n                        발주 승인\n                    </Button>\n                </DialogActions>\n            </div>\n        </div>\n    );\n};\n\nexport default Order;\n"]},"metadata":{},"sourceType":"module"}