{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68react\\\\src\\\\erp\\\\logistic\\\\base\\\\page\\\\CodeInfo\\\\DetailCodeGird.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addDetailCodeList, saveDetailCodeList, searchCodeList } from 'erp/logistic/base/action/LogisticsInfoAction';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport AddDetailCode from './AddDetailCode';\n\nfunction DetailCodeGrid(props) {\n  var divisionCodeNo = props.divisionCodeNo;\n  const dispatch = useDispatch();\n  const detailCodeList = useSelector(state => state.logistic.logisticsinfo.detailCodeList);\n  var detailList2 = detailCodeList.filter(ele => {\n    if (ele[0].divisionCodeNo === divisionCodeNo) {\n      return ele;\n    }\n  });\n  const detailList = detailList2[0];\n  const [addOpenDialog, setAddOpenDialog] = useState(false);\n  const [detailCodeGrid, setDetailCodeGrid] = useState();\n  console.log(props.edit);\n  const column = {\n    columnDefs: [//{ headerName: '잠금',field: \"codeUseCheckbox\",checkboxSelection: true, width:120 }, //cellRenderer : onCheckClicked\n    {\n      headerName: '구분코드',\n      field: 'divisionCodeNo',\n      hide: true\n    }, //\n    {\n      headerName: '상세코드',\n      field: 'detailCode',\n      editable: props.edit\n    }, {\n      headerName: '상세코드명',\n      field: 'detailCodeName',\n      editable: props.edit\n    }, {\n      headerName: '설명',\n      field: 'description',\n      editable: true,\n      width: 400\n    }, {\n      headerName: '사용잠금',\n      field: 'codeUseCheck',\n      width: 100\n    }, {\n      headerName: '상태',\n      field: 'status',\n      hide: true\n    } //\n    ]\n  };\n\n  const addClick = () => {\n    setAddOpenDialog(true);\n\n    if (detailList === undefined) {\n      alert('코드를 선택해주세요.');\n      close();\n    }\n  };\n\n  const onCellClicked = params => {\n    //const selRow = detailCodeGrid.getSelectedRows();\n    //console.log(params); // rowClick으로 만들 것!!\n    if (params.colDef.field === 'codeUseCheck') {\n      params.data.codeUseCheck = params.data.codeUseCheck === null ? 'N' : null;\n      params.data.status = 'UPDATE';\n    } else if (params.colDef.field === 'description') {\n      params.data.status = 'UPDATE';\n    }\n\n    detailCodeGrid.updateRowData({\n      update: [params.data]\n    });\n  };\n\n  const close = () => {\n    setAddOpenDialog(false);\n  };\n\n  const onSubmit = detailCodeTo => {\n    dispatch(addDetailCodeList(detailCodeTo)); //console.log(detailCodeGrid)\n\n    detailCodeGrid.updateRowData({\n      add: [detailCodeTo]\n    });\n    close();\n  };\n\n  const saveClick = () => {\n    var detailCodeList = [];\n    detailCodeGrid.forEachNode(node => {\n      detailCodeList.push(node.data);\n    }); // 복잡해서 못해먹겠다~~~\n\n    dispatch(saveDetailCodeList({\n      detailCodeList\n    })); // 이부분 대충 만듬 !!\n  };\n\n  const DetailCodeApi = params => {\n    setDetailCodeGrid(params.api);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(MyGrid, {\n    column: column,\n    title: '상세 코드 관리',\n    list: detailList,\n    rowSelection: \"multiple\",\n    api: DetailCodeApi,\n    onCellClicked: onCellClicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: addClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"\\uC0C1\\uC138\\uCF54\\uB4DC \\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: saveClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"\\uC0C1\\uC138\\uCF54\\uB4DC \\uC800\\uC7A5\")), React.createElement(MyDialog, {\n    open: addOpenDialog,\n    close: close,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(AddDetailCode, {\n    divisionCodeNo: divisionCodeNo,\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }))));\n}\n\nexport default DetailCodeGrid;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68react/src/erp/logistic/base/page/CodeInfo/DetailCodeGird.js"],"names":["React","useEffect","useState","Button","MyGrid","useDispatch","useSelector","addDetailCodeList","saveDetailCodeList","searchCodeList","MyDialog","AddDetailCode","DetailCodeGrid","props","divisionCodeNo","dispatch","detailCodeList","state","logistic","logisticsinfo","detailList2","filter","ele","detailList","addOpenDialog","setAddOpenDialog","detailCodeGrid","setDetailCodeGrid","console","log","edit","column","columnDefs","headerName","field","hide","editable","width","addClick","undefined","alert","close","onCellClicked","params","colDef","data","codeUseCheck","status","updateRowData","update","onSubmit","detailCodeTo","add","saveClick","forEachNode","node","push","DetailCodeApi","api","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    addDetailCodeList,\n    saveDetailCodeList,\n    searchCodeList\n} from 'erp/logistic/base/action/LogisticsInfoAction';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport AddDetailCode from './AddDetailCode';\n\nfunction DetailCodeGrid(props) {\n    var divisionCodeNo = props.divisionCodeNo;\n    const dispatch = useDispatch();\n    const detailCodeList = useSelector(state => state.logistic.logisticsinfo.detailCodeList);\n\n    var detailList2 = detailCodeList.filter(ele => {\n        if (ele[0].divisionCodeNo === divisionCodeNo) {\n            return ele;\n        }\n    });\n    const detailList = detailList2[0];\n    const [addOpenDialog, setAddOpenDialog] = useState(false);\n    const [detailCodeGrid, setDetailCodeGrid] = useState();\n\n    console.log(props.edit);\n    const column = {\n        columnDefs: [\n            //{ headerName: '잠금',field: \"codeUseCheckbox\",checkboxSelection: true, width:120 }, //cellRenderer : onCheckClicked\n            { headerName: '구분코드', field: 'divisionCodeNo', hide: true }, //\n            { headerName: '상세코드', field: 'detailCode', editable: props.edit},\n            { headerName: '상세코드명', field: 'detailCodeName', editable: props.edit},\n            { headerName: '설명', field: 'description', editable: true, width: 400 },\n            { headerName: '사용잠금', field: 'codeUseCheck', width: 100 },\n            { headerName: '상태', field: 'status', hide: true } //\n        ]\n    };\n\n    const addClick = () => {\n        setAddOpenDialog(true);\n        if (detailList === undefined) {\n            alert('코드를 선택해주세요.');\n            close();\n        }\n    };\n\n    const onCellClicked = params => {\n        //const selRow = detailCodeGrid.getSelectedRows();\n        //console.log(params); // rowClick으로 만들 것!!\n        if (params.colDef.field === 'codeUseCheck') {\n            params.data.codeUseCheck = params.data.codeUseCheck === null ? 'N' : null;\n            params.data.status = 'UPDATE';\n        } else if (params.colDef.field === 'description') {\n            params.data.status = 'UPDATE';\n        }\n        detailCodeGrid.updateRowData({ update: [params.data] });\n    };\n\n    const close = () => {\n        setAddOpenDialog(false);\n    };\n\n    const onSubmit = detailCodeTo => {\n        dispatch(addDetailCodeList(detailCodeTo));\n        //console.log(detailCodeGrid)\n        detailCodeGrid.updateRowData({ add: [detailCodeTo] });\n        close();\n    };\n\n    const saveClick = () => {\n        var detailCodeList = [];\n        detailCodeGrid.forEachNode(node => {\n            detailCodeList.push(node.data);\n        });\n        // 복잡해서 못해먹겠다~~~\n        dispatch(saveDetailCodeList({ detailCodeList }));\n        // 이부분 대충 만듬 !!\n    };\n\n    const DetailCodeApi = params => {\n        setDetailCodeGrid(params.api);\n    };\n\n    return (\n        <>\n            <MyGrid\n                column={column}\n                title={'상세 코드 관리'}\n                list={detailList}\n                rowSelection=\"multiple\"\n                api={DetailCodeApi}\n                onCellClicked={onCellClicked}\n            >\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={addClick}\n                >\n                    상세코드 추가\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={saveClick}>\n                    상세코드 저장\n                </Button>\n            </MyGrid>\n            <MyDialog open={addOpenDialog} close={close}>\n                <div>\n                    <AddDetailCode divisionCodeNo={divisionCodeNo} onSubmit={onSubmit} />\n                </div>\n            </MyDialog>\n        </>\n    );\n}\n\nexport default DetailCodeGrid;\n"]},"metadata":{},"sourceType":"module"}