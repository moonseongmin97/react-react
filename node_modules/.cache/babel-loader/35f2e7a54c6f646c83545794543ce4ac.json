{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\Slip\\\\Dialog\\\\FinancialDialog.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Dialog, DialogTitle, DialogContent, List, DialogActions, Button } from \"@material-ui/core\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport journaldetail from '../JournalDetail';\nconsole.log(\"나와랏:\" + journaldetail);\n\nconst FinancialDialog = ({\n  open,\n  close,\n  divisionCodeData\n}) => {\n  const [data, setData] = useState(divisionCodeData); //useEffect 로 조회한 결과값 받는 상태 값  \n  //========================== 그리드 객체 준비 ==========================\n\n  const [positionGridApi, setPositionGridApi] = useState();\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit();\n  }; //컴포넌트가 마운트 됐을 때 호출됨 \n\n\n  useEffect(() => {// FinancialList() // 함수호출 \n  }, []);\n  /*function FinancialList() {\n      console.log(\"@@@23@@@\"+divisionCodeNo);\n      axios.get(\"http://localhost:8282/acc/base/getDetailCodeList\",\n          { params: { divisionCodeNo: divisionCodeNo } }\n      ).then(response => {\n          setData(response.data.detailCodeList);\n      }).catch(e => { console.log(e); });\n  }*/\n  //========================== 그리드내용 ==========================\n\n  const accountColumnDefs = [{\n    headerName: \"분개상세항목내용\",\n    field: \"detailCodeName\"\n  }]; //========================== 그리드를 클릭했을 때 발생되는 이벤트 ==========================\n  // onClose 와 open 값을 비구조 할당과 동시에 Dialog가 닫히면서\n  // onClose안에 객체(data, division) 을 가지고 JournalDetail 컴포넌트로 감.\n  //============================== 닫기버튼 ====================================\n\n  const Close = () => {\n    console.log(\"!@#!@#\");\n    close({\n      data: undefined\n    });\n  }; //============================== 셀 클릭시  ====================================\n\n\n  const handleClose = Rows => {\n    console.log(\"!@#!@#\");\n    close({\n      data: Rows.data.detailCodeName\n    });\n  };\n\n  return React.createElement(Dialog, {\n    \"aria-labelledby\": \"simple-dialog-title\",\n    open: open,\n    fullWidth: true,\n    maxWidth: 'xs',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"simple-dialog-title\",\n    Align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \" \\uBD84\\uAC1C\\uC0C1\\uC138\\uD56D\\uBAA9 \"), React.createElement(DialogContent, {\n    dividers: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ag-theme-balham\",\n    rowStyle: {\n      \"text-align\": \"center\"\n    },\n    style: {\n      height: \"300px\",\n      width: \"100%\",\n      paddingTop: \"8px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: accountColumnDefs,\n    rowData: divisionCodeData // 뿌릴 data\n    ,\n    rowSelection: \"single\" // 하나만 선택 가능.\n    ,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onGridReady: onGridReady,\n    onCellClicked: handleClose // cell을 클릭하면, handleClose가 실행된다.\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: Close,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Close\")));\n};\n\nexport default FinancialDialog;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/page/Slip/Dialog/FinancialDialog.js"],"names":["React","useState","useEffect","axios","Dialog","DialogTitle","DialogContent","List","DialogActions","Button","AgGridReact","journaldetail","console","log","FinancialDialog","open","close","divisionCodeData","data","setData","positionGridApi","setPositionGridApi","onGridReady","params","api","sizeColumnsToFit","accountColumnDefs","headerName","field","Close","undefined","handleClose","Rows","detailCodeName","height","width","paddingTop","param"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    DialogActions,\n    Button,\n} from \"@material-ui/core\";\n\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\n\nimport journaldetail from '../JournalDetail'\n\nconsole.log(\"나와랏:\"+journaldetail);\n\nconst FinancialDialog = ({ open, close, divisionCodeData }) => {\n    const [data, setData] = useState(divisionCodeData); //useEffect 로 조회한 결과값 받는 상태 값  \n\n  \n    //========================== 그리드 객체 준비 ==========================\n    const [positionGridApi, setPositionGridApi] = useState();\n    const onGridReady = params => {\n        setPositionGridApi(params.api);\n        params.api.sizeColumnsToFit();\n    };\n\n    //컴포넌트가 마운트 됐을 때 호출됨 \n    useEffect(() => {\n       // FinancialList() // 함수호출 \n    }, []);\n\n\n    /*function FinancialList() {\n        console.log(\"@@@23@@@\"+divisionCodeNo);\n        axios.get(\"http://localhost:8282/acc/base/getDetailCodeList\",\n            { params: { divisionCodeNo: divisionCodeNo } }\n        ).then(response => {\n            setData(response.data.detailCodeList);\n        }).catch(e => { console.log(e); });\n    }*/\n\n    //========================== 그리드내용 ==========================\n    const accountColumnDefs = [\n        { headerName: \"분개상세항목내용\", field: \"detailCodeName\" }\n    ];\n\n    //========================== 그리드를 클릭했을 때 발생되는 이벤트 ==========================\n    // onClose 와 open 값을 비구조 할당과 동시에 Dialog가 닫히면서\n    // onClose안에 객체(data, division) 을 가지고 JournalDetail 컴포넌트로 감.\n\n    //============================== 닫기버튼 ====================================\n    const Close = () => {console.log(\"!@#!@#\");\n        close({\n            data: undefined,\n        });\n    };\n    //============================== 셀 클릭시  ====================================\n    const handleClose = (Rows) => {console.log(\"!@#!@#\");\n        close({ data: Rows.data.detailCodeName });\n    };\n\n\n    return (\n        <Dialog aria-labelledby=\"simple-dialog-title\" open={open} fullWidth={true} maxWidth={'xs'}>\n            <DialogTitle id=\"simple-dialog-title\" Align=\"center\"> 분개상세항목 </DialogTitle>\n            <DialogContent dividers>\n                <List >\n                    <div className={\"ag-theme-balham\"}\n                        rowStyle={{ \"text-align\": \"center\" }}\n                        style={{\n                            height: \"300px\",\n                            width: \"100%\",\n                            paddingTop: \"8px\"\n                        }}>\n                        <AgGridReact\n                            columnDefs={accountColumnDefs}\n                            rowData={divisionCodeData}   // 뿌릴 data\n                            rowSelection='single'  // 하나만 선택 가능.\n                            getRowStyle={function (param) { return { \"text-align\": \"center\" }; }} //body 가운데 정렬\n                            onGridReady={onGridReady}\n                            onCellClicked={handleClose}  // cell을 클릭하면, handleClose가 실행된다.\n                        />\n                    </div>\n                </List>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={Close} color=\"primary\">\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\n\nexport default FinancialDialog;"]},"metadata":{},"sourceType":"module"}