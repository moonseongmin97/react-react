{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\production\\\\page\\\\WorkSite\\\\WorkSiteLog.js\";\nimport { Button, TextField } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport Swal from 'sweetalert2';\n\nfunction WorksiteLog(props) {\n  let today = moment(new Date()).format('yyyy-MM-DD');\n  const [date, setDate] = useState(today);\n  const [logList, setLogList] = useState([]);\n\n  const onChangeDate = e => {\n    setDate(e.target.value);\n  };\n\n  const errorMsg = val => {\n    Swal.fire({\n      icon: 'error',\n      title: 'Oops...',\n      text: val\n    });\n  };\n\n  const column = {\n    columnDefs: [{\n      headerName: '작업지시번호',\n      field: 'workOrderNo'\n    }, {\n      headerName: '품목코드',\n      field: 'itemCode'\n    }, {\n      headerName: '품목명',\n      field: 'itemName'\n    }, {\n      headerName: '생산공정코드',\n      field: 'productionProcessCode'\n    }, {\n      headerName: '생산공정명',\n      field: 'productionProcessName'\n    }, {\n      headerName: '상황',\n      field: 'progress'\n    }, {\n      headerName: '작업장명',\n      field: 'workSiteName'\n    }, {\n      headerName: '날짜',\n      field: 'workDate'\n    }]\n  };\n\n  const workSiteLogSearch = () => {\n    Axios.get(`http://localhost:4000/erp/logi/workSiteLog/${date}`) //     params: {\n    //         workSiteLogDate: date\n    //     }\n    // })\n    .then(response => {\n      if (response.data.result.length === 0) {\n        errorMsg('선택된 날짜에 로그 정보가 없습니다.');\n        return;\n      }\n\n      console.log('asd', response);\n      setLogList(response.data.result);\n    }).catch(e => {\n      console.log('##', e);\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(MyGrid, {\n    column: column,\n    title: '작업장 로그',\n    list: logList,\n    rowSelection: \"single\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    type: 'date',\n    value: date,\n    onChange: onChangeDate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: workSiteLogSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"\\uC791\\uC5C5\\uC7A5 \\uB85C\\uADF8 \\uC870\\uD68C\"))));\n}\n\nexport default WorksiteLog;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/production/page/WorkSite/WorkSiteLog.js"],"names":["Button","TextField","React","useState","MyGrid","moment","Axios","Swal","WorksiteLog","props","today","Date","format","date","setDate","logList","setLogList","onChangeDate","e","target","value","errorMsg","val","fire","icon","title","text","column","columnDefs","headerName","field","workSiteLogSearch","get","then","response","data","result","length","console","log","catch"],"mappings":"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","sourcesContent":["import { Button, TextField } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport Swal from 'sweetalert2';\n\nfunction WorksiteLog(props) {\n    let today = moment(new Date()).format('yyyy-MM-DD');\n    const [date, setDate] = useState(today);\n    const [logList, setLogList] = useState([]);\n\n    const onChangeDate = e => {\n        setDate(e.target.value);\n    };\n    const errorMsg = val => {\n        Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: val\n        });\n    };\n\n    const column = {\n        columnDefs: [\n            { headerName: '작업지시번호', field: 'workOrderNo' },\n            { headerName: '품목코드', field: 'itemCode' },\n            { headerName: '품목명', field: 'itemName' },\n            { headerName: '생산공정코드', field: 'productionProcessCode' },\n            { headerName: '생산공정명', field: 'productionProcessName' },\n            { headerName: '상황', field: 'progress' },\n            { headerName: '작업장명', field: 'workSiteName' },\n            { headerName: '날짜', field: 'workDate' }\n        ]\n    };\n    const workSiteLogSearch = () => {\n        Axios.get(`http://localhost:4000/erp/logi/workSiteLog/${date}`)\n\n            //     params: {\n            //         workSiteLogDate: date\n            //     }\n            // })\n            .then(response => {\n                if (response.data.result.length === 0) {\n                    errorMsg('선택된 날짜에 로그 정보가 없습니다.');\n                    return;\n                }\n                console.log('asd', response);\n                setLogList(response.data.result);\n            })\n            .catch(e => {\n                console.log('##', e);\n            });\n    };\n    return (\n        <>\n            <div>\n                <MyGrid column={column} title={'작업장 로그'} list={logList} rowSelection=\"single\">\n                    <TextField type={'date'} value={date} onChange={onChangeDate}></TextField>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={workSiteLogSearch}>\n                        작업장 로그 조회\n                    </Button>\n                </MyGrid>\n            </div>\n        </>\n    );\n}\n\nexport default WorksiteLog;\n"]},"metadata":{},"sourceType":"module"}