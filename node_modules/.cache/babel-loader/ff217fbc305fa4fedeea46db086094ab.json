{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\common\\\\page\\\\login\\\\WorkPlaceCodeDialog.js\";\nimport React, { useState } from \"react\";\nimport { Dialog, DialogTitle, DialogContent, List, DialogActions, Button, useMediaQuery, useTheme } from \"@material-ui/core\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst WorkPlaceCodeDialog = ({\n  open,\n  close,\n  value\n}) => {\n  //========================== 그리드 객체 준비 ==========================\n  const [positionGridApi, setPositionGridApi] = useState();\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit();\n  }; //========================== 그리드내용 ==========================\n\n\n  const accountColumnDefs = [{\n    headerName: \"사 업 장 코 드\",\n    field: \"workplaceCode\"\n  }, {\n    headerName: \"사 업 장 명\",\n    field: \"workplaceName\"\n  }]; //========================== 그리드를 클릭했을 때 발생되는 이벤트 ==========================\n  // onClose 와 open 값을 비구조 할당과 동시에 Dialog가 닫히면서\n  // onClose안에 객체(data, division) 을 가지고 JournalGrid 컴포넌트로 감.\n\n  const handleClose = () => {\n    close({\n      data: positionGridApi.getSelectedRows(),\n      // data는 클릭한 row의 정보이고,\n      division: \"WorkPlaceCodeDialog\"\n    });\n  };\n\n  const Close = () => {\n    close({\n      division: \"WorkPlaceCodeDialog\"\n    });\n  };\n\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(Dialog, {\n    \"aria-labelledby\": \"simple-dialog-title\",\n    open: open,\n    fullWidth: true,\n    maxWidth: \"xs\",\n    fullScreen: fullScreen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"simple-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"\\uC0AC \\uC5C5 \\uC7A5 \\uBAA9 \\uB85D\"), React.createElement(DialogContent, {\n    dividers: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    style: {\n      height: \"300px\",\n      width: \"100%\" //paddingTop: \"8px\",\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: accountColumnDefs,\n    rowData: value // 뿌릴 data\n    ,\n    rowSelection: \"single\" // 하나만 선택 가능.\n    ,\n    onGridReady: onGridReady,\n    onCellClicked: handleClose // cell을 클릭하면, handleClose가 실행된다.\n    ,\n    getRowStyle: function (param) {\n      if (param.node.rowPinned) {\n        return {\n          \"font-weight\": \"bold\",\n          background: \"#CEFBC9\"\n        };\n      }\n\n      return {\n        \"text-align\": \"center\"\n      }; // bady 값 가운데정렬\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: Close,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Close\")));\n};\n\nexport default WorkPlaceCodeDialog;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/common/page/login/WorkPlaceCodeDialog.js"],"names":["React","useState","Dialog","DialogTitle","DialogContent","List","DialogActions","Button","useMediaQuery","useTheme","AgGridReact","useThemeSwitcher","WorkPlaceCodeDialog","open","close","value","positionGridApi","setPositionGridApi","onGridReady","params","api","sizeColumnsToFit","accountColumnDefs","headerName","field","handleClose","data","getSelectedRows","division","Close","theme","fullScreen","breakpoints","down","dark","height","width","param","node","rowPinned","background"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,MADF,EAEEC,WAFF,EAGEC,aAHF,EAIEC,IAJF,EAKEC,aALF,EAMEC,MANF,EAOEC,aAPF,EAQEC,QARF,QASO,mBATP;AAUA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA4B;AACtD;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,EAAtD;;AACA,QAAMiB,WAAW,GAAGC,MAAM,IAAI;AAC5BF,IAAAA,kBAAkB,CAACE,MAAM,CAACC,GAAR,CAAlB;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,gBAAX;AACD,GAHD,CAHsD,CAQtD;;;AACA,QAAMC,iBAAiB,GAAG,CACxB;AAAEC,IAAAA,UAAU,EAAE,WAAd;AAA2BC,IAAAA,KAAK,EAAE;AAAlC,GADwB,EAExB;AAAED,IAAAA,UAAU,EAAE,SAAd;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAFwB,CAA1B,CATsD,CActD;AACA;AACA;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxBX,IAAAA,KAAK,CAAC;AACJY,MAAAA,IAAI,EAAEV,eAAe,CAACW,eAAhB,EADF;AACqC;AACzCC,MAAAA,QAAQ,EAAE;AAFN,KAAD,CAAL;AAID,GALD;;AAOA,QAAMC,KAAK,GAAG,MAAM;AAClBf,IAAAA,KAAK,CAAC;AACJc,MAAAA,QAAQ,EAAE;AADN,KAAD,CAAL;AAGD,GAJD;;AAMA,QAAME,KAAK,GAAGrB,QAAQ,EAAtB;AACA,QAAMsB,UAAU,GAAGvB,aAAa,CAACsB,KAAK,CAACE,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,CAAhC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWvB,gBAAgB,EAAjC;AAEA,SACE,oBAAC,MAAD;AACE,uBAAgB,qBADlB;AAEE,IAAA,IAAI,EAAEE,IAFR;AAGE,IAAA,SAAS,EAAE,IAHb;AAIE,IAAA,QAAQ,EAAE,IAJZ;AAKE,IAAA,UAAU,EAAEkB,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAPF,EAQE,oBAAC,aAAD;AAAe,IAAA,QAAQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAEG,IAAI,GAAG,sBAAH,GAA4B,mBAD7C;AAEE,IAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,OADH;AAELC,MAAAA,KAAK,EAAE,MAFF,CAGL;;AAHK,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,oBAAC,WAAD;AACE,IAAA,UAAU,EAAEd,iBADd;AAEE,IAAA,OAAO,EAAEP,KAFX,CAEkB;AAFlB;AAGE,IAAA,YAAY,EAAC,QAHf,CAGwB;AAHxB;AAIE,IAAA,WAAW,EAAEG,WAJf;AAKE,IAAA,aAAa,EAAEO,WALjB,CAK8B;AAL9B;AAME,IAAA,WAAW,EAAE,UAASY,KAAT,EAAgB;AAC3B,UAAIA,KAAK,CAACC,IAAN,CAAWC,SAAf,EAA0B;AACxB,eAAO;AAAE,yBAAe,MAAjB;AAAyBC,UAAAA,UAAU,EAAE;AAArC,SAAP;AACD;;AACD,aAAO;AAAE,sBAAc;AAAhB,OAAP,CAJ2B,CAIQ;AACpC,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF,CADF,CARF,EAkCE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEX,KAAjB;AAAwB,IAAA,KAAK,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAlCF,CADF;AA0CD,CA7ED;;AA+EA,eAAejB,mBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  List,\n  DialogActions,\n  Button,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst WorkPlaceCodeDialog = ({ open, close, value }) => {\n  //========================== 그리드 객체 준비 ==========================\n  const [positionGridApi, setPositionGridApi] = useState();\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit();\n  };\n\n  //========================== 그리드내용 ==========================\n  const accountColumnDefs = [\n    { headerName: \"사 업 장 코 드\", field: \"workplaceCode\" },\n    { headerName: \"사 업 장 명\", field: \"workplaceName\" },\n  ];\n\n  //========================== 그리드를 클릭했을 때 발생되는 이벤트 ==========================\n  // onClose 와 open 값을 비구조 할당과 동시에 Dialog가 닫히면서\n  // onClose안에 객체(data, division) 을 가지고 JournalGrid 컴포넌트로 감.\n\n  const handleClose = () => {\n    close({\n      data: positionGridApi.getSelectedRows(), // data는 클릭한 row의 정보이고,\n      division: \"WorkPlaceCodeDialog\",\n    });\n  };\n\n  const Close = () => {\n    close({\n      division: \"WorkPlaceCodeDialog\",\n    });\n  };\n\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <Dialog\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n      fullWidth={true}\n      maxWidth={\"xs\"}\n      fullScreen={fullScreen}\n    >\n      <DialogTitle id=\"simple-dialog-title\">사 업 장 목 록</DialogTitle>\n      <DialogContent dividers>\n        <List>\n          <div\n            className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n            style={{\n              height: \"300px\",\n              width: \"100%\",\n              //paddingTop: \"8px\",\n            }}\n          >\n            <AgGridReact\n              columnDefs={accountColumnDefs}\n              rowData={value} // 뿌릴 data\n              rowSelection=\"single\" // 하나만 선택 가능.\n              onGridReady={onGridReady}\n              onCellClicked={handleClose} // cell을 클릭하면, handleClose가 실행된다.\n              getRowStyle={function(param) {\n                if (param.node.rowPinned) {\n                  return { \"font-weight\": \"bold\", background: \"#CEFBC9\" };\n                }\n                return { \"text-align\": \"center\" }; // bady 값 가운데정렬\n              }}\n            />\n          </div>\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={Close} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default WorkPlaceCodeDialog;\n"]},"metadata":{},"sourceType":"module"}