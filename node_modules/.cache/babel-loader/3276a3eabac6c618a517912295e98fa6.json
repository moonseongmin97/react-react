{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\transport\\\\page\\\\CommercialDialog.js\";\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from \"@material-ui/core\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport Axios from \"axios\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\"; //=============================== 2020-09-10 거래처관리 조편백 ======================================\n\nconst CommercialDialog = ({\n  open,\n  close,\n  value\n}, props) => {\n  const [grid, setGrid] = useState(''); //============================== 닫기버튼 ====================================\n\n  const Close = () => {\n    close({\n      data: undefined\n    });\n  };\n\n  const [data, setData] = useState([]); //useEffect 로 조회한 결과값 받는 상태 값\n  //컴포넌트가 마운트 됐을 때 호출됨\n\n  useEffect(() => {\n    console.log('유즈이펙트하자');\n    Axios.get('http://localhost:8282/logi/transport/getCommercialVehicleList') //COMMERCIAL_VEHICLE_INFO 테이블 가져오는 api\n    .then(response => {\n      console.log(\"(((((((((((((((((((((\", response);\n      setData(response.data.gridRowJson);\n    }).catch(e => {\n      console.log('실패');\n      console.log(e);\n    });\n  }, []); //=============================== ag_grid 시작 ======================================\n\n  const column = {\n    columnDefs: [{\n      headerName: '차량',\n      field: 'commercialVehicle',\n      width: 100\n    }, {\n      headerName: '기사',\n      field: 'driver',\n      width: 100\n    }, {\n      headerName: '출차상태',\n      field: 'transportStatus',\n      width: 100\n    }]\n  }; //=================================================== ag Grid 초기화 시 실행 =========================================\n\n  const onGridReady = params => {\n    setGrid(params.api);\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n\n  const onCellClicked = parmas => {\n    console.log('셀클릭');\n    close({\n      data: grid.getSelectedRows(),\n      // data는 클릭한 row의 정보이고,\n      division: 'accountDialog'\n    });\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(Dialog, {\n    \"aria-labelledby\": \"alert-dialog-slide-title\",\n    open: open,\n    fullWidth: true,\n    maxWidth: 'sm',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"\\uCC28 \\uB7C9 \\uC9C0 \\uC815\"), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    rowstyle: {\n      \"text-align\": \"center\"\n    },\n    style: {\n      height: \"400px\",\n      width: \"100%\",\n      paddingTop: \"8px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: column.columnDefs //정의된 컬럼\n    ,\n    rowData: data //Reduce에서 받아온 데이터\n    ,\n    rowSelection: \"single\" //하나만 선택하거나 복수개를 선택할 수 있음\n    ,\n    onGridReady: onGridReady //onload 이벤트와 유사한 것\n    ,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onCellClicked: onCellClicked // cell을 클릭하면, handleClose가 실행된다.\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(Button, {\n    onClick: Close,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Close\"));\n};\n\nexport default CommercialDialog;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/transport/page/CommercialDialog.js"],"names":["Dialog","DialogTitle","DialogContent","DialogActions","Button","React","useEffect","useState","AgGridReact","Axios","useThemeSwitcher","CommercialDialog","open","close","value","props","grid","setGrid","Close","data","undefined","setData","console","log","get","then","response","gridRowJson","catch","e","column","columnDefs","headerName","field","width","onGridReady","params","api","sizeColumnsToFit","onCellClicked","parmas","getSelectedRows","division","dark","height","paddingTop","param"],"mappings":"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","sourcesContent":["import {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport Axios from \"axios\";\r\n\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\r\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\r\n\r\n//=============================== 2020-09-10 거래처관리 조편백 ======================================\r\nconst CommercialDialog = ({ open, close, value }, props) => {\r\n\r\n  const [grid, setGrid] = useState('');\r\n\r\n    //============================== 닫기버튼 ====================================\r\n    const Close = () => {\r\n        close({\r\n            data: undefined,\r\n        });\r\n    };\r\n    const [data, setData] = useState([]); //useEffect 로 조회한 결과값 받는 상태 값\r\n\r\n    \r\n    //컴포넌트가 마운트 됐을 때 호출됨\r\n    useEffect(() => {\r\n      console.log('유즈이펙트하자');\r\n      Axios.get('http://localhost:8282/logi/transport/getCommercialVehicleList')     //COMMERCIAL_VEHICLE_INFO 테이블 가져오는 api\r\n        .then(response => {\r\n          console.log(\"(((((((((((((((((((((\", response);\r\n          setData(response.data.gridRowJson);\r\n        })\r\n        .catch(e => {\r\n          console.log('실패');\r\n          console.log(e);\r\n        });\r\n    },[]);\r\n  \r\n    \r\n    //=============================== ag_grid 시작 ======================================\r\n    const column = {\r\n      columnDefs: [\r\n          { headerName: '차량', field: 'commercialVehicle', width: 100 },\r\n          { headerName: '기사', field: 'driver', width: 100 },\r\n          { headerName: '출차상태', field: 'transportStatus', width: 100 },\r\n      ]\r\n  };\r\n    //=================================================== ag Grid 초기화 시 실행 =========================================\r\n    const onGridReady = params => {\r\n      setGrid(params.api);\r\n      params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\r\n    };\r\n\r\n    const onCellClicked = parmas => {\r\n      console.log('셀클릭');\r\n      close({\r\n          data: grid.getSelectedRows(), // data는 클릭한 row의 정보이고,\r\n          division: 'accountDialog'\r\n      });\r\n  };\r\n  \r\n  \r\n    const { dark } = useThemeSwitcher();\r\n    return (\r\n        <Dialog aria-labelledby=\"alert-dialog-slide-title\" open={open} fullWidth={true} maxWidth={'sm'}>\r\n            <DialogTitle align=\"center\">차 량 지 정</DialogTitle>\r\n            \r\n            <div\r\n                className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\r\n                rowstyle={{ \"text-align\": \"center\" }}\r\n                style={{\r\n                height: \"400px\",\r\n                width: \"100%\",\r\n                paddingTop: \"8px\",\r\n                }}\r\n            >\r\n                <AgGridReact\r\n                    columnDefs={column.columnDefs} //정의된 컬럼\r\n                    rowData={data} //Reduce에서 받아온 데이터\r\n                    rowSelection=\"single\" //하나만 선택하거나 복수개를 선택할 수 있음\r\n                    onGridReady={onGridReady} //onload 이벤트와 유사한 것\r\n                    getRowStyle={function(param) {\r\n                        return { \"text-align\": \"center\" };\r\n                    }} //body 가운데 정렬\r\n                    onCellClicked={onCellClicked} // cell을 클릭하면, handleClose가 실행된다.\r\n                />\r\n            </div>\r\n            <Button onClick={Close} color=\"secondary\">\r\n                Close\r\n            </Button>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default CommercialDialog;"]},"metadata":{},"sourceType":"module"}