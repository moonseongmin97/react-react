{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Move = void 0;\n\nconst Attract_1 = require(\"./Attract\");\n\nconst Enums_1 = require(\"../../../../Enums\");\n\nconst Trail_1 = require(\"./Trail\");\n\nconst Noise_1 = require(\"./Noise/Noise\");\n\nconst MoveAngle_1 = require(\"./MoveAngle\");\n\nconst MoveGravity_1 = require(\"./MoveGravity\");\n\nconst OutModes_1 = require(\"./OutModes\");\n\nclass Move {\n  constructor() {\n    this.angle = new MoveAngle_1.MoveAngle();\n    this.attract = new Attract_1.Attract();\n    this.direction = Enums_1.MoveDirection.none;\n    this.distance = 0;\n    this.enable = false;\n    this.gravity = new MoveGravity_1.MoveGravity();\n    this.noise = new Noise_1.Noise();\n    this.outModes = new OutModes_1.OutModes();\n    this.random = false;\n    this.size = false;\n    this.speed = 2;\n    this.straight = false;\n    this.trail = new Trail_1.Trail();\n    this.vibrate = false;\n    this.warp = false;\n  }\n\n  get collisions() {\n    return false;\n  }\n\n  set collisions(value) {}\n\n  get bounce() {\n    return this.collisions;\n  }\n\n  set bounce(value) {\n    this.collisions = value;\n  }\n\n  get out_mode() {\n    return this.outMode;\n  }\n\n  set out_mode(value) {\n    this.outMode = value;\n  }\n\n  get outMode() {\n    return this.outModes.default;\n  }\n\n  set outMode(value) {\n    this.outModes.default = value;\n  }\n\n  load(data) {\n    var _a, _b;\n\n    if (data === undefined) {\n      return;\n    }\n\n    if (data.angle !== undefined) {\n      if (typeof data.angle === \"number\") {\n        this.angle.value = data.angle;\n      } else {\n        this.angle.load(data.angle);\n      }\n    }\n\n    this.attract.load(data.attract);\n\n    if (data.direction !== undefined) {\n      this.direction = data.direction;\n    }\n\n    if (data.distance !== undefined) {\n      this.distance = data.distance;\n    }\n\n    if (data.enable !== undefined) {\n      this.enable = data.enable;\n    }\n\n    this.gravity.load(data.gravity);\n    this.noise.load(data.noise);\n    const outMode = (_a = data.outMode) !== null && _a !== void 0 ? _a : data.out_mode;\n\n    if (data.outModes !== undefined || outMode !== undefined) {\n      if (typeof data.outModes === \"string\" || data.outModes === undefined && outMode !== undefined) {\n        this.outModes.load({\n          default: (_b = data.outModes) !== null && _b !== void 0 ? _b : outMode\n        });\n      } else {\n        this.outModes.load(data.outModes);\n      }\n    }\n\n    if (data.random !== undefined) {\n      this.random = data.random;\n    }\n\n    if (data.size !== undefined) {\n      this.size = data.size;\n    }\n\n    if (data.speed !== undefined) {\n      this.speed = data.speed;\n    }\n\n    if (data.straight !== undefined) {\n      this.straight = data.straight;\n    }\n\n    this.trail.load(data.trail);\n\n    if (data.vibrate !== undefined) {\n      this.vibrate = data.vibrate;\n    }\n\n    if (data.warp !== undefined) {\n      this.warp = data.warp;\n    }\n  }\n\n}\n\nexports.Move = Move;","map":null,"metadata":{},"sourceType":"script"}