{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68react\\\\src\\\\erp\\\\logistic\\\\production\\\\page\\\\WorkInstruction\\\\WorkInstruction.js\";\nimport { Button } from '@material-ui/core';\nimport React, { useState, useCallback } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport Axios from 'axios';\nimport WorkOrderDialog from './WorkOrderDialog';\nimport Swal from 'sweetalert2';\n\nfunction WorkInstruction(props) {\n  const [list, setList] = useState([]);\n  const [size, setSize] = useState('50vh');\n  const [searchOpenDialog, setSearchOpenDialog] = useState(false);\n  const [data, setData] = useState(null);\n  const [workOderableGridApi, setWorkOderableGridApi] = useState(null);\n  const column = {\n    columnDefs: [{\n      headerName: '소요량취합번호',\n      field: 'mrpGatheringNo',\n      suppressSizeToFit: true,\n      headerCheckboxSelection: false,\n      headerCheckboxSelectionFilteredOnly: true,\n      suppressRowClickSelection: true,\n      checkboxSelection: true\n    }, {\n      headerName: '품목분류',\n      field: 'itemClassification'\n    }, {\n      headerName: '품목코드',\n      field: 'itemCode'\n    }, {\n      headerName: '품목명',\n      field: 'itemName'\n    }, {\n      headerName: '단위',\n      field: 'unitOfMrp'\n    }, {\n      headerName: '필요수량',\n      field: 'requiredAmount'\n    }, {\n      headerName: '작업지시기한',\n      field: 'orderDate'\n    }, {\n      headerName: '작업완료기한',\n      field: 'requiredDate'\n    }]\n  };\n\n  const onCellClicked = params => {\n    console.log('onCellClicked');\n    setData(params);\n  };\n\n  const workSimul = useCallback(() => {\n    const data = workOderableGridApi.getSelectedRows()[0];\n    setData(data);\n\n    if (!data) {\n      return Swal.fire('오류', '작업목록선택', 'error');\n    }\n\n    customerSearchClick();\n  }, [workOderableGridApi]);\n\n  const customerSearchClick = () => {\n    setSearchOpenDialog(true);\n  };\n\n  const close = () => {\n    setSearchOpenDialog(false);\n  };\n\n  const contractSearch = () => {\n    Axios.get('http://localhost:8282/logi/production/getWorkOrderableMrpList').then(response => setList(response.data.result)).catch(e => {\n      Swal.fire('오류', e, 'error');\n    });\n  };\n\n  const orderGirdApi = params => {\n    setWorkOderableGridApi(params.api);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(MyGrid, {\n    column: column,\n    title: '작업지시 필요 리스트 ( MRP 취합 기반 )',\n    list: list,\n    onCellClicked: onCellClicked,\n    rowSelection: \"single\",\n    size: size,\n    api: orderGirdApi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: workSimul,\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"\\uC791\\uC5C5\\uC9C0\\uC2DC\\uBAA8\\uC758\\uC804\\uAC1C\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: contractSearch,\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"\\uC791\\uC5C5\\uC9C0\\uC2DC\\uD544\\uC694\\uBAA9\\uB85D\\uC870\\uD68C\")), React.createElement(MyDialog, {\n    open: searchOpenDialog,\n    close: close,\n    maxWidth: '200px',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(WorkOrderDialog, {\n    data: data,\n    close: close,\n    setList: setList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }))));\n}\n\nexport default WorkInstruction;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68react/src/erp/logistic/production/page/WorkInstruction/WorkInstruction.js"],"names":["Button","React","useState","useCallback","MyGrid","MyDialog","Axios","WorkOrderDialog","Swal","WorkInstruction","props","list","setList","size","setSize","searchOpenDialog","setSearchOpenDialog","data","setData","workOderableGridApi","setWorkOderableGridApi","column","columnDefs","headerName","field","suppressSizeToFit","headerCheckboxSelection","headerCheckboxSelectionFilteredOnly","suppressRowClickSelection","checkboxSelection","onCellClicked","params","console","log","workSimul","getSelectedRows","fire","customerSearchClick","close","contractSearch","get","then","response","result","catch","e","orderGirdApi","api","marginRight","marginTop"],"mappings":"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","sourcesContent":["import { Button } from '@material-ui/core';\nimport React, { useState, useCallback } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport Axios from 'axios';\nimport WorkOrderDialog from './WorkOrderDialog';\nimport Swal from 'sweetalert2';\n\nfunction WorkInstruction(props) {\n    const [list, setList] = useState([]);\n    const [size, setSize] = useState('50vh');\n    const [searchOpenDialog, setSearchOpenDialog] = useState(false);\n    const [data, setData] = useState(null);\n    const [workOderableGridApi, setWorkOderableGridApi] = useState(null);\n\n    const column = {\n        columnDefs: [\n            {\n                headerName: '소요량취합번호',\n                field: 'mrpGatheringNo',\n                suppressSizeToFit: true,\n                headerCheckboxSelection: false,\n                headerCheckboxSelectionFilteredOnly: true,\n                suppressRowClickSelection: true,\n                checkboxSelection: true\n            },\n            { headerName: '품목분류', field: 'itemClassification' },\n            { headerName: '품목코드', field: 'itemCode' },\n            { headerName: '품목명', field: 'itemName' },\n            { headerName: '단위', field: 'unitOfMrp' },\n            { headerName: '필요수량', field: 'requiredAmount' },\n            { headerName: '작업지시기한', field: 'orderDate' },\n            { headerName: '작업완료기한', field: 'requiredDate' }\n        ]\n    };\n\n    const onCellClicked = params => {\n        console.log('onCellClicked');\n        setData(params);\n    };\n\n    const workSimul = useCallback(() => {\n\n        const data = workOderableGridApi.getSelectedRows()[0];\n\n        setData(data);\n\n        if(!data){\n            return Swal.fire('오류','작업목록선택','error');\n        }\n        customerSearchClick();\n    },[workOderableGridApi]);\n\n    const customerSearchClick = () => {\n        setSearchOpenDialog(true);\n    };\n\n    const close = () => {\n        setSearchOpenDialog(false);\n    };\n\n    const contractSearch = () => {\n        Axios.get('http://localhost:8282/logi/production/getWorkOrderableMrpList')\n            .then(response => setList(response.data.result))\n            .catch(e => {\n                Swal.fire('오류', e, 'error');\n            });\n    };\n\n    const orderGirdApi = params => {\n        setWorkOderableGridApi(params.api);\n    };\n\n    return (\n        <>\n            <div>\n                <MyGrid\n                    column={column}\n                    title={'작업지시 필요 리스트 ( MRP 취합 기반 )'}\n                    list={list}\n                    onCellClicked={onCellClicked}\n                    rowSelection=\"single\"\n                    size={size}\n                    api={orderGirdApi}\n                >\n                    <Button variant=\"contained\" color=\"secondary\" onClick={workSimul}\n                                        style={{ marginRight: '1vh', marginTop: '1vh' }}\n                                        >\n                        작업지시모의전개\n                    </Button>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={contractSearch}\n                                        style={{ marginRight: '1vh', marginTop: '1vh' }}\n                                        >\n                        작업지시필요목록조회\n                    </Button>\n                </MyGrid>\n                <MyDialog open={searchOpenDialog} close={close} maxWidth={'200px'}>\n                    <WorkOrderDialog data={data} close={close} setList={setList}/>\n                </MyDialog>\n            </div>\n        </>\n    );\n}\n\nexport default WorkInstruction\n;\n"]},"metadata":{},"sourceType":"module"}