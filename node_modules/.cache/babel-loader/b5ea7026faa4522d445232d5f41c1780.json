{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bouncer = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Modes_1 = require(\"../../Enums/Modes\");\n\nconst Utils_2 = require(\"../../Utils\");\n\nconst Modes_2 = require(\"../../Enums/Modes\");\n\nconst Types_1 = require(\"../../Enums/Types\");\n\nclass Bouncer {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const options = container.options;\n    const mouse = container.interactivity.mouse;\n    const events = options.interactivity.events;\n    const divs = events.onDiv;\n    return mouse.position && events.onHover.enable && Utils_2.Utils.isInArray(Modes_1.HoverMode.bounce, events.onHover.mode) || Utils_2.Utils.isDivModeEnabled(Modes_2.DivMode.bounce, divs);\n  }\n\n  interact() {\n    const container = this.container;\n    const options = container.options;\n    const events = options.interactivity.events;\n    const mouseMoveStatus = container.interactivity.status === Utils_1.Constants.mouseMoveEvent;\n    const hoverEnabled = events.onHover.enable;\n    const hoverMode = events.onHover.mode;\n    const divs = events.onDiv;\n\n    if (mouseMoveStatus && hoverEnabled && Utils_2.Utils.isInArray(Modes_1.HoverMode.bounce, hoverMode)) {\n      this.processMouseBounce();\n    } else {\n      Utils_2.Utils.divModeExecute(Modes_2.DivMode.bounce, divs, (selector, div) => this.singleSelectorBounce(selector, div));\n    }\n  }\n\n  reset() {}\n\n  processMouseBounce() {\n    const container = this.container;\n    const pxRatio = container.retina.pixelRatio;\n    const tolerance = 10 * pxRatio;\n    const mousePos = container.interactivity.mouse.position;\n    const radius = container.retina.bounceModeDistance;\n\n    if (mousePos) {\n      this.processBounce(mousePos, radius, new Utils_2.Circle(mousePos.x, mousePos.y, radius + tolerance));\n    }\n  }\n\n  singleSelectorBounce(selector, div) {\n    const container = this.container;\n    const query = document.querySelectorAll(selector);\n\n    if (!query.length) {\n      return;\n    }\n\n    query.forEach(item => {\n      const elem = item;\n      const pxRatio = container.retina.pixelRatio;\n      const pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      };\n      const radius = elem.offsetWidth / 2 * pxRatio;\n      const tolerance = 10 * pxRatio;\n      const area = div.type === Types_1.DivType.circle ? new Utils_2.Circle(pos.x, pos.y, radius + tolerance) : new Utils_2.Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n      this.processBounce(pos, radius, area);\n    });\n  }\n\n  processBounce(position, radius, area) {\n    const query = this.container.particles.quadTree.query(area);\n\n    for (const particle of query) {\n      if (area instanceof Utils_2.Circle) {\n        Utils_2.Utils.circleBounce(Utils_2.Utils.circleBounceDataFromParticle(particle), {\n          position,\n          radius,\n          velocity: {\n            horizontal: 0,\n            vertical: 0\n          },\n          factor: {\n            horizontal: 0,\n            vertical: 0\n          }\n        });\n      } else if (area instanceof Utils_2.Rectangle) {\n        Utils_2.Utils.rectBounce(particle, Utils_2.Utils.calculateBounds(position, radius));\n      }\n    }\n  }\n\n}\n\nexports.Bouncer = Bouncer;","map":null,"metadata":{},"sourceType":"script"}