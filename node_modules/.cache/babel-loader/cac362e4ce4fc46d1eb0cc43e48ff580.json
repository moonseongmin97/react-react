{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\purchase\\\\page\\\\OrderRegister\\\\OrderRegisterContainer.js\";\n//2020-12-02 64기 정준혁\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport MyCalendar from 'util/LogiUtil/MyCalendar';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { Button } from '@material-ui/core';\nimport moment from 'moment';\nimport orderListColumn from './orderListColumn';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport ShowOrderDialog from './ShowOrderDialog';\nimport OptionOrderDialog from './OptionOrderDialog';\nimport Swal from 'sweetalert2';\nimport useAsync from 'util/useAsync';\nimport * as api from 'erp/logistic/purchase/api';\n\nconst OrderRegisterContainer = () => {\n  let today = moment(new Date()).format('yyyy-MM-DD');\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n  const [orderList, setOrderList] = useState(null);\n  const [orderOpenList, setOrderOpenList] = useState([]);\n  const [orderListgridRow, setOrderListgridRow] = useState();\n  const [showOrderDialog, setShowOrderDialog] = useState(false);\n  const [optionOrderDialog, setOptionOrderDialog] = useState(false);\n  const [mrpGatheringNoList, setMrpGatheringNoList] = useState();\n\n  const basicInfo = (startDate, endDate) => {\n    setStartDate(startDate);\n    setEndDate(endDate);\n  };\n\n  const showClose = () => {\n    setShowOrderDialog(false);\n  };\n\n  const optionClose = () => {\n    setOptionOrderDialog(false);\n  };\n\n  const onChangeDate = e => {\n    e.target.id === 'startDate' ? setStartDate(e.target.value) : setEndDate(e.target.value);\n  };\n\n  const [clickOrderList, onClickGetOrderListFetch] = useAsync(param => api.onClickGetOrderList(param), [], true);\n  const onClickGetOrderList = useCallback(() => {\n    const params = {\n      startDate: startDate,\n      endDate: endDate\n    };\n    onClickGetOrderListFetch(params);\n  }, [startDate, endDate, onClickGetOrderListFetch]);\n  useEffect(() => {\n    console.log(clickOrderList.data);\n\n    if (clickOrderList.data) {\n      if (clickOrderList.data.errorCode < 0) {\n        return Swal.fire({\n          icon: 'error',\n          title: clickOrderList.data.errorMsg\n        });\n      }\n\n      setOrderList(clickOrderList.data.gridRowJson);\n    }\n\n    if (clickOrderList.error) {\n      Swal.fire({\n        icon: 'error',\n        title: clickOrderList.error\n      });\n    }\n  }, [clickOrderList.data, clickOrderList.error]);\n\n  const orderGirdApi = params => {\n    setOrderListgridRow(params.api);\n  };\n\n  const [clickOrderOpen, onClickOrderOpenFetch] = useAsync(param => api.onClickOrderOpen(param), [], true);\n  const onClickOrderOpen = useCallback(() => {\n    const selectNodes = orderListgridRow.getSelectedNodes();\n    const rowsCount = orderListgridRow.getDisplayedRowCount();\n\n    if (rowsCount === 0) {\n      return Swal.fire({\n        icon: 'error',\n        title: '조회 후 진행해 주세요'\n      });\n    } else if (selectNodes.length === 0) {\n      return Swal.fire({\n        icon: 'error',\n        title: '선택 후 진행해 주세요'\n      });\n    }\n\n    let mrpGatheringNoArr = [];\n\n    for (let selectNode of selectNodes) {\n      mrpGatheringNoArr.push(selectNode.data.mrpGatheringNo);\n    }\n\n    setMrpGatheringNoList(mrpGatheringNoArr);\n    let param = {\n      mrpGatheringNoList: mrpGatheringNoArr.join(',')\n    };\n    onClickOrderOpenFetch(param);\n  }, [onClickOrderOpenFetch, orderListgridRow]);\n  useEffect(() => {\n    if (clickOrderOpen.data) {\n      if (clickOrderOpen.data.errorCode < 0) {\n        return Swal.fire({\n          icon: 'error',\n          title: clickOrderOpen.data.errorMsg\n        });\n      }\n\n      setOrderOpenList(clickOrderOpen.data.result);\n      setShowOrderDialog(true);\n    }\n\n    if (clickOrderOpen.error) {\n      Swal.fire({\n        icon: 'error',\n        title: clickOrderOpen.error\n      });\n    }\n  }, [clickOrderOpen]); //의존성 때문에 발주 안됨 확인\n\n  const onClickOptionOrderOpen = useCallback(() => {\n    setOptionOrderDialog(true);\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(MyGrid, {\n    column: orderListColumn,\n    title: '발주 및 재고처리',\n    list: orderList,\n    onCellClicked: undefined,\n    rowSelection: \"multiple\",\n    api: orderGirdApi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      float: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: onClickOrderOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"\\uBAA8\\uC758\\uC7AC\\uACE0\\uCC98\\uB9AC \\uBC0F \\uCDE8\\uD569\\uBC1C\\uC8FC\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: onClickOptionOrderOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"\\uC784\\uC758 \\uBC1C\\uC8FC\")), React.createElement(MyCalendar, {\n    onChangeDate: onChangeDate,\n    basicInfo: basicInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginTop: '1vh'\n    },\n    onClick: onClickGetOrderList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"\\uC7AC\\uACE0\\uCC98\\uB9AC/\\uBC1C\\uC8FC\\uD544\\uC694 \\uBAA9\\uB85D\\uC870\\uD68C\")), React.createElement(MyDialog, {\n    open: showOrderDialog,\n    close: showClose,\n    maxWidth: '150%',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(ShowOrderDialog, {\n    girdData: orderOpenList,\n    close: showClose,\n    onClickGetOrderList: onClickGetOrderList,\n    mrpGatheringNoList: mrpGatheringNoList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }))), React.createElement(MyDialog, {\n    open: optionOrderDialog,\n    close: optionClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(OptionOrderDialog, {\n    close: optionClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }))));\n};\n\nexport default OrderRegisterContainer;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/purchase/page/OrderRegister/OrderRegisterContainer.js"],"names":["React","useState","useCallback","useEffect","axios","MyCalendar","MyGrid","Button","moment","orderListColumn","MyDialog","ShowOrderDialog","OptionOrderDialog","Swal","useAsync","api","OrderRegisterContainer","today","Date","format","startDate","setStartDate","endDate","setEndDate","orderList","setOrderList","orderOpenList","setOrderOpenList","orderListgridRow","setOrderListgridRow","showOrderDialog","setShowOrderDialog","optionOrderDialog","setOptionOrderDialog","mrpGatheringNoList","setMrpGatheringNoList","basicInfo","showClose","optionClose","onChangeDate","e","target","id","value","clickOrderList","onClickGetOrderListFetch","param","onClickGetOrderList","params","console","log","data","errorCode","fire","icon","title","errorMsg","gridRowJson","error","orderGirdApi","clickOrderOpen","onClickOrderOpenFetch","onClickOrderOpen","selectNodes","getSelectedNodes","rowsCount","getDisplayedRowCount","length","mrpGatheringNoArr","selectNode","push","mrpGatheringNo","join","result","onClickOptionOrderOpen","undefined","float","marginRight","marginTop"],"mappings":"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","sourcesContent":["//2020-12-02 64기 정준혁\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport MyCalendar from 'util/LogiUtil/MyCalendar';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { Button } from '@material-ui/core';\nimport moment from 'moment';\nimport orderListColumn from './orderListColumn';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport ShowOrderDialog from './ShowOrderDialog';\nimport OptionOrderDialog from './OptionOrderDialog';\nimport Swal from 'sweetalert2';\nimport useAsync from 'util/useAsync';\nimport * as api from 'erp/logistic/purchase/api';\n\nconst OrderRegisterContainer = () => {\n    let today = moment(new Date()).format('yyyy-MM-DD');\n    const [startDate, setStartDate] = useState();\n    const [endDate, setEndDate] = useState();\n    const [orderList, setOrderList] = useState(null);\n    const [orderOpenList, setOrderOpenList] = useState([]);\n    const [orderListgridRow, setOrderListgridRow] = useState();\n    const [showOrderDialog, setShowOrderDialog] = useState(false);\n    const [optionOrderDialog, setOptionOrderDialog] = useState(false);\n    const [ mrpGatheringNoList, setMrpGatheringNoList] = useState();\n\n    const basicInfo = (startDate, endDate) => {\n        setStartDate(startDate);\n        setEndDate(endDate);\n    };\n\n    const showClose = () => {\n        setShowOrderDialog(false);\n    };\n    const optionClose = () => {\n        setOptionOrderDialog(false);\n    };\n    const onChangeDate = e => {\n        e.target.id === 'startDate' ? setStartDate(e.target.value) : setEndDate(e.target.value);\n    };\n\n    const [clickOrderList, onClickGetOrderListFetch] = useAsync((param) =>api.onClickGetOrderList(param), [], true);\n    const onClickGetOrderList = useCallback(() => {\n\n        const params = {\n            startDate: startDate,\n            endDate: endDate\n        }\n        onClickGetOrderListFetch(params);\n          \n    }, [startDate, endDate, onClickGetOrderListFetch]);\n    useEffect(() => {\n        console.log(clickOrderList.data);\n        if(clickOrderList.data){\n        if (clickOrderList.data.errorCode < 0) {\n            return Swal.fire({\n                icon: 'error',\n                title: clickOrderList.data.errorMsg\n            });\n        }\n        setOrderList(clickOrderList.data.gridRowJson);\n    }\n\n    if(clickOrderList.error){\n        Swal.fire({\n            icon: 'error',\n            title: clickOrderList.error\n        });\n    }\n    },[clickOrderList.data, clickOrderList.error]);\n\n    const orderGirdApi = params => {\n        setOrderListgridRow(params.api);\n    };\n\n    const [clickOrderOpen, onClickOrderOpenFetch] = \n    useAsync((param) =>api.onClickOrderOpen(param), [], true);\n    \n    const onClickOrderOpen = useCallback(() => {\n        const selectNodes = orderListgridRow.getSelectedNodes();\n        const rowsCount = orderListgridRow.getDisplayedRowCount();\n        if (rowsCount === 0) {\n            return Swal.fire({\n                icon: 'error',\n                title: '조회 후 진행해 주세요'\n            });\n        } else if (selectNodes.length === 0) {\n            return Swal.fire({\n                icon: 'error',\n                title: '선택 후 진행해 주세요'\n            });\n        }\n        let mrpGatheringNoArr = [];\n        for (let selectNode of selectNodes) {\n            mrpGatheringNoArr.push(selectNode.data.mrpGatheringNo);\n        }\n\n        setMrpGatheringNoList(mrpGatheringNoArr);\n\n        let param = {\n            mrpGatheringNoList: mrpGatheringNoArr.join(',')\n        }\n        onClickOrderOpenFetch(param);\n\n    },[onClickOrderOpenFetch, orderListgridRow]);\n    useEffect(() => {\n\n        if(clickOrderOpen.data){\n        if (clickOrderOpen.data.errorCode < 0) {\n            return Swal.fire({\n                icon: 'error',\n                title: clickOrderOpen.data.errorMsg\n            });\n        }\n       \n        setOrderOpenList(clickOrderOpen.data.result);\n        setShowOrderDialog(true);\n    }\n\n    if(clickOrderOpen.error){\n    Swal.fire({\n        icon: 'error',\n        title: clickOrderOpen.error\n    });\n}\n    },[clickOrderOpen]); //의존성 때문에 발주 안됨 확인\n\n\n\n    const onClickOptionOrderOpen = useCallback(() => {\n        setOptionOrderDialog(true);\n    }, []);\n    return (\n        <>\n            <MyGrid\n                column={orderListColumn}\n                title={'발주 및 재고처리'}\n                list={orderList}\n                onCellClicked={undefined}\n                rowSelection=\"multiple\"\n                api={orderGirdApi}\n            >\n                <div style={{ float: 'left' }}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ marginRight: '1vh', marginTop: '1vh' }}\n                        onClick={onClickOrderOpen}\n                    >\n                        모의재고처리 및 취합발주\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ marginRight: '1vh', marginTop: '1vh' }}\n                        onClick={onClickOptionOrderOpen}\n                    >\n                        임의 발주\n                    </Button>\n                </div>\n                <MyCalendar onChangeDate={onChangeDate} basicInfo={basicInfo} />\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginTop: '1vh' }}\n                    onClick={onClickGetOrderList}\n                >\n                    재고처리/발주필요 목록조회\n                </Button>\n            </MyGrid>\n            <MyDialog open={showOrderDialog} close={showClose} maxWidth={'150%'}>\n                <div>\n                    <ShowOrderDialog\n                        girdData={orderOpenList}\n                        close={showClose}\n                        onClickGetOrderList={onClickGetOrderList}\n                        mrpGatheringNoList={mrpGatheringNoList}\n                    />\n                </div>\n            </MyDialog>\n            <MyDialog open={optionOrderDialog} close={optionClose}>\n                <div>\n                    <OptionOrderDialog close={optionClose} />\n                </div>\n            </MyDialog>\n        </>\n    );\n};\n\nexport default OrderRegisterContainer;\n"]},"metadata":{},"sourceType":"module"}