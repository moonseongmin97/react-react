{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberUtils = void 0;\n\nconst Directions_1 = require(\"../Enums/Directions\");\n\nclass NumberUtils {\n  static clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  }\n\n  static mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n  }\n\n  static randomInRange(r1, r2) {\n    const max = Math.max(r1, r2),\n          min = Math.min(r1, r2);\n    return Math.random() * (max - min) + min;\n  }\n\n  static getValue(options) {\n    const random = options.random;\n    const {\n      enable,\n      minimumValue\n    } = typeof random === \"boolean\" ? {\n      enable: random,\n      minimumValue: 0\n    } : random;\n    return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n  }\n\n  static getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return {\n      dx: dx,\n      dy: dy,\n      distance: Math.sqrt(dx * dx + dy * dy)\n    };\n  }\n\n  static getDistance(pointA, pointB) {\n    return NumberUtils.getDistances(pointA, pointB).distance;\n  }\n\n  static getParticleBaseVelocity(particle) {\n    let velocityBase;\n\n    switch (particle.direction) {\n      case Directions_1.MoveDirection.top:\n        velocityBase = {\n          x: 0,\n          y: -1\n        };\n        break;\n\n      case Directions_1.MoveDirection.topRight:\n        velocityBase = {\n          x: 0.5,\n          y: -0.5\n        };\n        break;\n\n      case Directions_1.MoveDirection.right:\n        velocityBase = {\n          x: 1,\n          y: -0\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottomRight:\n        velocityBase = {\n          x: 0.5,\n          y: 0.5\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottom:\n        velocityBase = {\n          x: 0,\n          y: 1\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottomLeft:\n        velocityBase = {\n          x: -0.5,\n          y: 1\n        };\n        break;\n\n      case Directions_1.MoveDirection.left:\n        velocityBase = {\n          x: -1,\n          y: 0\n        };\n        break;\n\n      case Directions_1.MoveDirection.topLeft:\n        velocityBase = {\n          x: -0.5,\n          y: -0.5\n        };\n        break;\n\n      default:\n        velocityBase = {\n          x: 0,\n          y: 0\n        };\n        break;\n    }\n\n    return velocityBase;\n  }\n\n  static rotateVelocity(velocity, angle) {\n    return {\n      horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n      vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n    };\n  }\n\n  static collisionVelocity(v1, v2, m1, m2) {\n    return {\n      horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n      vertical: v1.vertical\n    };\n  }\n\n}\n\nexports.NumberUtils = NumberUtils;","map":null,"metadata":{},"sourceType":"script"}