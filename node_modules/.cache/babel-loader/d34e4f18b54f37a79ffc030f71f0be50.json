{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\hr\\\\salary\\\\page\\\\SalaryManage\\\\CloseSalaryContainer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { createStructuredSelector } from \"reselect\";\nimport CloseSalary from \"./CloseSalary\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { salaryListRequest, closeSalaryWithSlipRequest } from \"erp/hr/salary/saga/CloseSalarySaga\";\nimport { selectSalaryList, selectedErrorCD } from \"./selector\";\nimport { insertSalarySlipStart } from \"erp/account/account/reducer/AccountReducer\";\nimport useDate from \"./useDate\";\n\nconst CloseSalaryContainer = props => {\n  const {\n    salaryList,\n    salaryListRequest,\n    closeSalaryWithSlipRequest,\n    flag //이건 마감이후 전표발행으로 바로 넘어갈때 마감에서 에러가 발생했을때 전표발행을 막기위한 일종의 표식\n\n  } = props;\n  const dispatch = useDispatch();\n  const [date, setDate] = useState(\"\");\n  const [dept, setDept] = useState(\"\");\n  const [empCodes, setEmpCodes] = useState();\n  const [event, setEvent] = useState();\n  const [journalLists, setJournalLists] = useState([//분개는 단 두가지만 표현한다 현금/ 공제금액 그리고 이부분들은 set을 사용하면 작동안된다.\n  {\n    journalNo: \"NEW JOURNAL\",\n    // 여기서 분개 번호가 만들어짐.\n    slipNo: \"NEW\",\n    balanceDivision: \"차변\",\n    accountCode: \"0603\",\n    //급여는 노무비로 넣었다.\n    accountName: \"급여\",\n    customerCode: null,\n    leftDebtorPrice: \"\",\n    // 차변\n    rightCreditsPrice: 0 // 대변\n\n  }, {\n    journalNo: \"NEW JOURNAL\",\n    slipNo: \"NEW\",\n    balanceDivision: \"대변\",\n    accountCode: \"0101\",\n    //급여에 대한 현금\n    accountName: \"현금\",\n    customerCode: null,\n    leftDebtorPrice: 0,\n    // 차변\n    rightCreditsPrice: \"\" // 대변\n\n  }, {\n    journalNo: \"NEW JOURNAL\",\n    slipNo: \"NEW\",\n    balanceDivision: \"차변\",\n    accountCode: \"0621\",\n    //공제금을 세부적으로 구분하지 않고 보험료로 전표발행\n    accountName: \"보험료\",\n    customerCode: null,\n    leftDebtorPrice: \"\",\n    // 차변\n    rightCreditsPrice: 0 // 대변\n\n  }, {\n    journalNo: \"NEW JOURNAL\",\n    slipNo: \"NEW\",\n    balanceDivision: \"대변\",\n    accountCode: \"0101\",\n    //공제금에 대한 현금\n    accountName: \"현금\",\n    customerCode: null,\n    leftDebtorPrice: 0,\n    // 차변\n    rightCreditsPrice: \"\" // 대변\n\n  }]);\n  const [slipData, setSlipData] = useState([{\n    slipNo: \"NEW\",\n    // 전표 번호 생성\n    slipType: \"대체\",\n    accountPeriodNo: \"4\",\n    //이건 나중에 알아서 수정\n    reportingDate: useDate(),\n    reportingEmpCode: sessionStorage.getItem(\"empCodeInfo_token\"),\n    // session단위로 올라간 empCode\n    reportingEmpName: sessionStorage.getItem(\"empNameInfo_token\"),\n    slipStatus: \"미결\",\n    deptCode: sessionStorage.getItem(\"deptCodeInfo_token\"),\n    // session단위로 올라간 deptCode\n    journalList: []\n  }]); //전표발행 \n\n  const makeJournal = empcode1 => {\n    //체크된 월급여 데이터를 가지고 전표발행을 위한 데이터 등록\n    const realSalary = empcode1.reduce((stack, el) => {\n      return stack + parseInt(el.realSalary);\n    }, 0);\n    const totalDeduction = empcode1.reduce((stack, el) => {\n      return stack + parseInt(el.totalDeduction);\n    }, 0);\n    const newJournal = journalLists.map((journalState, index) => {\n      switch (index) {\n        case 0:\n          return { ...journalState,\n            leftDebtorPrice: realSalary\n          };\n\n        case 1:\n          return { ...journalState,\n            rightCreditsPrice: realSalary\n          };\n\n        case 2:\n          return { ...journalState,\n            leftDebtorPrice: totalDeduction\n          };\n\n        case 3:\n          return { ...journalState,\n            rightCreditsPrice: totalDeduction\n          };\n\n        default:\n          return { ...journalState\n          };\n      }\n    });\n    const slip = slipData.map(newSlip => {\n      return { ...newSlip,\n        journalList: newJournal\n      };\n    });\n    slipDataInsert(slip);\n  };\n\n  const slipDataInsert = slip => {\n    props.insertSalarySlipStart({\n      slipData: slip\n    });\n  }; //부서,날짜 상태값이 바뀔때마다 state에 변경된값 입력 \n\n\n  const handleChange = (event, actionMeta) => {\n    if (actionMeta.name === \"dept\") {\n      setDept(event.value);\n    } else {\n      setDate(event.value);\n    }\n  }; //조회버튼 시작 \n\n\n  function findCloseSalary() {\n    if (dept.length === 0) {\n      alert(\" 부서를 선택해주세요 \");\n      return;\n    } else if (date.length === 0) {\n      alert(\" 조회할 월을 선택해주세요 \");\n      return;\n    } else {\n      salaryListRequest({\n        date,\n        dept\n      });\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(CloseSalary, {\n    handleChange: handleChange,\n    salaryList: salaryList,\n    findCloseSalary: findCloseSalary,\n    setEvent: setEvent,\n    empCodes: empCodes,\n    closeSalaryWithSlipRequest: closeSalaryWithSlipRequest,\n    makeJournal: makeJournal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }));\n}; // 리덕스의 store가 이거로 react의 props로 넘어감\n\n\nconst mapStateToProps = createStructuredSelector({\n  salaryList: selectSalaryList,\n  flag: selectedErrorCD\n}); // 리액트와 스토어가 소통하는 구간\n\nexport default connect(mapStateToProps, {\n  salaryListRequest,\n  closeSalaryWithSlipRequest,\n  insertSalarySlipStart\n})(CloseSalaryContainer);","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/hr/salary/page/SalaryManage/CloseSalaryContainer.js"],"names":["React","useState","useEffect","createStructuredSelector","CloseSalary","connect","useDispatch","salaryListRequest","closeSalaryWithSlipRequest","selectSalaryList","selectedErrorCD","insertSalarySlipStart","useDate","CloseSalaryContainer","props","salaryList","flag","dispatch","date","setDate","dept","setDept","empCodes","setEmpCodes","event","setEvent","journalLists","setJournalLists","journalNo","slipNo","balanceDivision","accountCode","accountName","customerCode","leftDebtorPrice","rightCreditsPrice","slipData","setSlipData","slipType","accountPeriodNo","reportingDate","reportingEmpCode","sessionStorage","getItem","reportingEmpName","slipStatus","deptCode","journalList","makeJournal","empcode1","realSalary","reduce","stack","el","parseInt","totalDeduction","newJournal","map","journalState","index","slip","newSlip","slipDataInsert","handleChange","actionMeta","name","value","findCloseSalary","length","alert","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SACEC,iBADF,EAEEC,0BAFF,QAGO,oCAHP;AAIA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,YAAlD;AACA,SAASC,qBAAT,QAAsC,4CAAtC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,oBAAoB,GAAGC,KAAK,IAAI;AACpC,QAAM;AACJC,IAAAA,UADI;AAEJR,IAAAA,iBAFI;AAGJC,IAAAA,0BAHI;AAIJQ,IAAAA,IAJI,CAIE;;AAJF,MAKFF,KALJ;AAOA,QAAMG,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,EAAxC;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,EAAlC;AACA,QAAM,CAACyB,YAAD,EAAeC,eAAf,IAAkC1B,QAAQ,CAAC,CAC/C;AACA;AACE2B,IAAAA,SAAS,EAAE,aADb;AAC4B;AAC1BC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,IALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,EAPnB;AAOuB;AACrBC,IAAAA,iBAAiB,EAAE,CARrB,CAQwB;;AARxB,GAF+C,EAY/C;AACEP,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,IALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,CAPnB;AAOsB;AACpBC,IAAAA,iBAAiB,EAAE,EARrB,CAQyB;;AARzB,GAZ+C,EAsB/C;AACEP,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,KALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,EAPnB;AAOuB;AACrBC,IAAAA,iBAAiB,EAAE,CARrB,CAQwB;;AARxB,GAtB+C,EAgC/C;AACEP,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,IALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,CAPnB;AAOsB;AACpBC,IAAAA,iBAAiB,EAAE,EARrB,CAQyB;;AARzB,GAhC+C,CAAD,CAAhD;AA4CA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpC,QAAQ,CAAC,CACvC;AACE4B,IAAAA,MAAM,EAAE,KADV;AACiB;AACfS,IAAAA,QAAQ,EAAE,IAFZ;AAGEC,IAAAA,eAAe,EAAE,GAHnB;AAGwB;AACtBC,IAAAA,aAAa,EAAE5B,OAAO,EAJxB;AAKE6B,IAAAA,gBAAgB,EAAEC,cAAc,CAACC,OAAf,CAAuB,mBAAvB,CALpB;AAKiE;AAC/DC,IAAAA,gBAAgB,EAAEF,cAAc,CAACC,OAAf,CAAuB,mBAAvB,CANpB;AAOEE,IAAAA,UAAU,EAAE,IAPd;AAQEC,IAAAA,QAAQ,EAAEJ,cAAc,CAACC,OAAf,CAAuB,oBAAvB,CARZ;AAQ0D;AACxDI,IAAAA,WAAW,EAAE;AATf,GADuC,CAAD,CAAxC,CAzDoC,CAuEpC;;AACA,QAAMC,WAAW,GAAGC,QAAQ,IAAI;AAC9B;AACA,UAAMC,UAAU,GAAGD,QAAQ,CAACE,MAAT,CAAgB,CAACC,KAAD,EAAQC,EAAR,KAAe;AAChD,aAAOD,KAAK,GAAGE,QAAQ,CAACD,EAAE,CAACH,UAAJ,CAAvB;AACD,KAFkB,EAEhB,CAFgB,CAAnB;AAGA,UAAMK,cAAc,GAAGN,QAAQ,CAACE,MAAT,CAAgB,CAACC,KAAD,EAAQC,EAAR,KAAe;AACpD,aAAOD,KAAK,GAAGE,QAAQ,CAACD,EAAE,CAACE,cAAJ,CAAvB;AACD,KAFsB,EAEpB,CAFoB,CAAvB;AAIA,UAAMC,UAAU,GAAG9B,YAAY,CAAC+B,GAAb,CAAiB,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC3D,cAAQA,KAAR;AACE,aAAK,CAAL;AACE,iBAAO,EACL,GAAGD,YADE;AAELxB,YAAAA,eAAe,EAAEgB;AAFZ,WAAP;;AAKF,aAAK,CAAL;AACE,iBAAO,EACL,GAAGQ,YADE;AAELvB,YAAAA,iBAAiB,EAAEe;AAFd,WAAP;;AAKF,aAAK,CAAL;AACE,iBAAO,EACL,GAAGQ,YADE;AAELxB,YAAAA,eAAe,EAAEqB;AAFZ,WAAP;;AAKF,aAAK,CAAL;AACE,iBAAO,EACL,GAAGG,YADE;AAELvB,YAAAA,iBAAiB,EAAEoB;AAFd,WAAP;;AAKF;AACE,iBAAO,EAAE,GAAGG;AAAL,WAAP;AA1BJ;AA4BD,KA7BkB,CAAnB;AA8BA,UAAME,IAAI,GAAGxB,QAAQ,CAACqB,GAAT,CAAaI,OAAO,IAAI;AACnC,aAAO,EACL,GAAGA,OADE;AAELd,QAAAA,WAAW,EAAES;AAFR,OAAP;AAID,KALY,CAAb;AASAM,IAAAA,cAAc,CAACF,IAAD,CAAd;AACD,GAjDD;;AAmDA,QAAME,cAAc,GAAIF,IAAD,IAAU;AAC/B9C,IAAAA,KAAK,CAACH,qBAAN,CAA4B;AAAEyB,MAAAA,QAAQ,EAAEwB;AAAZ,KAA5B;AACD,GAFD,CA3HoC,CAgIpC;;;AACA,QAAMG,YAAY,GAAG,CAACvC,KAAD,EAAQwC,UAAR,KAAuB;AAC1C,QAAIA,UAAU,CAACC,IAAX,KAAoB,MAAxB,EAAgC;AAC9B5C,MAAAA,OAAO,CAACG,KAAK,CAAC0C,KAAP,CAAP;AACD,KAFD,MAEO;AACL/C,MAAAA,OAAO,CAACK,KAAK,CAAC0C,KAAP,CAAP;AACD;AACF,GAND,CAjIoC,CA0IpC;;;AACA,WAASC,eAAT,GAA2B;AACzB,QAAI/C,IAAI,CAACgD,MAAL,KAAgB,CAApB,EAAuB;AACrBC,MAAAA,KAAK,CAAC,cAAD,CAAL;AACA;AACD,KAHD,MAGO,IAAInD,IAAI,CAACkD,MAAL,KAAgB,CAApB,EAAuB;AAC5BC,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;AACD,KAHM,MAGA;AACL9D,MAAAA,iBAAiB,CAAC;AAAEW,QAAAA,IAAF;AAAQE,QAAAA;AAAR,OAAD,CAAjB;AACD;AACF;;AAKD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,YAAY,EAAE2C,YADhB;AAEE,IAAA,UAAU,EAAEhD,UAFd;AAGE,IAAA,eAAe,EAAEoD,eAHnB;AAIE,IAAA,QAAQ,EAAE1C,QAJZ;AAKE,IAAA,QAAQ,EAAEH,QALZ;AAME,IAAA,0BAA0B,EAAEd,0BAN9B;AAOE,IAAA,WAAW,EAAEwC,WAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAaD,CAvKD,C,CA0KA;;;AACA,MAAMsB,eAAe,GAAGnE,wBAAwB,CAAC;AAC/CY,EAAAA,UAAU,EAAEN,gBADmC;AAE/CO,EAAAA,IAAI,EAAEN;AAFyC,CAAD,CAAhD,C,CAMA;;AACA,eAAeL,OAAO,CAACiE,eAAD,EAAkB;AACtC/D,EAAAA,iBADsC;AAEtCC,EAAAA,0BAFsC;AAGtCG,EAAAA;AAHsC,CAAlB,CAAP,CAIZE,oBAJY,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { createStructuredSelector } from \"reselect\";\nimport CloseSalary from \"./CloseSalary\";\nimport { connect, useDispatch } from \"react-redux\";\nimport {\n  salaryListRequest,\n  closeSalaryWithSlipRequest,\n} from \"erp/hr/salary/saga/CloseSalarySaga\";\nimport { selectSalaryList, selectedErrorCD } from \"./selector\";\nimport { insertSalarySlipStart } from \"erp/account/account/reducer/AccountReducer\";\nimport useDate from \"./useDate\";\n\nconst CloseSalaryContainer = props => {\n  const {\n    salaryList,\n    salaryListRequest,\n    closeSalaryWithSlipRequest,\n    flag, //이건 마감이후 전표발행으로 바로 넘어갈때 마감에서 에러가 발생했을때 전표발행을 막기위한 일종의 표식\n  } = props;\n\n  const dispatch = useDispatch();\n  const [date, setDate] = useState(\"\");\n  const [dept, setDept] = useState(\"\");\n  const [empCodes, setEmpCodes] = useState();\n  const [event, setEvent] = useState();\n  const [journalLists, setJournalLists] = useState([\n    //분개는 단 두가지만 표현한다 현금/ 공제금액 그리고 이부분들은 set을 사용하면 작동안된다.\n    {\n      journalNo: \"NEW JOURNAL\", // 여기서 분개 번호가 만들어짐.\n      slipNo: \"NEW\",\n      balanceDivision: \"차변\",\n      accountCode: \"0603\", //급여는 노무비로 넣었다.\n      accountName: \"급여\",\n      customerCode: null,\n      leftDebtorPrice: \"\", // 차변\n      rightCreditsPrice: 0, // 대변\n    },\n    {\n      journalNo: \"NEW JOURNAL\",\n      slipNo: \"NEW\",\n      balanceDivision: \"대변\",\n      accountCode: \"0101\", //급여에 대한 현금\n      accountName: \"현금\",\n      customerCode: null,\n      leftDebtorPrice: 0, // 차변\n      rightCreditsPrice: \"\", // 대변\n    },\n    {\n      journalNo: \"NEW JOURNAL\",\n      slipNo: \"NEW\",\n      balanceDivision: \"차변\",\n      accountCode: \"0621\", //공제금을 세부적으로 구분하지 않고 보험료로 전표발행\n      accountName: \"보험료\",\n      customerCode: null,\n      leftDebtorPrice: \"\", // 차변\n      rightCreditsPrice: 0, // 대변\n    },\n    {\n      journalNo: \"NEW JOURNAL\",\n      slipNo: \"NEW\",\n      balanceDivision: \"대변\",\n      accountCode: \"0101\", //공제금에 대한 현금\n      accountName: \"현금\",\n      customerCode: null,\n      leftDebtorPrice: 0, // 차변\n      rightCreditsPrice: \"\", // 대변\n    },\n  ]);\n\n  const [slipData, setSlipData] = useState([\n    {\n      slipNo: \"NEW\", // 전표 번호 생성\n      slipType: \"대체\",\n      accountPeriodNo: \"4\", //이건 나중에 알아서 수정\n      reportingDate: useDate(),\n      reportingEmpCode: sessionStorage.getItem(\"empCodeInfo_token\"), // session단위로 올라간 empCode\n      reportingEmpName: sessionStorage.getItem(\"empNameInfo_token\"),\n      slipStatus: \"미결\",\n      deptCode: sessionStorage.getItem(\"deptCodeInfo_token\"), // session단위로 올라간 deptCode\n      journalList: [],\n    },\n  ]);\n\n  //전표발행 \n  const makeJournal = empcode1 => {\n    //체크된 월급여 데이터를 가지고 전표발행을 위한 데이터 등록\n    const realSalary = empcode1.reduce((stack, el) => {\n      return stack + parseInt(el.realSalary);\n    }, 0);\n    const totalDeduction = empcode1.reduce((stack, el) => {\n      return stack + parseInt(el.totalDeduction);\n    }, 0);\n\n    const newJournal = journalLists.map((journalState, index) => {\n      switch (index) {\n        case 0:\n          return {\n            ...journalState,\n            leftDebtorPrice: realSalary,\n          };\n\n        case 1:\n          return {\n            ...journalState,\n            rightCreditsPrice: realSalary,\n          };\n\n        case 2:\n          return {\n            ...journalState,\n            leftDebtorPrice: totalDeduction,\n          };\n\n        case 3:\n          return {\n            ...journalState,\n            rightCreditsPrice: totalDeduction,\n          };\n\n        default:\n          return { ...journalState };\n      }\n    });\n    const slip = slipData.map(newSlip => {\n      return {\n        ...newSlip,\n        journalList: newJournal,\n      };\n    });\n\n\n\n    slipDataInsert(slip);\n  };\n\n  const slipDataInsert = (slip) => {\n    props.insertSalarySlipStart({ slipData: slip });\n  };\n\n\n  //부서,날짜 상태값이 바뀔때마다 state에 변경된값 입력 \n  const handleChange = (event, actionMeta) => {\n    if (actionMeta.name === \"dept\") {\n      setDept(event.value);\n    } else {\n      setDate(event.value);\n    }\n  };\n\n\n  //조회버튼 시작 \n  function findCloseSalary() {\n    if (dept.length === 0) {\n      alert(\" 부서를 선택해주세요 \");\n      return;\n    } else if (date.length === 0) {\n      alert(\" 조회할 월을 선택해주세요 \");\n      return;\n    } else {\n      salaryListRequest({ date, dept });\n    }\n  }\n\n\n\n\n  return (\n    <div>\n      <CloseSalary\n        handleChange={handleChange}\n        salaryList={salaryList}\n        findCloseSalary={findCloseSalary}\n        setEvent={setEvent}\n        empCodes={empCodes}\n        closeSalaryWithSlipRequest={closeSalaryWithSlipRequest}\n        makeJournal={makeJournal}\n      />\n    </div>\n  );\n};\n\n\n// 리덕스의 store가 이거로 react의 props로 넘어감\nconst mapStateToProps = createStructuredSelector({\n  salaryList: selectSalaryList,\n  flag: selectedErrorCD,\n});\n\n\n// 리액트와 스토어가 소통하는 구간\nexport default connect(mapStateToProps, {\n  salaryListRequest,\n  closeSalaryWithSlipRequest,\n  insertSalarySlipStart,\n})(CloseSalaryContainer);"]},"metadata":{},"sourceType":"module"}