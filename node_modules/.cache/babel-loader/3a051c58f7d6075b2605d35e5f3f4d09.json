{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68react\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\Slip\\\\SlipForm.js\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport useStyles from \"./Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Button, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as types from \"../../reducer/AccountReducer\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\"; //import {handleSearchJournal} from './Combine';\n//========================================== 2020-09-14 조편백 일반전표 전표 =========================================\n\nconst SlipForm = props => {\n  let toDate = moment(new Date()).format(\"yyyy-MM-DD\");\n  const data = useSelector(({\n    AccReducer\n  }) => AccReducer.AccountReducer.slipFormList);\n  const theme = useStyles(); //CSS\n\n  const dispatch = useDispatch();\n  const [slipGrid, setSlipGrid] = useState([]); //그리드 동적 값\n  //======================================== Grid cell 변경 유효성검사  =========================================\n  // [품의내역] 수정시 승인상태가 승인,반려 면 text 편집못하게함\n\n  const rowCellChanged = params => {\n    console.log(\"slipStatus\", params.data.slipStatus);\n\n    if (params.data.slipStatus === \"승인\" || params.data.slipStatus === \"반려\") {\n      alert(\"  승인or 반려 전표는 수정이 불가능합니다  \");\n      slipGrid.stopEditing(); //편집 중지\n\n      return;\n    }\n  }; //=================================== 전표 Grid row클릭시 분개 그리드 select ======================================\n\n\n  const onCellClicked = params => {\n    props.setVisibleState(false); //분개추가 버튼 비활성화, false가 활성화\n\n    const selectedRows = params.api.getSelectedRows(); //선택한 전표 Grid row 1줄을 들고옴\n\n    console.log(\"이것이것이것-\" + selectedRows[0].slipNo);\n    props.handleSearchJournal(selectedRows[0].slipNo); // 선택한 전표그리드 slipNo 로 분개 그리드 띄움\n\n    console.log(\"selectedRows\", selectedRows);\n    dispatch({\n      type: types.SELECT_JOURNAL_START,\n      payload: {\n        slipNo: selectedRows[0].slipNo\n      }\n    });\n    props.setSilpRow(selectedRows); //분개로 넘기는 전표Row\n    //분개추가버튼 유효성 검사\n\n    if (selectedRows[0].slipStatus === \"승인\" || selectedRows[0].slipStatus === \"반려\") {\n      props.setVisibleState(true); //분개추가 버튼 비활성화, false가 활성화\n      //return;\n    }\n  }; //=================================================== Grid컬럼선언 =========================================\n\n\n  const column = {\n    columnDefs: [{\n      width: \"60\",\n      headerCheckboxSelection: true,\n      checkboxSelection: true\n    }, //체크박스\n    {\n      width: \"150\",\n      headerName: \"기수일련번호\",\n      field: \"accountPeriodNo\"\n    }, {\n      width: \"250\",\n      headerName: \"전표일련번호\",\n      field: \"slipNo\"\n    }, {\n      headerName: \"작성날짜\",\n      field: \"reportingDate\"\n    }, {\n      headerName: \"작성자코드\",\n      field: \"reportingEmpCode\"\n    }, {\n      headerName: \"품의내역\",\n      field: \"expenseReport\",\n      editable: true\n    }, // editable : 편집가능\n    {\n      headerName: \"승인자\",\n      field: \"reportingEmpName\"\n    }, {\n      headerName: \"승인상태\",\n      field: \"slipStatus\"\n    }]\n  }; //=================================================== 전표추가 버튼   =========================================\n\n  const addBtn = () => {\n    slipGrid.selectAll(); // 그리드 전체 값\n\n    const rows = slipGrid.getSelectedRows(); // 그리드의 모든 값을 반환\n    //전표 추가갯수는 1개만가능하게끔 (그리드에 row가 있을때 if문 실행)\n    // console.log(\n    //   \"dd\",\n    //   slipGrid.getDisplayedRowAtIndex(slipGrid.getLastDisplayedRow()).data,\n    // );\n\n    if (rows.length !== 0) {\n      alert(\"전표는 한개만 등록가능합니다.\");\n\n      if (slipGrid.getDisplayedRowAtIndex(slipGrid.getLastDisplayedRow()).data.slipNo === \"NEW\") {\n        return;\n      }\n    }\n\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n\n    slipGrid.updateRowData({\n      add: [newItem],\n      addIndex: \"\"\n    }); // ag그리드 api로 그리드에 add 함\n  }; //추가할 컬럼 선언\n\n\n  const NewRowData = () => {\n    let newData = {\n      slipNo: \"NEW\",\n      accountPeriodNo: \"5\",\n      //2020년은 기수일련번호 ->  4\n      slipType: \"결산\",\n      reportingDate: toDate,\n      reportingEmpCode: sessionStorage.getItem(\"empCodeInfo_token\"),\n      //작성사코드\n      expenseReport: \"\",\n      approvalDate: \"\",\n      reportingEmpName: sessionStorage.getItem(\"empNameInfo_token\"),\n      //로그인 이름\n      slipStatus: \"미결\",\n      deptCode: \"DPT-01\",\n      status: \"\"\n    };\n    return newData;\n  }; //=================================================== 전표삭제 버튼  ==========================================\n\n\n  const deleteBtn = () => {\n    const deleteList = slipGrid.getSelectedRows();\n\n    if (deleteList.length === 0) {\n      alert(\"삭제할 항목을 선택해주세요. \");\n      return;\n    } else if (deleteList[0].slipStatus === \"승인\" || deleteList[0].slipStatus === \"반려\") {\n      alert(deleteList[0].slipStatus + \"된 전표는 수정도 불가능한데 삭제는 되겠어 ? \");\n      return;\n    } else if (!window.confirm(\" 삭제 ? \")) {\n      alert(\"취소되었습니다.\");\n      return;\n    } else {\n      const slipNo = deleteList[0].slipNo; //걍 변수에담음\n\n      console.log(slipNo); //props.handleDeleteSlip(slipNo);\n\n      dispatch({\n        type: types.DELETE_SLIP_START,\n        payload: {\n          slipNo: slipNo\n        }\n      });\n      slipGrid.updateRowData({\n        remove: deleteList\n      }); // 선택된 row 삭제\n\n      alert(\"삭제완료\");\n    }\n  }; //=================================================== 전표저장 버튼  ==========================================\n\n\n  const saveBtn = () => {\n    //slipGrid.stopEditing(); //편집 중지\n    const slipRow = slipGrid.getSelectedRows(); // 선택된 row 1줄\n\n    if (slipRow.length === 0) {\n      alert(\" 저장할 전표를 선택해주세요 \");\n      return;\n    } else if (slipRow[0].slipStatus === \"승인\" || slipRow[0].slipStatus === \"반려\") {\n      alert(\"승인상태가 \" + slipRow[0].slipStatus + \" 된 전표는 변경 불가능 \");\n      return;\n    } else if (slipRow[0].slipNo !== \"NEW\") {\n      //품의내역 수정후 전표저장누르면 db가서 UPDATE 함\n      // props.handleUpdateSlip(\n      //   slipRow[0].slipType,\n      //   slipRow[0].expenseReport,\n      //   slipRow[0].slipNo,\n      // );\n      dispatch({\n        type: types.UPDATE_SLIP_START,\n        payload: {\n          slipType: slipRow[0].slipType,\n          expenseReport: slipRow[0].expenseReport,\n          slipNo: slipRow[0].slipNo\n        }\n      });\n      alert(\" 업데이트 되었습니다. \");\n    } else {\n      props.setVisibleState(false); //분개추가 버튼 활성화\n\n      props.setSilpRow(slipRow); //분개로 넘기는 전표Row (전표,분개랑 같이넘겨서 번호를 만듬)\n\n      alert(\" 분개추가 Button 활성화 \");\n    }\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: theme.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    color: \"primary\",\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"\\uC804\\uD45C\"), React.createElement(Typography, {\n    variant: \"h6\",\n    className: theme.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: addBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"\\uC804\\uD45C\\uCD94\\uAC00\"), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: deleteBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"\\uC804\\uD45C\\uC0AD\\uC81C\"), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: saveBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"\\uC804\\uD45C\\uC800\\uC7A5\")))), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    enableColResize: \"true\" //칼럼 리사이즈 허용 여부\n    ,\n    enableSorting: \"true\" //렬 옵션 허용 여부\n    ,\n    enableFilter: \"true\" //필터 옵션 허용 여부\n    ,\n    style: {\n      //height: \"200px\",\n      width: \"100%\",\n      //paddingTop: \"25px\",\n      float: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: column.columnDefs //정의된 컬럼\n    //rowData={props.slipFormList} //Reduce에서 받아온 데이터\n    ,\n    rowData: data //Reduce에서 받아온 데이터\n    ,\n    rowSelection: \"single\" //하나만 선택하거나 복수개를 선택할 수 있음\n    ,\n    onGridReady: params => {\n      //onload 이벤트와 유사한 것\n      setSlipGrid(params.api); //동적으로변하는 그리드 값 useState 담음\n\n      params.api.sizeColumnsToFit();\n    },\n    onGridSizeChanged: event => {\n      event.api.sizeColumnsToFit();\n    },\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onCellEditingStarted: rowCellChanged //편집 허용인 칼럼을 더블 클릭할 때 발생하는 이벤트.\n    ,\n    onCellClicked: onCellClicked //셀 한번클릭\n    ,\n    domLayout: \"autoHeight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }))));\n};\n\nexport default SlipForm;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68react/src/erp/account/account/page/Slip/SlipForm.js"],"names":["React","useState","moment","useStyles","AgGridReact","Button","AppBar","Toolbar","Typography","useDispatch","useSelector","types","useThemeSwitcher","SlipForm","props","toDate","Date","format","data","AccReducer","AccountReducer","slipFormList","theme","dispatch","slipGrid","setSlipGrid","rowCellChanged","params","console","log","slipStatus","alert","stopEditing","onCellClicked","setVisibleState","selectedRows","api","getSelectedRows","slipNo","handleSearchJournal","type","SELECT_JOURNAL_START","payload","setSilpRow","column","columnDefs","width","headerCheckboxSelection","checkboxSelection","headerName","field","editable","addBtn","selectAll","rows","length","getDisplayedRowAtIndex","getLastDisplayedRow","newItem","NewRowData","updateRowData","add","addIndex","newData","accountPeriodNo","slipType","reportingDate","reportingEmpCode","sessionStorage","getItem","expenseReport","approvalDate","reportingEmpName","deptCode","status","deleteBtn","deleteList","window","confirm","DELETE_SLIP_START","remove","saveBtn","slipRow","UPDATE_SLIP_START","dark","root","title","menuButton","float","sizeColumnsToFit","event","param"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport useStyles from \"./Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Button, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as types from \"../../reducer/AccountReducer\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n//import {handleSearchJournal} from './Combine';\n//========================================== 2020-09-14 조편백 일반전표 전표 =========================================\nconst SlipForm = props => {\n  let toDate = moment(new Date()).format(\"yyyy-MM-DD\");\n\n  const data = useSelector(({ AccReducer }) => AccReducer.AccountReducer.slipFormList);\n\n  const theme = useStyles(); //CSS\n  const dispatch = useDispatch();\n  const [slipGrid, setSlipGrid] = useState([]); //그리드 동적 값\n\n  //======================================== Grid cell 변경 유효성검사  =========================================\n  // [품의내역] 수정시 승인상태가 승인,반려 면 text 편집못하게함\n  const rowCellChanged = params => {\n    console.log(\"slipStatus\", params.data.slipStatus);\n    if (\n      params.data.slipStatus === \"승인\" ||\n      params.data.slipStatus === \"반려\"\n    ) {\n      alert(\"  승인or 반려 전표는 수정이 불가능합니다  \");\n      slipGrid.stopEditing(); //편집 중지\n      return;\n    }\n  };\n  //=================================== 전표 Grid row클릭시 분개 그리드 select ======================================\n  const onCellClicked = params => {\n    props.setVisibleState(false); //분개추가 버튼 비활성화, false가 활성화\n    const selectedRows = params.api.getSelectedRows(); //선택한 전표 Grid row 1줄을 들고옴\n    console.log(\"이것이것이것-\"+selectedRows[0].slipNo)\n    props.handleSearchJournal(selectedRows[0].slipNo); // 선택한 전표그리드 slipNo 로 분개 그리드 띄움\n    console.log(\"selectedRows\", selectedRows);\n    dispatch({\n      type: types.SELECT_JOURNAL_START,\n      payload: {\n        slipNo: selectedRows[0].slipNo,\n      },\n    });\n    props.setSilpRow(selectedRows); //분개로 넘기는 전표Row\n\n    //분개추가버튼 유효성 검사\n    if (\n      selectedRows[0].slipStatus === \"승인\" ||\n      selectedRows[0].slipStatus === \"반려\"\n    ) {\n      props.setVisibleState(true); //분개추가 버튼 비활성화, false가 활성화\n      //return;\n    }\n  };\n  //=================================================== Grid컬럼선언 =========================================\n  const column = {\n    columnDefs: [\n      { width: \"60\", headerCheckboxSelection: true, checkboxSelection: true }, //체크박스\n      { width: \"150\", headerName: \"기수일련번호\", field: \"accountPeriodNo\" },\n      { width: \"250\", headerName: \"전표일련번호\", field: \"slipNo\" },\n      { headerName: \"작성날짜\", field: \"reportingDate\" },\n      { headerName: \"작성자코드\", field: \"reportingEmpCode\" },\n      { headerName: \"품의내역\", field: \"expenseReport\", editable: true }, // editable : 편집가능\n      { headerName: \"승인자\", field: \"reportingEmpName\" },\n      { headerName: \"승인상태\", field: \"slipStatus\" },\n    ],\n  };\n  //=================================================== 전표추가 버튼   =========================================\n  const addBtn = () => {\n    slipGrid.selectAll(); // 그리드 전체 값\n    const rows = slipGrid.getSelectedRows(); // 그리드의 모든 값을 반환\n    //전표 추가갯수는 1개만가능하게끔 (그리드에 row가 있을때 if문 실행)\n    // console.log(\n    //   \"dd\",\n    //   slipGrid.getDisplayedRowAtIndex(slipGrid.getLastDisplayedRow()).data,\n    // );\n    if (rows.length !== 0) {\n      alert(\"전표는 한개만 등록가능합니다.\");\n      if (\n        slipGrid.getDisplayedRowAtIndex(slipGrid.getLastDisplayedRow()).data\n          .slipNo === \"NEW\"\n      ) {\n        return;\n      }\n    }\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n    slipGrid.updateRowData({ add: [newItem], addIndex: \"\" }); // ag그리드 api로 그리드에 add 함\n  };\n\n  //추가할 컬럼 선언\n  const NewRowData = () => {\n    let newData = {\n      slipNo: \"NEW\",\n      accountPeriodNo: \"5\", //2020년은 기수일련번호 ->  4\n      slipType: \"결산\",\n      reportingDate: toDate,\n      reportingEmpCode: sessionStorage.getItem(\"empCodeInfo_token\"), //작성사코드\n      expenseReport: \"\",\n      approvalDate: \"\",\n      reportingEmpName: sessionStorage.getItem(\"empNameInfo_token\"), //로그인 이름\n      slipStatus: \"미결\",\n      deptCode: \"DPT-01\",\n      status: \"\",\n    };\n    return newData;\n  };\n\n  //=================================================== 전표삭제 버튼  ==========================================\n  const deleteBtn = () => {\n    const deleteList = slipGrid.getSelectedRows();\n    if (deleteList.length === 0) {\n      alert(\"삭제할 항목을 선택해주세요. \");\n      return;\n    } else if (\n      deleteList[0].slipStatus === \"승인\" ||\n      deleteList[0].slipStatus === \"반려\"\n    ) {\n      alert(\n        deleteList[0].slipStatus +\n          \"된 전표는 수정도 불가능한데 삭제는 되겠어 ? \",\n      );\n      return;\n    } else if (!window.confirm(\" 삭제 ? \")) {\n      alert(\"취소되었습니다.\");\n      return;\n    } else {\n      const slipNo = deleteList[0].slipNo; //걍 변수에담음\n      console.log(slipNo);\n      //props.handleDeleteSlip(slipNo);\n      dispatch({\n        type: types.DELETE_SLIP_START,\n        payload: {\n          slipNo: slipNo,\n        },\n      });\n      slipGrid.updateRowData({ remove: deleteList }); // 선택된 row 삭제\n      alert(\"삭제완료\");\n    }\n  };\n  //=================================================== 전표저장 버튼  ==========================================\n  const saveBtn = () => {\n    //slipGrid.stopEditing(); //편집 중지\n\n    const slipRow = slipGrid.getSelectedRows(); // 선택된 row 1줄\n    if (slipRow.length === 0) {\n      alert(\" 저장할 전표를 선택해주세요 \");\n      return;\n    } else if (\n      slipRow[0].slipStatus === \"승인\" ||\n      slipRow[0].slipStatus === \"반려\"\n    ) {\n      alert(\"승인상태가 \" + slipRow[0].slipStatus + \" 된 전표는 변경 불가능 \");\n      return;\n    } else if (slipRow[0].slipNo !== \"NEW\") {\n      //품의내역 수정후 전표저장누르면 db가서 UPDATE 함\n      // props.handleUpdateSlip(\n      //   slipRow[0].slipType,\n      //   slipRow[0].expenseReport,\n      //   slipRow[0].slipNo,\n      // );\n      dispatch({\n        type: types.UPDATE_SLIP_START,\n        payload: {\n          slipType: slipRow[0].slipType,\n          expenseReport: slipRow[0].expenseReport,\n          slipNo: slipRow[0].slipNo,\n        },\n      });\n      alert(\" 업데이트 되었습니다. \");\n    } else {\n      props.setVisibleState(false); //분개추가 버튼 활성화\n      props.setSilpRow(slipRow); //분개로 넘기는 전표Row (전표,분개랑 같이넘겨서 번호를 만듬)\n      alert(\" 분개추가 Button 활성화 \");\n    }\n  };\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <>\n      <div>\n        <div className={theme.root}>\n          <AppBar color=\"primary\" position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h4\">전표</Typography>\n              <Typography variant=\"h6\" className={theme.title}></Typography>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={addBtn}\n              >\n                전표추가\n              </Button>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={deleteBtn}\n              >\n                전표삭제\n              </Button>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={saveBtn}\n              >\n                전표저장\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <div\n          className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n          enableColResize=\"true\" //칼럼 리사이즈 허용 여부\n          enableSorting=\"true\" //렬 옵션 허용 여부\n          enableFilter=\"true\" //필터 옵션 허용 여부\n          style={{\n            //height: \"200px\",\n            width: \"100%\",\n            //paddingTop: \"25px\",\n            float: \"center\",\n          }}\n        >\n          <AgGridReact\n            columnDefs={column.columnDefs} //정의된 컬럼\n            //rowData={props.slipFormList} //Reduce에서 받아온 데이터\n            rowData={data} //Reduce에서 받아온 데이터\n            rowSelection=\"single\" //하나만 선택하거나 복수개를 선택할 수 있음\n            onGridReady={params => {\n              //onload 이벤트와 유사한 것\n              setSlipGrid(params.api);\n              //동적으로변하는 그리드 값 useState 담음\n              params.api.sizeColumnsToFit();\n            }}\n            onGridSizeChanged={event => {\n              event.api.sizeColumnsToFit();\n            }}\n            getRowStyle={function(param) {\n              return { \"text-align\": \"center\" };\n            }} //body 가운데 정렬\n            onCellEditingStarted={rowCellChanged} //편집 허용인 칼럼을 더블 클릭할 때 발생하는 이벤트.\n            onCellClicked={onCellClicked} //셀 한번클릭\n            domLayout={\"autoHeight\"}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default SlipForm;\n"]},"metadata":{},"sourceType":"module"}