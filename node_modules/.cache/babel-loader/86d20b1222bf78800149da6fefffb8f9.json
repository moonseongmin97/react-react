{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\purchase\\\\page\\\\StockInfo\\\\ShowOrderDialog.js\";\nimport React, { useState, useEffect } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { Button } from '@material-ui/core';\nimport orderListColumn from './orderListColumn';\nimport { setSearchOrderInfoListOnDelivery, setWarehousing } from './stockAxios';\nimport Swal from 'sweetalert2';\nimport * as api from '../../api';\n\nconst ShowOrderDialog = ({\n  close\n}) => {\n  const [searchStockList, setSearchStockList] = useState([]);\n  const [gridApi, setGridApi] = useState();\n  useEffect(() => {\n    setSearchOrderInfoListOnDelivery(setSearchStockList);\n  }, []);\n\n  const onClickWarehousing = () => {\n    close();\n\n    if (gridApi.getSelectedRows().map(el => el.inspectionStatus).includes('N')) {\n      return Swal.fire({\n        icon: 'error',\n        title: '원재료검사 필요.'\n      });\n    }\n\n    let orderNoList = gridApi.getSelectedRows().map(el => el.orderNo);\n\n    for (let searchStock of searchStockList) {\n      orderNoList.push(searchStock.orderNo);\n    }\n\n    if (orderNoList.length === 0) {\n      return Swal.fire({\n        icon: 'error',\n        title: '입고 가능한 발주품목이 없습니다.'\n      });\n    }\n\n    if (gridApi.getSelectedRows().map(el => el.orderSlipStatus).includes('N')) {\n      return Swal.fire({\n        icon: 'error',\n        title: '결재 승인이 필요합니다.'\n      });\n    }\n\n    setWarehousing(orderNoList);\n  };\n\n  const onClickInspection = () => {\n    const orderNoList = gridApi.getSelectedRows().map(el => el.orderNo).join(\",\");\n\n    const process = async param => {\n      console.log(param);\n\n      if (gridApi.getSelectedRows().map(el => el.orderSlipStatus).includes('N')) {\n        close();\n        return Swal.fire({\n          icon: 'error',\n          title: '결재 승인이 필요합니다.'\n        });\n      }\n\n      try {\n        await api.inspection(param);\n        close();\n        Swal.fire({\n          icon: 'success',\n          title: '원재료검사 완료'\n        });\n      } catch (e) {\n        alert(e.message);\n      }\n    };\n\n    process(orderNoList);\n  };\n\n  const onGridReady = param => {\n    setGridApi(param.api);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(MyGrid, {\n    column: orderListColumn,\n    title: '발주품목 입고',\n    list: searchStockList,\n    rowSelection: \"single\",\n    api: onGridReady,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: onClickInspection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"\\uC6D0\\uC7AC\\uB8CC\\uAC80\\uC0AC\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: onClickWarehousing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"\\uC785\\uACE0\")));\n};\n\nexport default ShowOrderDialog;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/purchase/page/StockInfo/ShowOrderDialog.js"],"names":["React","useState","useEffect","MyGrid","Button","orderListColumn","setSearchOrderInfoListOnDelivery","setWarehousing","Swal","api","ShowOrderDialog","close","searchStockList","setSearchStockList","gridApi","setGridApi","onClickWarehousing","getSelectedRows","map","el","inspectionStatus","includes","fire","icon","title","orderNoList","orderNo","searchStock","push","length","orderSlipStatus","onClickInspection","join","process","param","console","log","inspection","e","alert","message","onGridReady","marginRight","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { Button } from '@material-ui/core';\nimport orderListColumn from './orderListColumn';\nimport { setSearchOrderInfoListOnDelivery, setWarehousing } from './stockAxios';\nimport Swal from 'sweetalert2';\nimport * as api from '../../api';\n\nconst ShowOrderDialog = ({ close }) => {\n    const [searchStockList, setSearchStockList] = useState([]);\n    const [gridApi, setGridApi] = useState();\n    useEffect(() => {\n        setSearchOrderInfoListOnDelivery(setSearchStockList);\n    }, []);\n\n    const onClickWarehousing = () => {\n        \n        close();\n\n        if(gridApi.getSelectedRows().map(el=>el.inspectionStatus).includes('N')){\n            return Swal.fire({\n                icon: 'error',\n                title: '원재료검사 필요.'\n            });\n        } \n        \n        let orderNoList = gridApi.getSelectedRows().map(el=>el.orderNo);\n        for (let searchStock of searchStockList) {\n            orderNoList.push(searchStock.orderNo);\n        }\n        \n        if (orderNoList.length === 0) {\n            return Swal.fire({\n                icon: 'error',\n                title: '입고 가능한 발주품목이 없습니다.'\n            });\n        }\n\n        if(gridApi.getSelectedRows().map(el=>el.orderSlipStatus).includes('N')){\n            return Swal.fire({\n                icon: 'error',\n                title: '결재 승인이 필요합니다.'\n            });\n        } \n\n        setWarehousing(orderNoList);\n    };\n\n    const onClickInspection = () => {\n        const orderNoList = gridApi.getSelectedRows().map(el=>el.orderNo).join(\",\");\n        const process = async (param) => {\n            console.log(param);\n\n            if(gridApi.getSelectedRows().map(el=>el.orderSlipStatus).includes('N')){\n                close();\n                return Swal.fire({\n                    icon: 'error',\n                    title: '결재 승인이 필요합니다.'\n                });\n            } \n\n            try{\n            await api.inspection(param);\n            close();\n            Swal.fire({\n                icon: 'success',\n                title: '원재료검사 완료'\n            });\n          }catch(e){\n            alert(e.message);\n          }\n          }\n\n          process(orderNoList);\n    }\n\n    const onGridReady = param => {\n        setGridApi(param.api);\n    }\n    return (\n        <>\n            <MyGrid\n                column={orderListColumn}\n                title={'발주품목 입고'}\n                list={searchStockList}\n                rowSelection=\"single\"\n                api={onGridReady}\n            >\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh', marginTop: '1vh' }}\n                    onClick={onClickInspection}\n                >\n                    원재료검사\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh', marginTop: '1vh' }}\n                    onClick={onClickWarehousing}\n                >\n                    입고\n                </Button>\n            </MyGrid>\n        </>\n    );\n};\n\nexport default ShowOrderDialog;\n"]},"metadata":{},"sourceType":"module"}