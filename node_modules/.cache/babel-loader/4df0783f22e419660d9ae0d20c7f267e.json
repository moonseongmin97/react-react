{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\hr\\\\base\\\\page\\\\BaseWorkTime\\\\BaseWorkTimeContainer.js\";\nimport React, { useState, useCallback } from 'react';\nimport BaseWorkTime from './BaseWorkTime';\nimport { connect } from \"react-redux\";\nimport usePromise from \"util/usePromise\";\nimport { getBaseWorkTimeList, deleteBaseWorkTime, batchBaseWorkTime } from '../../api';\n\nconst BaseWorkTimeContainer = () => {\n  const [loading, response, error] = usePromise(() => {\n    return getBaseWorkTimeList();\n  }, []);\n  const [gridApi, setGridApi] = useState(null);\n\n  function cellClicked(e) {\n    console.log(e);\n    if (e.colDef.field === 'applyYear' && e.data.status !== 'insert') e.colDef.editable = false;else e.colDef.editable = true;\n  }\n\n  function onGridReady(params) {\n    console.log(params);\n    setGridApi(params.api);\n    params.api.sizeColumnsToFit();\n  }\n  /*--------------------*/\n\n  /*-----batchItems-----*/\n\n  /*--------------------*/\n\n\n  const batchItems = useCallback(() => {\n    console.log('batchItems');\n\n    const process = async param => {\n      console.log(param);\n\n      try {\n        await batchBaseWorkTime(param);\n        alert(\"저장 완료\");\n      } catch (e) {\n        alert(e.message);\n      }\n    };\n\n    let list = [];\n    gridApi.forEachNode(node => {\n      list.push(node.data);\n    });\n    const arr = list.map(el => el.applyYear);\n    const result = arr.reduce((accu, curr) => {\n      accu.set(curr, (accu.get(curr) || 0) + 1);\n      return accu;\n    }, new Map());\n    let array = [];\n\n    for (let [key, value] of result.entries()) {\n      console.log(key + ' : ' + value);\n      if (value > 1) array.push(key);\n    }\n\n    if (array.length) {\n      alert(array.join('년도, ') + '년도 중복');\n      return;\n    }\n\n    list = list.filter(data => data.status !== 'normal');\n\n    if (list.length) {\n      process(list);\n      gridApi.forEachNode((node, index) => {\n        if (node.data.status !== 'normal') {\n          node.data.status = 'normal';\n          gridApi.updateRowData({\n            update: [node.data]\n          });\n        }\n      });\n    }\n\n    console.log('완료');\n  }, [gridApi]);\n  /*---------------------*/\n\n  /*-----deleteItems-----*/\n\n  /*---------------------*/\n\n  const deleteItems = useCallback(() => {\n    console.log(gridApi);\n\n    const process = async param => {\n      console.log(param);\n      await deleteBaseWorkTime(param);\n    };\n\n    var rows = gridApi.getSelectedRows();\n    console.log(rows);\n    gridApi.updateRowData({\n      remove: rows\n    });\n    let list = rows.filter(el => el.status !== 'insert');\n    console.log(list);\n\n    if (list.length) {\n      process(list);\n    }\n  }, [gridApi]);\n  /*-----------------*/\n\n  /*-----addItem-----*/\n\n  /*-----------------*/\n\n  const addItem = useCallback(() => {\n    console.log('addItems');\n    const newRow = {\n      applyYear: null,\n      attendTime: null,\n      chk: null,\n      dinnerEndTime: null,\n      dinnerStartTime: null,\n      errorCode: null,\n      errorMsg: null,\n      lunchEndTime: null,\n      lunchStartTime: null,\n      nightEndTime: null,\n      overEndTime: null,\n      quitTime: null,\n      status: \"insert\"\n    };\n    gridApi.updateRowData({\n      add: [newRow]\n    });\n  }, [gridApi]);\n  const cellEditingStopped = useCallback(event => {\n    console.log('cellEditingStopped');\n    let rowData = event.node.data;\n    if (rowData.status !== 'insert') rowData.status = 'update';\n    console.log(rowData);\n  }, []); // 대기중일 때\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"\\uB300\\uAE30\\uC911...\");\n  } // 아직 response 값이 설정되지 않았을 때\n\n\n  if (!response) {\n    return null;\n  } // 에러가 발생했을 때\n\n\n  if (error) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"\\uC5D0\\uB7EC \\uBC1C\\uC0DD!\");\n  }\n\n  if (response) {\n    console.log(response);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(BaseWorkTime, {\n      baseWorkTimeList: response.data.gridRowJson,\n      onGridReady: onGridReady,\n      addItem: addItem,\n      batchItems: batchItems,\n      deleteItems: deleteItems,\n      cellEditingStopped: cellEditingStopped,\n      cellClicked: cellClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }));\n  }\n};\n\nconst mapStateToProps = state => {\n  console.log('state');\n  console.log(state);\n  return {};\n};\n\nexport default connect(mapStateToProps, {})(BaseWorkTimeContainer);","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/hr/base/page/BaseWorkTime/BaseWorkTimeContainer.js"],"names":["React","useState","useCallback","BaseWorkTime","connect","usePromise","getBaseWorkTimeList","deleteBaseWorkTime","batchBaseWorkTime","BaseWorkTimeContainer","loading","response","error","gridApi","setGridApi","cellClicked","e","console","log","colDef","field","data","status","editable","onGridReady","params","api","sizeColumnsToFit","batchItems","process","param","alert","message","list","forEachNode","node","push","arr","map","el","applyYear","result","reduce","accu","curr","set","get","Map","array","key","value","entries","length","join","filter","index","updateRowData","update","deleteItems","rows","getSelectedRows","remove","addItem","newRow","attendTime","chk","dinnerEndTime","dinnerStartTime","errorCode","errorMsg","lunchEndTime","lunchStartTime","nightEndTime","overEndTime","quitTime","add","cellEditingStopped","event","rowData","gridRowJson","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React,{useState,useCallback} from 'react';\nimport BaseWorkTime from './BaseWorkTime';\nimport { connect } from \"react-redux\";\nimport usePromise from \"util/usePromise\";\nimport \n{\n  getBaseWorkTimeList,\n  deleteBaseWorkTime,\n  batchBaseWorkTime\n  } from '../../api';\n\nconst BaseWorkTimeContainer = ()=> {\n\n  const [loading, response, error] = usePromise(() => {\n    return getBaseWorkTimeList();\n  }, []);  \n\n  const [gridApi, setGridApi] = useState(null);\n\n  function cellClicked(e){\n    console.log(e);\n    if(e.colDef.field==='applyYear'&&e.data.status!=='insert')\n    e.colDef.editable=false;\n    else\n    e.colDef.editable=true;\n  }\n\n  function onGridReady(params) {\n    console.log(params);\n    setGridApi(params.api);\n    params.api.sizeColumnsToFit();\n}\n\n\n/*--------------------*/\n/*-----batchItems-----*/\n/*--------------------*/\n  const batchItems = useCallback(()=> {\n    console.log('batchItems');\n    const process = async (param) => {\n      console.log(param);\n      try{\n      await batchBaseWorkTime(param);\n      alert(\"저장 완료\");\n    }catch(e){\n      alert(e.message);\n    }\n    }\n    let list = [];\n    gridApi.forEachNode(node => {\n     list.push(node.data);\n    });\n    const arr = list.map(el => el.applyYear);\n    const result = arr.reduce((accu,curr)=> {\n      accu.set(curr, (accu.get(curr)||0) +1) ;\n      return accu;\n    },new Map());\n    let array = [];\n    for (let [key, value] of result.entries()) {\n      console.log(key + ' : ' + value);\n      if(value>1) array.push(key);\n    }\n    if(array.length) {\n      alert(array.join('년도, ')+'년도 중복'); \n      return;\n    }\n    list = list.filter(data => data.status !== 'normal');\n   if(list.length) \n   {\n     \n    process(list);\n\ngridApi.forEachNode((node,index)=>{\n  if(node.data.status!=='normal'){\n    node.data.status='normal'\n    gridApi.updateRowData({update:[node.data]});\n  }\n})\n   }\n\n   console.log('완료');\n\n  },[gridApi]);\n\n\n/*---------------------*/\n/*-----deleteItems-----*/\n/*---------------------*/\n  const deleteItems = useCallback(()=> {\n    console.log(gridApi);\n    const process = async (param) => {\n      console.log(param);\n      await deleteBaseWorkTime(param);\n    }\n    var rows = gridApi.getSelectedRows();\n    console.log(rows);\n    gridApi.updateRowData({remove:rows});\n    let list =rows.filter(el => el.status!=='insert');\n    console.log(list);\n    if(list.length){\n       process(list);\n    }\n  },[gridApi]);\n\n\n  /*-----------------*/\n  /*-----addItem-----*/\n  /*-----------------*/\n  const addItem = useCallback(()=> {\n    console.log('addItems');\n    const newRow = {\n      applyYear: null,\n      attendTime: null,\n      chk: null,\n      dinnerEndTime: null,\n      dinnerStartTime: null,\n      errorCode: null,\n      errorMsg: null,\n      lunchEndTime:null,\n      lunchStartTime: null,\n      nightEndTime: null,\n      overEndTime: null,\n      quitTime: null,\n      status: \"insert\"\n    }\n    gridApi.updateRowData({add: [newRow]});\n\n  },[gridApi]);\n\n  const cellEditingStopped = useCallback(event=>{\n    console.log('cellEditingStopped');\n    let rowData = event.node.data;\nif(rowData.status !== 'insert')rowData.status = 'update';\n    console.log(rowData);\n  },[]);\n\n    // 대기중일 때\n    if (loading) {\n      return <div>대기중...</div>;\n    }\n    // 아직 response 값이 설정되지 않았을 때\n    if (!response) {\n      return null;\n    }\n  \n    // 에러가 발생했을 때\n    if (error) {\n      return <div>에러 발생!</div>;\n    }\n\n    if(response){\n      console.log(response);\n\n    return (<React.Fragment>\n        <BaseWorkTime \n        baseWorkTimeList={response.data.gridRowJson} \n        onGridReady={onGridReady} \n        addItem={addItem} \n        batchItems={batchItems}\n        deleteItems={deleteItems}\n        cellEditingStopped={cellEditingStopped}\n        cellClicked={cellClicked}\n        />\n    </React.Fragment>);\n    }\n}\n\nconst mapStateToProps = state => {\n  console.log('state');\n  console.log(state);\n    return {\n    };\n  };\n  export default connect(mapStateToProps, {\n  })(BaseWorkTimeContainer);"]},"metadata":{},"sourceType":"module"}