{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\base\\\\page\\\\AccountForm\\\\AccountGrid.js\";\n//********************************** 2020-08-26 정대현 추가 **********************************\nimport React, { useEffect, useState } from \"react\";\nimport useStyles from \"erp/account/statement/page/AccountLedger/Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport * as types from \"../../reducer/BaseReducer\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport Icon from \"@material-ui/core/Icon\";\nimport ThreeSixtyIcon from \"@material-ui/icons/ThreeSixty\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { AppBar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst AccountGrid = ({\n  accountInfo\n}) => {\n  const data = accountInfo;\n  console.log(data);\n  const classes = useStyles(); //const [data, setData] = useState();\n\n  const [positionGridApi, setPositionGridApi] = useState();\n  const dispatch = useDispatch(); //Redux 저장소에서 있는 함수를 데리고옴\n  //===================== useEffect로 비동기적으로 동작  ====================\n  //컴포넌트가 마운트 됐을 때 호출됨\n\n  /* useEffect(() => {\n    account(); // 함수호출\n  }, []); */\n\n  function accountList() {\n    axios.get(\"http://localhost:8282/acc/base/getAccountList\")\n    /* .then(response => {\n      setData(response.data);\n    }) */\n    .catch(e => {\n      console.log(e);\n    });\n  } //========================== 그리드 객체 준비 ==========================\n\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 그리드 초기화 시 칼럼 사이즈 자동조절.\n  }; // 여긴 그냥 ag Grid의 api를 사용하기 위해 선언. 그리고 이곳은 ag Grid 초기화 시 실행된다.\n  //========================== 그리드내용 ==========================\n\n\n  const accountColumn = {\n    columnDefs: [{\n      headerCheckboxSelection: true,\n      checkboxSelection: true,\n      rowSelection: \"multiple\",\n      rowMultiSelectionWhithClick: true,\n      width: \"23\"\n    }, {\n      headerName: \"계정과목코드\",\n      field: \"accountInnerCode\",\n      width: 80\n    }, {\n      headerName: \"계정과목명\",\n      field: \"accountName\",\n      width: 100,\n      editable: true\n    }, {\n      headerName: \"성격\",\n      field: \"accountCharacter\",\n      width: 80,\n      editable: true\n    }, {\n      headerName: \"상태\",\n      field: \"status\",\n      width: 80,\n      hide: true\n    }]\n  };\n\n  const addBtn = () => {\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n\n    positionGridApi.updateRowData({\n      add: [newItem],\n      addIndex: \"\"\n    }); // ag그리드 api로 그리드에 add 함\n  }; //추가할 컬럼 선언\n\n\n  const NewRowData = () => {\n    const rowCount = positionGridApi.getDisplayedRowCount(); // 그리드 행수를 카운트\n\n    const lastAccountInnerCode = positionGridApi.getDisplayedRowAtIndex(rowCount - 1).data.accountInnerCode; // 마지막 accountInnerCode 가져옴\n\n    const lastAccountCode = positionGridApi.getDisplayedRowAtIndex(rowCount - 1).data.accountCode; // 필요한 정보들을 담는다.\n\n    const ParentAccountInnerCode = positionGridApi.getDisplayedRowAtIndex(0).data.parentAccountInnerCode;\n    const AccountDivision = positionGridApi.getDisplayedRowAtIndex(0).data.accountDivision;\n    const GroupCode = positionGridApi.getDisplayedRowAtIndex(0).data.groupCode;\n    const Editable = positionGridApi.getDisplayedRowAtIndex(0).data.editable;\n    var newAccountInnerCode = parseInt(lastAccountInnerCode) + 1;\n    var newAccountCode = parseInt(lastAccountCode) + 1;\n\n    function numberPad(str, width) {\n      // newCode 맨 앞의 숫자가 0이면 공백으로 처리하기 때문에 0을 살려주는 함수\n      str = str + \"\";\n      return str.length >= str ? str : new Array(width - str.length + 1).join(\"0\") + str;\n    }\n\n    newAccountInnerCode = numberPad(newAccountInnerCode, 4);\n    newAccountCode = numberPad(newAccountCode, 4);\n    let newData = {\n      accountInnerCode: newAccountInnerCode,\n      parentAccountInnercode: ParentAccountInnerCode,\n      accountCode: newAccountCode,\n      accountName: \"\",\n      accountCharacter: \"\",\n      accountDivision: AccountDivision,\n      groupCode: GroupCode,\n      editable: Editable,\n      status: \"insert\"\n    };\n    console.log(newData);\n    return newData;\n  }; ////편집 허용인 컬럼을 더블 클릭할 때 발생하는 이벤트.\n\n\n  const rowCellChanged = e => {\n    if (e.data.status === \"insert\") {\n      return;\n    } else {\n      e.data.status = \"update\";\n    }\n  }; //체크박스에 체크된 row만 삭제\n\n\n  const deleteBtn = () => {\n    const selectedData = positionGridApi.getSelectedRows(); //선택한 row\n    //const selectedDataCount = selectedData.rowcount;\n\n    console.log(selectedData);\n    console.log(selectedData.length);\n    console.log(\":::::::::::::::\" + JSON.stringify(selectedData.accountName));\n\n    if (selectedData.length === 0) {\n      // 선택된게 없으면.\n      alert(\" 삭제할 항목을 선택해주세요 . 🙏 \");\n      return;\n    } else if (selectedData.length > 1) {\n      if (!window.confirm(\"⛔ 해당 계정과목 정보들을 삭제 하시겠습니까 ? ⛔ \")) {\n        alert(\"🧡💛💚💙💜🤎🖤🤍\");\n        return;\n      } else {\n        dispatch({\n          division: \"delete\",\n          type: types.BATCH_ACCOUNT_LIST_REQUEST,\n          params: {\n            accountInnerCode: selectedData[0].accountInnerCode\n          }\n        });\n      }\n    } else if (selectedData.length === 1) {\n      if (!window.confirm(\"⛔ 해당 \" + selectedData[0].accountName + \" 계정과목 정보를 삭제 하시겠습니까 ? ⛔ \")) {\n        alert(\"🧡💛💚💙💜🤎🖤🤍\");\n        return;\n      } else {\n        dispatch({\n          division: \"delete\",\n          type: types.BATCH_ACCOUNT_LIST_REQUEST,\n          params: {\n            accountInnerCode: selectedData[0].accountInnerCode\n          }\n        });\n      }\n    }\n\n    positionGridApi.updateRowData({\n      remove: selectedData\n    }); // 선택된 row 삭제\n\n    alert(\"삭제완료\");\n  };\n\n  const saveBtn = () => {\n    positionGridApi.selectAll(); // 그리드 전체 값\n\n    const rows = positionGridApi.getSelectedRows(); // 그리드의 모든 값을 반환\n\n    const rowsCount = positionGridApi.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n\n    if (!window.confirm(\" 저장하시겠습니까 ? \")) {\n      alert(\"💙 취소 완료 💙\");\n      return;\n    } else {\n      for (var i = 0; i < rowsCount; i++) {\n        delete rows[i].errorCode;\n        delete rows[i].errorMsg;\n        delete rows[i].chk;\n\n        if (rows[i].accountName === null && rows[i].accountCharacter === null) {\n          alert(\"계정과목명과 성격을 입력해주고 다시 저장 버튼을 눌러주세요.\");\n          rows[i].status = \"cancel\";\n          return;\n        } else if (rows[i].accountName === null) {\n          alert(\"계정과목명을 입력해주고 다시 저장 버튼을 눌러주세요.\");\n          rows[i].status = \"cancel\";\n          return;\n        } else if (rows[i].accountCharacter === null) {\n          alert(\"성격을 입력해주고 다시 저장 버튼을 눌러주세요.\");\n          rows[i].status = \"cancel\";\n          return;\n        } else if (rows[i].accountName !== null && rows[i].accountCharacter !== null) {\n          console.log(\"33333333333333  \" + JSON.stringify(data));\n        }\n      }\n\n      dispatch({\n        division: \"save\",\n        type: types.BATCH_ACCOUNT_LIST_REQUEST,\n        params: {\n          accountList: rows\n        }\n      });\n      alert(\"💚 저장완료 💚\");\n      accountList(); //조회\n    }\n  };\n\n  const onGridSizeChanged = params => {\n    var gridWidth = document.getElementById(\"grid-wrapperr\").offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth();\n\n      if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.colId);\n      } else {\n        columnsToShow.push(column.colId);\n      }\n    }\n\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit();\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(React.Fragment, null, React.createElement(AppBar, {\n    color: \"primary\",\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"\\uACC4\\uC815\\uACFC\\uBAA9\"), React.createElement(Typography, {\n    variant: \"h6\",\n    style: {\n      flexGrow: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }), React.createElement(Button, {\n    style: {\n      margin: \"5px\"\n    },\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: addBtn,\n    startIcon: React.createElement(Icon, {\n      className: \"fa fa-plus-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, \"\\uCD94\\uAC00\"), React.createElement(Button, {\n    style: {\n      margin: \"5px\"\n    },\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: deleteBtn,\n    startIcon: React.createElement(DeleteOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"), React.createElement(Button, {\n    style: {\n      margin: \"5px\"\n    },\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: saveBtn,\n    startIcon: React.createElement(ThreeSixtyIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, \"\\uC800\\uC7A5\"))), React.createElement(\"div\", {\n    id: \"grid-wrapperr\",\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    style: {\n      height: \"100vh\",\n      width: \"100%\",\n      align: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: accountColumn.columnDefs,\n    rowData: data // setData된 state를 결국 여기 넣어서 그리드에 표현함.\n    ,\n    rowSelection: \"multiple\" //하나만 선택하거나 복수개를 선택할 수 있음\n    ,\n    onGridReady: onGridReady,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    },\n    onCellEditingStarted: rowCellChanged,\n    onGridSizeChanged: onGridSizeChanged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }))));\n};\n\nexport default AccountGrid;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/account/base/page/AccountForm/AccountGrid.js"],"names":["React","useEffect","useState","useStyles","AgGridReact","types","axios","useDispatch","Icon","ThreeSixtyIcon","DeleteOutlinedIcon","AppBar","Button","Toolbar","Typography","useThemeSwitcher","AccountGrid","accountInfo","data","console","log","classes","positionGridApi","setPositionGridApi","dispatch","accountList","get","catch","e","onGridReady","params","api","sizeColumnsToFit","accountColumn","columnDefs","headerCheckboxSelection","checkboxSelection","rowSelection","rowMultiSelectionWhithClick","width","headerName","field","editable","hide","addBtn","newItem","NewRowData","updateRowData","add","addIndex","rowCount","getDisplayedRowCount","lastAccountInnerCode","getDisplayedRowAtIndex","accountInnerCode","lastAccountCode","accountCode","ParentAccountInnerCode","parentAccountInnerCode","AccountDivision","accountDivision","GroupCode","groupCode","Editable","newAccountInnerCode","parseInt","newAccountCode","numberPad","str","length","Array","join","newData","parentAccountInnercode","accountName","accountCharacter","status","rowCellChanged","deleteBtn","selectedData","getSelectedRows","JSON","stringify","alert","window","confirm","division","type","BATCH_ACCOUNT_LIST_REQUEST","remove","saveBtn","selectAll","rows","rowsCount","i","errorCode","errorMsg","chk","onGridSizeChanged","gridWidth","document","getElementById","offsetWidth","columnsToShow","columnsToHide","totalColsWidth","allColumns","columnApi","getAllColumns","column","getMinWidth","push","colId","setColumnsVisible","dark","flexGrow","margin","height","align","param"],"mappings":"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","sourcesContent":["//********************************** 2020-08-26 정대현 추가 **********************************\nimport React, { useEffect, useState } from \"react\";\nimport useStyles from \"erp/account/statement/page/AccountLedger/Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport * as types from \"../../reducer/BaseReducer\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport Icon from \"@material-ui/core/Icon\";\nimport ThreeSixtyIcon from \"@material-ui/icons/ThreeSixty\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport { AppBar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst AccountGrid = ({ accountInfo }) => {\n  const data = accountInfo;\n  console.log(data);\n\n  const classes = useStyles();\n  //const [data, setData] = useState();\n  const [positionGridApi, setPositionGridApi] = useState();\n  const dispatch = useDispatch(); //Redux 저장소에서 있는 함수를 데리고옴\n\n  //===================== useEffect로 비동기적으로 동작  ====================\n\n  //컴포넌트가 마운트 됐을 때 호출됨\n  /* useEffect(() => {\n    account(); // 함수호출\n  }, []); */\n\n  function accountList() {\n    axios\n      .get(\"http://localhost:8282/acc/base/getAccountList\")\n      /* .then(response => {\n        setData(response.data);\n      }) */\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  //========================== 그리드 객체 준비 ==========================\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 그리드 초기화 시 칼럼 사이즈 자동조절.\n  }; // 여긴 그냥 ag Grid의 api를 사용하기 위해 선언. 그리고 이곳은 ag Grid 초기화 시 실행된다.\n\n  //========================== 그리드내용 ==========================\n  const accountColumn = {\n    columnDefs: [\n      {\n        headerCheckboxSelection: true,\n        checkboxSelection: true,\n        rowSelection: \"multiple\",\n        rowMultiSelectionWhithClick: true,\n        width: \"23\",\n      },\n      { headerName: \"계정과목코드\", field: \"accountInnerCode\", width: 80 },\n      {\n        headerName: \"계정과목명\",\n        field: \"accountName\",\n        width: 100,\n        editable: true,\n      },\n      {\n        headerName: \"성격\",\n        field: \"accountCharacter\",\n        width: 80,\n        editable: true,\n      },\n      { headerName: \"상태\", field: \"status\", width: 80, hide: true },\n    ],\n  };\n\n  const addBtn = () => {\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n    positionGridApi.updateRowData({ add: [newItem], addIndex: \"\" }); // ag그리드 api로 그리드에 add 함\n  };\n\n  //추가할 컬럼 선언\n  const NewRowData = () => {\n    const rowCount = positionGridApi.getDisplayedRowCount(); // 그리드 행수를 카운트\n    const lastAccountInnerCode = positionGridApi.getDisplayedRowAtIndex(\n      rowCount - 1,\n    ).data.accountInnerCode; // 마지막 accountInnerCode 가져옴\n    const lastAccountCode = positionGridApi.getDisplayedRowAtIndex(rowCount - 1)\n      .data.accountCode; // 필요한 정보들을 담는다.\n    const ParentAccountInnerCode = positionGridApi.getDisplayedRowAtIndex(0)\n      .data.parentAccountInnerCode;\n    const AccountDivision = positionGridApi.getDisplayedRowAtIndex(0).data\n      .accountDivision;\n    const GroupCode = positionGridApi.getDisplayedRowAtIndex(0).data.groupCode;\n    const Editable = positionGridApi.getDisplayedRowAtIndex(0).data.editable;\n\n    var newAccountInnerCode = parseInt(lastAccountInnerCode) + 1;\n    var newAccountCode = parseInt(lastAccountCode) + 1;\n\n    function numberPad(str, width) {\n      // newCode 맨 앞의 숫자가 0이면 공백으로 처리하기 때문에 0을 살려주는 함수\n      str = str + \"\";\n      return str.length >= str\n        ? str\n        : new Array(width - str.length + 1).join(\"0\") + str;\n    }\n\n    newAccountInnerCode = numberPad(newAccountInnerCode, 4);\n    newAccountCode = numberPad(newAccountCode, 4);\n\n    let newData = {\n      accountInnerCode: newAccountInnerCode,\n      parentAccountInnercode: ParentAccountInnerCode,\n      accountCode: newAccountCode,\n      accountName: \"\",\n      accountCharacter: \"\",\n      accountDivision: AccountDivision,\n      groupCode: GroupCode,\n      editable: Editable,\n      status: \"insert\",\n    };\n    console.log(newData);\n    return newData;\n  };\n\n  ////편집 허용인 컬럼을 더블 클릭할 때 발생하는 이벤트.\n  const rowCellChanged = e => {\n    if (e.data.status === \"insert\") {\n      return;\n    } else {\n      e.data.status = \"update\";\n    }\n  };\n\n  //체크박스에 체크된 row만 삭제\n  const deleteBtn = () => {\n    const selectedData = positionGridApi.getSelectedRows(); //선택한 row\n    //const selectedDataCount = selectedData.rowcount;\n    console.log(selectedData);\n    console.log(selectedData.length);\n    console.log(\":::::::::::::::\" + JSON.stringify(selectedData.accountName));\n\n    if (selectedData.length === 0) {\n      // 선택된게 없으면.\n      alert(\" 삭제할 항목을 선택해주세요 . 🙏 \");\n      return;\n    } else if (selectedData.length > 1) {\n      if (\n        !window.confirm(\"⛔ 해당 계정과목 정보들을 삭제 하시겠습니까 ? ⛔ \")\n      ) {\n        alert(\"🧡💛💚💙💜🤎🖤🤍\");\n        return;\n      } else {\n        dispatch({\n          division: \"delete\",\n          type: types.BATCH_ACCOUNT_LIST_REQUEST,\n          params: { accountInnerCode: selectedData[0].accountInnerCode },\n        });\n      }\n    } else if (selectedData.length === 1) {\n      if (\n        !window.confirm(\n          \"⛔ 해당 \" +\n            selectedData[0].accountName +\n            \" 계정과목 정보를 삭제 하시겠습니까 ? ⛔ \",\n        )\n      ) {\n        alert(\"🧡💛💚💙💜🤎🖤🤍\");\n        return;\n      } else {\n        dispatch({\n          division: \"delete\",\n          type: types.BATCH_ACCOUNT_LIST_REQUEST,\n          params: { accountInnerCode: selectedData[0].accountInnerCode },\n        });\n      }\n    }\n    positionGridApi.updateRowData({ remove: selectedData }); // 선택된 row 삭제\n    alert(\"삭제완료\");\n  };\n\n  const saveBtn = () => {\n    positionGridApi.selectAll(); // 그리드 전체 값\n    const rows = positionGridApi.getSelectedRows(); // 그리드의 모든 값을 반환\n    const rowsCount = positionGridApi.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n\n    if (!window.confirm(\" 저장하시겠습니까 ? \")) {\n      alert(\"💙 취소 완료 💙\");\n      return;\n    } else {\n      for (var i = 0; i < rowsCount; i++) {\n        delete rows[i].errorCode;\n        delete rows[i].errorMsg;\n        delete rows[i].chk;\n        if (rows[i].accountName === null && rows[i].accountCharacter === null) {\n          alert(\"계정과목명과 성격을 입력해주고 다시 저장 버튼을 눌러주세요.\");\n          rows[i].status = \"cancel\";\n          return;\n        } else if (rows[i].accountName === null) {\n          alert(\"계정과목명을 입력해주고 다시 저장 버튼을 눌러주세요.\");\n          rows[i].status = \"cancel\";\n          return;\n        } else if (rows[i].accountCharacter === null) {\n          alert(\"성격을 입력해주고 다시 저장 버튼을 눌러주세요.\");\n          rows[i].status = \"cancel\";\n          return;\n        } else if (\n          rows[i].accountName !== null &&\n          rows[i].accountCharacter !== null\n        ) {\n          console.log(\"33333333333333  \" + JSON.stringify(data));\n        }\n      }\n      dispatch({\n        division: \"save\",\n        type: types.BATCH_ACCOUNT_LIST_REQUEST,\n        params: { accountList: rows },\n      });\n      alert(\"💚 저장완료 💚\");\n      accountList(); //조회\n    }\n  };\n\n  const onGridSizeChanged = params => {\n    var gridWidth = document.getElementById(\"grid-wrapperr\").offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth();\n      if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.colId);\n      } else {\n        columnsToShow.push(column.colId);\n      }\n    }\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit();\n  };\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <>\n      <AppBar color=\"primary\" position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\">계정과목</Typography>\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}></Typography>\n          <Button\n            style={{ margin: \"5px\" }}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={addBtn}\n            startIcon={<Icon className=\"fa fa-plus-circle\" />}\n          >\n            추가\n          </Button>\n          <Button\n            style={{ margin: \"5px\" }}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={deleteBtn}\n            startIcon={<DeleteOutlinedIcon />}\n          >\n            삭제\n          </Button>\n          <Button\n            style={{ margin: \"5px\" }}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={saveBtn}\n            startIcon={<ThreeSixtyIcon />}\n          >\n            저장\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <div id=\"grid-wrapperr\" style={{ width: \"100%\", height: \"100%\" }}>\n        <div\n          className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n          style={{\n            height: \"100vh\",\n            width: \"100%\",\n            align: \"center\",\n          }}\n        >\n          <AgGridReact\n            columnDefs={accountColumn.columnDefs}\n            rowData={data} // setData된 state를 결국 여기 넣어서 그리드에 표현함.\n            rowSelection=\"multiple\" //하나만 선택하거나 복수개를 선택할 수 있음\n            onGridReady={onGridReady}\n            getRowStyle={function(param) {\n              return { \"text-align\": \"center\" };\n            }}\n            onCellEditingStarted={rowCellChanged}\n            onGridSizeChanged={onGridSizeChanged}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AccountGrid;\n"]},"metadata":{},"sourceType":"module"}