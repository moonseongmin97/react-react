{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\base\\\\page\\\\ItemInfo\\\\ItemInfo.js\";\nimport React, { useState, useEffect } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { Button, Grid } from '@material-ui/core';\nimport SelectItemInfo from './SelectItemInfo';\nimport Axios from 'axios';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport AddItemDialog from './AddItemDialog';\nimport useAsync from 'util/useAsync';\nimport * as Api from 'erp/logistic/base/api';\n\nfunction ItemInfo(props) {\n  const [list, setList] = useState([]);\n  const columns = {\n    columnDefs: [{\n      width: '80',\n      headerCheckboxSelection: false,\n      checkboxSelection: true\n    }, {\n      headerName: '품목 코드',\n      field: 'itemCode'\n    }, {\n      headerName: '품목명',\n      field: 'itemName',\n      editable: true\n    }, {\n      headerName: '품목군 코드',\n      field: 'itemGroupCode',\n      editable: true\n    }, {\n      headerName: '품목 분류',\n      field: 'itemClassification',\n      editable: true\n    }, {\n      headerName: '단위',\n      field: 'unitOfStock'\n    }, {\n      headerName: '손실율',\n      field: 'lossRate',\n      editable: true\n    }, {\n      headerName: '소요일',\n      field: 'leadTime',\n      editable: true\n    }, {\n      headerName: '표준단가',\n      field: 'standardUnitPrice',\n      editable: true\n    }, {\n      headerName: '설명',\n      field: 'description',\n      editable: true\n    }, {\n      headerName: '품목 사용여부',\n      field: 'codeUseCheck',\n      editable: true\n    }]\n  };\n\n  const getList = getList => {\n    setList(getList);\n  };\n\n  const [code, setCode] = useState('');\n  const [detailCode, setDetailCode] = useState('');\n\n  const getDivisionCode = getDivisionCode => {\n    if (getDivisionCode === 'IT') {\n      setCode('ITEM_CLASSIFICATION');\n    }\n\n    if (getDivisionCode === 'IT-GROUP') {\n      setCode('ITEM_GROUP_CODE');\n    }\n  };\n\n  const getDetailCode = getDetailCode => {\n    setDetailCode(getDetailCode);\n  };\n  /*\n      const [state, refetch] = \n      useAsync(() => Api.searchItem(code,detailCode,setList), [code,detailCode,setList], true);\n  \n      console.log(state);\n    */\n\n\n  useEffect(() => {\n    if (detailCode !== '') {\n      if (code === 'ITEM_GROUP_CODE') {\n        Api.searchItemA(code, detailCode).then(function (respones) {\n          setList(respones.data.gridRowJson);\n        });\n      }\n\n      if (code === 'ITEM_CLASSIFICATION') {\n        Api.searchItemB(code, detailCode).then(function (respones) {\n          setList(respones.data.gridRowJson);\n        });\n      }\n    }\n  }, [code, detailCode]);\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const close = () => {\n    setOpenDialog(false);\n  };\n\n  const addClick = () => {\n    setOpenDialog(true);\n  };\n\n  function onSubmit(itemTo) {\n    console.log(itemTo);\n    var map = [];\n    map.push(itemTo);\n\n    try {\n      Api.batchItemListProcess(map).then(function (respones) {\n        console.log(respones.data.errorCode);\n\n        if (parseInt(respones.data.errorCode) > 0) {\n          alert('신청 성공하였습니다.^^ ' + respones.data.errorMsg);\n        }\n\n        if (parseInt(respones.data.errorCode) < 0) {\n          alert('신청 실패하였습니다.');\n        }\n      });\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  const [selectList, setSelectList] = useState(null);\n  const [delData, setDelData] = useState({});\n  const [updateData, setUpdateData] = useState({});\n  const [grid, setGrid] = useState();\n\n  const api = params => {\n    setGrid(params.api);\n  }; // const onRowSelected = (e) => {\n  //     var rows = e.api.getSelectedRows();\n  //     for(var row of rows){\n  //          row.status = 'DELETE';\n  //      }\n  //      setDelData(rows);\n  //     console.log(\"체크한 delete 정보 : \", delData);\n  // }\n\n\n  const deleteItem = () => {\n    var getList = [];\n    const rowsCount = grid.getDisplayedRowCount();\n    var rows = grid.getSelectedRows();\n\n    for (var row of rows) {\n      row.status = 'DELETE';\n    }\n\n    for (var i = 0; i < rowsCount; i++) {\n      getList.push(grid.getRowNode(i).data);\n    }\n\n    var newList = getList.filter(ele => {\n      if (ele.status !== 'DELETE') {\n        return ele;\n      }\n    });\n    var delList = getList.filter(ele => {\n      if (ele.status === 'DELETE') {\n        return ele;\n      }\n    });\n    console.log(delList);\n    setList(newList); // axios 해서 delList 보낸다.\n\n    try {\n      Api.delBatchList(delList).then(function (respones) {\n        console.log(respones.data.errorCode);\n\n        if (parseInt(respones.data.errorCode) > 0) {\n          alert('삭제되었습니다.^^ ' + respones.data.errorMsg);\n        }\n\n        if (parseInt(respones.data.errorCode) < 0) {\n          alert('삭제 실패');\n        }\n      });\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  const updataItem = () => {\n    var rows = grid.getSelectedRows();\n\n    for (var row of rows) {\n      row.status = 'UPDATE';\n    }\n\n    console.log(rows);\n\n    try {\n      Api.rowsBatchList(rows).then(function (respones) {\n        console.log(respones.data.errorCode);\n\n        if (parseInt(respones.data.errorCode) > 0) {\n          alert('수정되었습니다.^^ ' + respones.data.errorMsg);\n        }\n\n        if (parseInt(respones.data.errorCode) < 0) {\n          alert('수정실패.');\n        }\n      });\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  const save = () => {\n    console.log('삭제할 delData : ', delData);\n    console.log('수정할 updateDate : ', updateData);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(MyGrid, {\n    column: columns,\n    title: '품 목 조 회',\n    list: list,\n    rowSelection: \"multiple\" //onRowSelected={onRowSelected}\n    ,\n    api: api,\n    onGridReady: event => {\n      event.api.sizeColumnsToFit();\n      setSelectList(event.api);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    align: \"left\",\n    style: {\n      float: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(SelectItemInfo, {\n    getList: getList,\n    getDivisionCode: getDivisionCode,\n    getDetailCode: getDetailCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  })), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: addClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"\\uD488\\uBAA9 \\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: updataItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"\\uC218\\uC815\\uC0AC\\uD56D \\uC800\\uC7A5\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: deleteItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, \"\\uC120\\uD0DD\\uC0AD\\uC81C\")), React.createElement(MyDialog, {\n    close: close,\n    open: openDialog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, React.createElement(AddItemDialog, {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }))));\n}\n\nexport default ItemInfo;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/erp/logistic/base/page/ItemInfo/ItemInfo.js"],"names":["React","useState","useEffect","MyGrid","Button","Grid","SelectItemInfo","Axios","MyDialog","AddItemDialog","useAsync","Api","ItemInfo","props","list","setList","columns","columnDefs","width","headerCheckboxSelection","checkboxSelection","headerName","field","editable","getList","code","setCode","detailCode","setDetailCode","getDivisionCode","getDetailCode","searchItemA","then","respones","data","gridRowJson","searchItemB","openDialog","setOpenDialog","close","addClick","onSubmit","itemTo","console","log","map","push","batchItemListProcess","errorCode","parseInt","alert","errorMsg","e","selectList","setSelectList","delData","setDelData","updateData","setUpdateData","grid","setGrid","api","params","deleteItem","rowsCount","getDisplayedRowCount","rows","getSelectedRows","row","status","i","getRowNode","newList","filter","ele","delList","delBatchList","updataItem","rowsBatchList","save","event","sizeColumnsToFit","float","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { Button, Grid } from '@material-ui/core';\nimport SelectItemInfo from './SelectItemInfo';\nimport Axios from 'axios';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport AddItemDialog from './AddItemDialog';\nimport useAsync from 'util/useAsync';\nimport * as Api from 'erp/logistic/base/api';\n\nfunction ItemInfo(props) {\n    const [list, setList] = useState([]);\n    const columns = {\n        columnDefs: [\n            { width: '80', headerCheckboxSelection: false, checkboxSelection: true },\n            { headerName: '품목 코드', field: 'itemCode' },\n            { headerName: '품목명', field: 'itemName', editable: true },\n            { headerName: '품목군 코드', field: 'itemGroupCode', editable: true },\n            { headerName: '품목 분류', field: 'itemClassification', editable: true },\n            { headerName: '단위', field: 'unitOfStock' },\n            { headerName: '손실율', field: 'lossRate', editable: true },\n            { headerName: '소요일', field: 'leadTime', editable: true },\n            { headerName: '표준단가', field: 'standardUnitPrice', editable: true },\n            { headerName: '설명', field: 'description', editable: true },\n            { headerName: '품목 사용여부', field: 'codeUseCheck', editable: true }\n        ]\n    };\n    const getList = getList => {\n        setList(getList);\n    };\n\n    const [code, setCode] = useState('');\n    const [detailCode, setDetailCode] = useState('');\n\n    const getDivisionCode = getDivisionCode => {\n        if (getDivisionCode === 'IT') {\n            setCode('ITEM_CLASSIFICATION');\n        }\n        if (getDivisionCode === 'IT-GROUP') {\n            setCode('ITEM_GROUP_CODE');\n        }\n    };\n\n    const getDetailCode = getDetailCode => {\n        setDetailCode(getDetailCode);\n    };\n/*\n    const [state, refetch] = \n    useAsync(() => Api.searchItem(code,detailCode,setList), [code,detailCode,setList], true);\n\n    console.log(state);\n  */  \n    useEffect(() => {\n        if (detailCode !== '') {\n            if (code === 'ITEM_GROUP_CODE') {\n                Api.searchItemA(code,detailCode).then(function(respones) {\n                    setList(respones.data.gridRowJson);\n                });\n            }\n            if (code === 'ITEM_CLASSIFICATION') {\n                Api.searchItemB(code, detailCode).then(function(respones) {\n                    setList(respones.data.gridRowJson);\n                });\n            }\n        }\n    }, [code, detailCode]);\n\n\n    const [openDialog, setOpenDialog] = useState(false);\n    const close = () => {\n        setOpenDialog(false);\n    };\n\n    const addClick = () => {\n        setOpenDialog(true);\n    };\n\n    function onSubmit(itemTo) {\n        console.log(itemTo);\n        var map = [];\n        map.push(itemTo);\n        try {\n                Api.batchItemListProcess(map).then(function(respones) {\n                console.log(respones.data.errorCode);\n                if (parseInt(respones.data.errorCode) > 0) {\n                    alert('신청 성공하였습니다.^^ ' + respones.data.errorMsg);\n                }\n                if (parseInt(respones.data.errorCode) < 0) {\n                    alert('신청 실패하였습니다.');\n                }\n            });\n        } catch (e) {\n            alert(e);\n        }\n    }\n\n    const [selectList, setSelectList] = useState(null);\n    const [delData, setDelData] = useState({});\n    const [updateData, setUpdateData] = useState({});\n    const [grid, setGrid] = useState();\n\n    const api = params => {\n        setGrid(params.api);\n    };\n\n    // const onRowSelected = (e) => {\n    //     var rows = e.api.getSelectedRows();\n    //     for(var row of rows){\n    //          row.status = 'DELETE';\n    //      }\n    //      setDelData(rows);\n\n    //     console.log(\"체크한 delete 정보 : \", delData);\n    // }\n\n    const deleteItem = () => {\n        var getList = [];\n        const rowsCount = grid.getDisplayedRowCount();\n        var rows = grid.getSelectedRows();\n        for (var row of rows) {\n            row.status = 'DELETE';\n        }\n        for (var i = 0; i < rowsCount; i++) {\n            getList.push(grid.getRowNode(i).data);\n        }\n        var newList = getList.filter(ele => {\n            if (ele.status !== 'DELETE') {\n                return ele;\n            }\n        });\n\n        var delList = getList.filter(ele => {\n            if (ele.status === 'DELETE') {\n                return ele;\n            }\n        });\n        console.log(delList);\n        setList(newList);\n        // axios 해서 delList 보낸다.\n        try {\n            Api.delBatchList(delList).then(function(respones) {\n                console.log(respones.data.errorCode);\n                if (parseInt(respones.data.errorCode) > 0) {\n                    alert('삭제되었습니다.^^ ' + respones.data.errorMsg);\n                }\n                if (parseInt(respones.data.errorCode) < 0) {\n                    alert('삭제 실패');\n                }\n            });\n        } catch (e) {\n            alert(e);\n        }\n    };\n\n    const updataItem = () => {\n        var rows = grid.getSelectedRows();\n        for (var row of rows) {\n            row.status = 'UPDATE';\n        }\n        console.log(rows);\n        try {\n            Api.rowsBatchList(rows).then(function(respones) {\n                console.log(respones.data.errorCode);\n                if (parseInt(respones.data.errorCode) > 0) {\n                    alert('수정되었습니다.^^ ' + respones.data.errorMsg);\n                }\n                if (parseInt(respones.data.errorCode) < 0) {\n                    alert('수정실패.');\n                }\n            });\n        } catch (e) {\n            alert(e);\n        }\n    };\n\n    const save = () => {\n        console.log('삭제할 delData : ', delData);\n        console.log('수정할 updateDate : ', updateData);\n    };\n\n    return (\n        <div>\n            <MyGrid\n                column={columns}\n                title={'품 목 조 회'}\n                list={list}\n                rowSelection=\"multiple\"\n                //onRowSelected={onRowSelected}\n                api={api}\n                onGridReady={event => {\n                    event.api.sizeColumnsToFit();\n                    setSelectList(event.api);\n                }}\n            >\n                <div align=\"left\" style={{ float: 'left' }}>\n                    <SelectItemInfo\n                        getList={getList}\n                        getDivisionCode={getDivisionCode}\n                        getDetailCode={getDetailCode}\n                    />\n                </div>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={addClick}\n                >\n                    품목 추가\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={updataItem}\n                >\n                    수정사항 저장\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={deleteItem}\n                >\n                    선택삭제\n                </Button>\n            </MyGrid>\n            <MyDialog close={close} open={openDialog}>\n                <div>\n                    <AddItemDialog onSubmit={onSubmit} />\n                </div>\n            </MyDialog>\n        </div>\n    );\n}\n\nexport default ItemInfo;\n"]},"metadata":{},"sourceType":"module"}