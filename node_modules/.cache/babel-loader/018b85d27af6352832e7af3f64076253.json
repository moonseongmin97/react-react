{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\statement\\\\page\\\\AccountLedger\\\\AccountLedgerGrid.js\";\nimport React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport useStyles from \"./Theme\";\nimport { useSelector } from \"react-redux\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\"; //AccountSearch 선택한 코드 넘겨받음 {code}\n\nconst AccountLedgerSearch = () => {\n  const classes = useStyles(); //스타일적용\n\n  const {\n    data\n  } = useSelector(state => state.AccReducer.StatementReducer); //DB에서 받아온 값을 그리드에뿌리려고 데꼬옴\n\n  const {\n    isLoading\n  } = useSelector(state => state.AccReducer.StatementReducer); // 그리드뿌릴때 쓸 LOADING....\n  // 그리드 컬럼 정의\n\n  const AccountLedgerGrid = [{\n    headerName: \"작성일자\",\n    field: \"reportingDate\",\n    sortable: true //컬럼 눌러서 정렬가능하게 함\n\n  }, {\n    headerName: \"차변\",\n    field: \"leftDebtorPrice\",\n    valueFormatter: ' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"' // 3칸마다 , 찍고 마지막에 원 붙임\n\n  }, {\n    headerName: \"대변\",\n    field: \"rightCreditsPrice\",\n    valueFormatter: ' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"'\n  }, {\n    headerName: \"잔액금\",\n    field: \"totalPrice\",\n    valueFormatter: ' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"'\n  }];\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(\"div\", {\n    align: \"center\",\n    className: classes.margin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    style: {\n      height: \"100vh\" //width: \"100%\",\n      //paddingTop: \"25px\",\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, !isLoading ? React.createElement(AgGridReact, {\n    columnDefs: AccountLedgerGrid,\n    rowData: data,\n    rowSelection: \"single\",\n    getRowStyle: function (param) {\n      if (param.node.rowPinned) {\n        return {\n          \"font-weight\": \"bold\",\n          background: \"#CEFBC9\"\n        };\n      }\n\n      return {\n        \"text-align\": \"center\"\n      }; // bady 값 가운데정렬\n    },\n    onGridReady: event => {\n      //그리드 크기자동조절\n      event.api.sizeColumnsToFit();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }) : React.createElement(\"h1\", {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Loading...\")));\n};\n\nexport default AccountLedgerSearch;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/account/statement/page/AccountLedger/AccountLedgerGrid.js"],"names":["React","AgGridReact","useStyles","useSelector","useThemeSwitcher","AccountLedgerSearch","classes","data","state","AccReducer","StatementReducer","isLoading","AccountLedgerGrid","headerName","field","sortable","valueFormatter","dark","margin","height","param","node","rowPinned","background","event","api","sizeColumnsToFit"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,SAAP,MAAsB,SAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,gBAAT,QAAiC,oBAAjC,C,CAEA;;AACA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAMC,OAAO,GAAGJ,SAAS,EAAzB,CADgC,CACH;;AAE7B,QAAM;AAAEK,IAAAA;AAAF,MAAWJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,UAAN,CAAiBC,gBAA3B,CAA5B,CAHgC,CAG0C;;AAC1E,QAAM;AAAEC,IAAAA;AAAF,MAAgBR,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,UAAN,CAAiBC,gBAA3B,CAAjC,CAJgC,CAI+C;AAE/E;;AACA,QAAME,iBAAiB,GAAG,CACxB;AACEC,IAAAA,UAAU,EAAE,MADd;AAEEC,IAAAA,KAAK,EAAE,eAFT;AAGEC,IAAAA,QAAQ,EAAE,IAHZ,CAGkB;;AAHlB,GADwB,EAMxB;AACEF,IAAAA,UAAU,EAAE,IADd;AAEEC,IAAAA,KAAK,EAAE,iBAFT;AAGEE,IAAAA,cAAc,EACZ,gFAJJ,CAIsF;;AAJtF,GANwB,EAYxB;AACEH,IAAAA,UAAU,EAAE,IADd;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEE,IAAAA,cAAc,EACZ;AAJJ,GAZwB,EAkBxB;AACEH,IAAAA,UAAU,EAAE,KADd;AAEEC,IAAAA,KAAK,EAAE,YAFT;AAGEE,IAAAA,cAAc,EACZ;AAJJ,GAlBwB,CAA1B;AA0BA,QAAM;AAAEC,IAAAA;AAAF,MAAWb,gBAAgB,EAAjC;AAEA,SACE;AAAK,IAAA,KAAK,EAAC,QAAX;AAAoB,IAAA,SAAS,EAAEE,OAAO,CAACY,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAED,IAAI,GAAG,sBAAH,GAA4B,mBAD7C;AAEE,IAAA,KAAK,EAAE;AACLE,MAAAA,MAAM,EAAE,OADH,CAEL;AACA;;AAHK,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQG,CAACR,SAAD,GACC,oBAAC,WAAD;AACE,IAAA,UAAU,EAAEC,iBADd;AAEE,IAAA,OAAO,EAAEL,IAFX;AAGE,IAAA,YAAY,EAAC,QAHf;AAIE,IAAA,WAAW,EAAE,UAASa,KAAT,EAAgB;AAC3B,UAAIA,KAAK,CAACC,IAAN,CAAWC,SAAf,EAA0B;AACxB,eAAO;AAAE,yBAAe,MAAjB;AAAyBC,UAAAA,UAAU,EAAE;AAArC,SAAP;AACD;;AACD,aAAO;AAAE,sBAAc;AAAhB,OAAP,CAJ2B,CAIQ;AACpC,KATH;AAUE,IAAA,WAAW,EAAEC,KAAK,IAAI;AACpB;AACAA,MAAAA,KAAK,CAACC,GAAN,CAAUC,gBAAV;AACD,KAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAiBC;AAAI,IAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzBJ,CADF,CADF;AAgCD,CAnED;;AAoEA,eAAerB,mBAAf","sourcesContent":["import React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport useStyles from \"./Theme\";\nimport { useSelector } from \"react-redux\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\n//AccountSearch 선택한 코드 넘겨받음 {code}\nconst AccountLedgerSearch = () => {\n  const classes = useStyles(); //스타일적용\n\n  const { data } = useSelector(state => state.AccReducer.StatementReducer); //DB에서 받아온 값을 그리드에뿌리려고 데꼬옴\n  const { isLoading } = useSelector(state => state.AccReducer.StatementReducer); // 그리드뿌릴때 쓸 LOADING....\n\n  // 그리드 컬럼 정의\n  const AccountLedgerGrid = [\n    {\n      headerName: \"작성일자\",\n      field: \"reportingDate\",\n      sortable: true, //컬럼 눌러서 정렬가능하게 함\n    },\n    {\n      headerName: \"차변\",\n      field: \"leftDebtorPrice\",\n      valueFormatter:\n        ' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"', // 3칸마다 , 찍고 마지막에 원 붙임\n    },\n    {\n      headerName: \"대변\",\n      field: \"rightCreditsPrice\",\n      valueFormatter:\n        ' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"',\n    },\n    {\n      headerName: \"잔액금\",\n      field: \"totalPrice\",\n      valueFormatter:\n        ' Math.floor(value).toString().replace(/(\\\\d)(?=(\\\\d{3})+(?!\\\\d))/g, \"$1,\")+\"원\"',\n    },\n  ];\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <div align=\"center\" className={classes.margin}>\n      <div\n        className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n        style={{\n          height: \"100vh\",\n          //width: \"100%\",\n          //paddingTop: \"25px\",\n        }}\n      >\n        {!isLoading ? (\n          <AgGridReact\n            columnDefs={AccountLedgerGrid}\n            rowData={data}\n            rowSelection=\"single\"\n            getRowStyle={function(param) {\n              if (param.node.rowPinned) {\n                return { \"font-weight\": \"bold\", background: \"#CEFBC9\" };\n              }\n              return { \"text-align\": \"center\" }; // bady 값 가운데정렬\n            }}\n            onGridReady={event => {\n              //그리드 크기자동조절\n              event.api.sizeColumnsToFit();\n            }}\n          />\n        ) : (\n          <h1 align=\"center\">Loading...</h1>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default AccountLedgerSearch;\n"]},"metadata":{},"sourceType":"module"}