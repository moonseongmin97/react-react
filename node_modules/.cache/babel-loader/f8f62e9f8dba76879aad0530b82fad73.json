{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\hr\\\\attendance\\\\page\\\\Employment\\\\EmploymentSearchGrid.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport UseStyles from \"./UseStyles\";\nimport { Paper, TextField, Button, Grid, AppBar } from \"@material-ui/core\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\nimport useInput from \"util/useInput\";\nimport EmploymentInput from \"./EmploymentInput\";\nimport Axios from \"axios\";\nimport moment from \"moment\";\n\nfunction EmploymentSearchGrid(props) {\n  //2020년1월1일부터 현재날짜\n  const today = new Date(); // const date =\n  //   today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\n\n  let date = moment(new Date()).format(\"yyyy-MM-DD\");\n  const classes = UseStyles(); // const startDate = useInput(today.getFullYear() + \"-01-01\");\n\n  const [startDate, setStartDate] = useState(today.getFullYear() + \"-01-01\");\n  const [endDate, setEndDate] = useState(date);\n  const [deleteGridList, setDeleteGridList] = useState(null);\n  const [delData, setDelData] = useState([]); //empInfo에 저장된 정보 가져옴\n\n  const empInfo = useSelector(state => state.logInOutReducer.empInfo);\n  const empName = empInfo.empName;\n  const empCode = empInfo.empCode; //그리드 value값\n\n  const columnDefs = EmploymentInput;\n\n  const searchEmployment = () => {\n    console.log(\"grid 최초 보냄 \" + startDate, endDate, empCode);\n    props.handleEmployment(startDate, endDate, empCode);\n  }; //선택한 rowData delData에 저장\n\n\n  const onRowSelected = e => {\n    setDelData(e.api.getSelectedRows());\n  };\n\n  const deleteEmployment = () => {\n    console.log(delData);\n\n    if (delData.length === 0) {\n      alert(\"삭제할 항목을 체크 해주세요.\");\n    } else {\n      Axios.post('http://localhost:8282/hr/certificate/deleteCertificate', delData).then(function (respones) {\n        const errorCode = respones.data.errorCode;\n\n        if (parseInt(errorCode) === 0) {\n          alert(\"삭제 성공하였습니다.\");\n          deleteGridList.updateRowData({\n            remove: delData\n          });\n        } else {\n          alert(\"삭제 실패하였습니다.\");\n        }\n      });\n    }\n  };\n\n  const data = useSelector(({\n    hr\n  }) => hr.attdance.searchEmployment.certificateList);\n  return React.createElement(React.Fragment, null, React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.rightPaper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"startDate\",\n    label: \"검색날짜\",\n    type: \"date\",\n    defaultValue: startDate,\n    onChange: e => {\n      setStartDate(e.target.value);\n    },\n    className: classes.textField,\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), \"~\", React.createElement(TextField, {\n    id: \"endDate\",\n    label: \"검색날짜\",\n    type: \"date\",\n    defaultValue: endDate,\n    onChange: e => {\n      setEndDate(e.target.value);\n    },\n    className: classes.textField,\n    InputLabelProps: {\n      shrink: true\n    },\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"hidden\",\n    value: empCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    label: \"\\uC9C1\\uC6D0\\uBA85\",\n    id: \"empName\",\n    defaultValue: empName,\n    className: classes.textField,\n    InputLabelProps: {\n      shrink: true\n    },\n    InputProps: {\n      readOnly: true\n    },\n    variant: \"filled\",\n    size: \"small\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: searchEmployment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"\\uC870\\uD68C\"), React.createElement(Button, {\n    variant: \"outlined\",\n    color: \"primary\",\n    className: classes.button,\n    onClick: deleteEmployment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\")), React.createElement(\"div\", {\n    className: \"ag-theme-material\",\n    style: {\n      height: \"500px\",\n      width: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: columnDefs,\n    rowData: data,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    },\n    rowSelection: \"multiple\",\n    onRowSelected: onRowSelected,\n    onGridSizeChanged: event => {\n      event.api.sizeColumnsToFit();\n    },\n    onGridReady: event => {\n      event.api.sizeColumnsToFit();\n      setDeleteGridList(event.api);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }))))));\n}\n\nexport default EmploymentSearchGrid;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/hr/attendance/page/Employment/EmploymentSearchGrid.js"],"names":["React","useState","useEffect","useDispatch","useSelector","UseStyles","Paper","TextField","Button","Grid","AppBar","AgGridReact","useInput","EmploymentInput","Axios","moment","EmploymentSearchGrid","props","today","Date","date","format","classes","startDate","setStartDate","getFullYear","endDate","setEndDate","deleteGridList","setDeleteGridList","delData","setDelData","empInfo","state","logInOutReducer","empName","empCode","columnDefs","searchEmployment","console","log","handleEmployment","onRowSelected","e","api","getSelectedRows","deleteEmployment","length","alert","post","then","respones","errorCode","data","parseInt","updateRowData","remove","hr","attdance","certificateList","rightPaper","target","value","textField","shrink","readOnly","button","height","width","param","event","sizeColumnsToFit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport UseStyles from \"./UseStyles\";\nimport {\n  Paper,\n  TextField,\n  Button,\n  Grid,\n  AppBar,\n} from \"@material-ui/core\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\nimport useInput from \"util/useInput\";\nimport EmploymentInput from \"./EmploymentInput\";\nimport Axios from \"axios\";\nimport moment from \"moment\";\n\nfunction EmploymentSearchGrid(props) {\n  //2020년1월1일부터 현재날짜\n  const today = new Date();\n  // const date =\n  //   today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\n  let date = moment(new Date()).format(\"yyyy-MM-DD\");\n  const classes = UseStyles();\n  // const startDate = useInput(today.getFullYear() + \"-01-01\");\n\n  const [startDate, setStartDate] = useState(today.getFullYear() + \"-01-01\");\n  const [endDate, setEndDate] = useState(date);\n  const [deleteGridList ,setDeleteGridList] = useState(null);\n  const [delData, setDelData] = useState([]);\n\n  //empInfo에 저장된 정보 가져옴\n  const empInfo = useSelector(state => state.logInOutReducer.empInfo);\n  const empName = empInfo.empName;\n  const empCode = empInfo.empCode;\n\n\n\n  //그리드 value값\n  const columnDefs = EmploymentInput;\n\n  const searchEmployment = () => {\n    console.log(\"grid 최초 보냄 \" + startDate, endDate, empCode);\n    props.handleEmployment(startDate, endDate, empCode);\n  };\n\n  //선택한 rowData delData에 저장\n  const onRowSelected = e => {\n    setDelData(e.api.getSelectedRows());\n  }\n\n  const deleteEmployment = () => {\n    console.log(delData)\n    if(delData.length === 0 ){\n      alert(\"삭제할 항목을 체크 해주세요.\");\n    }else{\n      Axios.post('http://localhost:8282/hr/certificate/deleteCertificate', delData)\n      .then(function(respones){\n        const errorCode = respones.data.errorCode\n        if(parseInt(errorCode) === 0){\n          alert(\"삭제 성공하였습니다.\")\n          deleteGridList.updateRowData({ remove: delData });\n        }else{\n          alert(\"삭제 실패하였습니다.\");\n        }\n      })\n    }\n  }\n\n  const data = useSelector(({hr}) => hr.attdance.searchEmployment.certificateList);\n  return (\n    <>\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n          <Paper className={classes.rightPaper}>\n            <div>\n              <TextField\n                id={\"startDate\"}\n                label={\"검색날짜\"}\n                type={\"date\"}\n                defaultValue={startDate}\n                onChange={e => {\n                  setStartDate(e.target.value);\n                }}\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n              />\n              ~\n              <TextField\n                id={\"endDate\"}\n                label={\"검색날짜\"}\n                type={\"date\"}\n                defaultValue={endDate}\n                onChange={e => {\n                  setEndDate(e.target.value);\n                }}\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n              />\n              <input type=\"hidden\" value={empCode} />\n              <TextField\n                label=\"직원명\"\n                id={\"empName\"}\n                defaultValue={empName}\n                className={classes.textField}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                InputProps={{\n                  readOnly: true,\n                }}\n                variant=\"filled\"\n                size=\"small\"\n                type={\"text\"}\n              />\n              <Button\n                variant={\"outlined\"}\n                color={\"primary\"}\n                className={classes.button}\n                onClick={searchEmployment}\n              >\n                조회\n              </Button>\n              <Button\n                variant={\"outlined\"}\n                color={\"primary\"}\n                className={classes.button}\n                onClick={deleteEmployment}\n              >\n                삭제\n              </Button>\n            </div>\n            <div\n              className={\"ag-theme-material\"}\n              style={{\n                height: \"500px\",\n                width: \"100%\",\n              }}\n            >\n              <AgGridReact \n              columnDefs={columnDefs} \n              rowData={data} \n              getRowStyle={function (param) { return { \"text-align\": \"center\" }; }}\n              rowSelection=\"multiple\"\n              onRowSelected={onRowSelected}\n              onGridSizeChanged={event => {\n                event.api.sizeColumnsToFit();\n              }}\n              onGridReady={event => {\n                event.api.sizeColumnsToFit();\n                setDeleteGridList(event.api);\n              }}\n              />\n            </div>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default EmploymentSearchGrid;\n"]},"metadata":{},"sourceType":"module"}