{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\sales\\\\page\\\\SalesPlanInfo\\\\SalesPlanInfoSearch.js\";\nimport { Button, FormGroup } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport MyCalendar from 'util/LogiUtil/MyCalendar';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport SalesPlanItemDialog from './SalesPlanItemDialog';\nimport SalesPlanSumDialog from './SalesPlanSumDialog';\nimport $ from 'jquery';\nimport jQuery from 'jquery';\nimport { AlternateEmailRounded } from '@material-ui/icons';\nimport { getDatePicker } from 'erp/hr/util/datePicker';\n\nfunction SalesPlanInfoSearch(props) {\n  const [list, setList] = useState([]);\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n  const [grid, setGrid] = useState();\n  const [ItemRow, setItemRow] = useState('');\n  const [sumRow, setSumRow] = useState('');\n  const [nodeid, setNodeId] = useState('');\n  const [salesPlanItemDialog, setSalesPlanItemDialog] = useState(false);\n  const [salesPlanSumDialog, setSalesPlanSumDialog] = useState(false);\n  const [size, setSize] = useState('50vh');\n  const [sumOpen, setSumOpen] = useState(''); //다이알로그에서 가져온 값\n\n  const [selCustomer, setSelCutomer] = useState({\n    detailCodeName: '',\n    detailCode: ''\n  });\n\n  const onChangeDate = e => {\n    console.log(e);\n\n    if (e.target.id === 'startDate') {\n      setStartDate(e.target.value);\n    } else {\n      setEndDate(e.target.value);\n    }\n  };\n\n  console.log();\n  const column = {\n    columnDefs: [{\n      headerName: '',\n      field: 'check',\n      width: 50,\n      checkboxSelection: true\n    }, {\n      headerName: '판매계획일련번호',\n      field: 'salesPlanNo'\n    }, {\n      headerName: '품목코드',\n      field: 'itemCode'\n    }, {\n      headerName: '품목명',\n      field: 'itemName'\n    }, {\n      headerName: '단위',\n      field: 'unitOfSales'\n    }, {\n      headerName: '판매계획일',\n      field: 'salesPlanDate',\n      editable: true,\n      cellEditor: 'datePicker'\n    }, {\n      headerName: '계획수량',\n      field: 'salesAmount'\n    }, {\n      headerName: '계획단가',\n      field: 'unitPriceOfSales'\n    }, {\n      headerName: '합계액',\n      field: 'sumPriceOfSales'\n    }, {\n      headerName: '판매마감일',\n      field: 'dueDateOfSales',\n      editable: true,\n      cellEditor: 'datePicker'\n    }, {\n      headerName: 'MPS 적용여부',\n      field: 'mpsApplyStatus'\n    }, {\n      headerName: '비고',\n      field: 'description',\n      editable: true\n    }, {\n      headerName: 'stauts',\n      field: 'stauts',\n      hide: true\n    }]\n  };\n\n  const addBtn = () => {\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n\n    grid.updateRowData({\n      add: [newItem],\n      addIndex: ''\n    }); // ag그리드 api로 그리드에 add 함\n  }; //추가할 컬럼 선언\n\n\n  const NewRowData = () => {\n    let newData = {\n      salesPlanNo: '지정시 저장됨',\n      itemCode: '',\n      itemName: '',\n      unitOfSales: 'EA',\n      salesPlanDate: '',\n      salesAmount: '0',\n      unitPriceOfSales: '0',\n      sumPriceOfSales: '0',\n      dueDateOfSales: '',\n      mpsApplyStatus: '',\n      description: '',\n      stauts: ''\n    };\n    return newData;\n  };\n\n  const onCellClicked = e => {\n    console.log(e);\n\n    if (e.colDef.field === 'itemName' || e.colDef.field === 'itemCode') {\n      setNodeId(e.rowIndex);\n      setSalesPlanItemDialog(true);\n    }\n\n    if (e.colDef.field === 'salesAmount' || e.colDef.field === 'unitPriceOfSales' || e.colDef.field === 'sumPriceOfSales') {\n      setNodeId(e.rowIndex);\n      setSalesPlanSumDialog(true);\n    }\n  };\n\n  const salesPlanItemClose = value => {\n    console.log(value);\n    setSalesPlanItemDialog(false);\n\n    if (value.data === undefined) {\n      return;\n    } else {\n      setItemRow(value.data);\n      console.log(value.data, '@#@##@');\n    }\n  };\n\n  const salesPlanSumClose = value => {\n    console.log(value);\n    setSalesPlanSumDialog(false);\n\n    if (value.data === undefined) {\n      return;\n    } else {\n      setSumRow(value.data);\n      console.log(value.data, '!!!@#@##@');\n    }\n  };\n\n  const salesPlanSearch = () => {\n    console.log(startDate + 'StartDate');\n    Axios.get('http://localhost:8282/logi/sales/searchSalesPlan', {\n      params: {\n        startDate: startDate,\n        endDate: endDate,\n        salesPlanDate: 'salesPlanDate'\n      }\n    }).then(response => {\n      setList(response.data.gridRowJson);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const onSubmit = () => {\n    let selectedRows = grid.getSelectedRows();\n\n    if (selectedRows.length === 0) {\n      alert('체크박스 선택 바랍니다');\n      return;\n    }\n\n    if (selectedRows[0].itemCode === undefined || selectedRows[0].itemCode === '' || selectedRows[0].salesPlanDate === undefined || selectedRows[0].salesPlanDate === '' || selectedRows[0].salesAmount === undefined || selectedRows[0].salesAmount === '' || selectedRows[0].dueDateOfSales === undefined || selectedRows[0].dueDateOfSales === '') {\n      alert('빈칸기입하시오');\n      return;\n    }\n\n    if (selectedRows[0].salesPlanNo === '지정시 저장됨') {\n      selectedRows[0].status = 'INSERT';\n    } else {\n      if (selectedRows[0].mpsApplyStatus === 'Y') {\n        alert('MPS 적용 된것은 변경 못합니다');\n        return;\n      }\n\n      selectedRows[0].status = 'UPDATE';\n    }\n\n    submit(selectedRows[0]);\n  };\n\n  const removeBtn = () => {\n    let selectedRows = grid.getSelectedRows();\n\n    if (selectedRows.length === 0) {\n      alert('체크박스 선택 바랍니다');\n      return;\n    }\n\n    if (selectedRows[0].mpsApplyStatus === 'Y') {\n      alert('MPS 적용 된것은 삭제 못합니다');\n      return;\n    } else {\n      selectedRows[0].status = 'DELETE';\n      submit(selectedRows[0]);\n    }\n  };\n\n  const submit = data1 => {\n    Axios.post('http://localhost:8282/logi/sales/batchSalesPlanListProcess', data1).then(response => {\n      setList(response.data.gridRowJson);\n    }).catch(e => {\n      console.log(e);\n    });\n    alert('완료 되었습니다');\n  };\n\n  const api = params => {\n    setGrid(params.api);\n  };\n\n  const basicInfo = (startDate, endDate) => {\n    setStartDate(startDate);\n    setEndDate(endDate);\n  };\n\n  useEffect(() => {\n    console.log('Ddddd', ItemRow);\n\n    if (ItemRow[0] !== undefined) {\n      let itemsToUpdate = [];\n      grid.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n        console.log('##:::' + sumRow.amount);\n        let rowData = rowNode.data;\n\n        if (index !== nodeid) {\n          return;\n        }\n\n        rowData.itemCode = ItemRow[0].detailCode;\n        rowData.itemName = ItemRow[0].detailCodeName;\n\n        if (sumRow.amount !== undefined) {\n          rowData.salesAmount = sumRow.amount;\n          rowData.unitPriceOfSales = sumRow.price;\n          rowData.sumPriceOfSales = sumRow.sumPrice;\n        }\n\n        itemsToUpdate.push(rowData);\n        setSumOpen(ItemRow[0].detailCode);\n      });\n      console.log(itemsToUpdate, 'itemsToUpdate');\n      grid.updateRowData({\n        update: itemsToUpdate\n      }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\n    }\n  }, [ItemRow, sumRow]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(SalesPlanItemDialog, {\n    open: salesPlanItemDialog,\n    close: salesPlanItemClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }), React.createElement(SalesPlanSumDialog, {\n    open: salesPlanSumDialog,\n    value: sumOpen,\n    close: salesPlanSumClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }), React.createElement(MyGrid, {\n    column: column,\n    title: '판매 계획',\n    list: list,\n    onCellClicked: onCellClicked,\n    components: {\n      datePicker: getDatePicker()\n    },\n    rowSelection: \"single\",\n    size: size,\n    api: api,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      float: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: addBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"\\uC0C8\\uB85C\\uC6B4 \\uACC4\\uD68D \\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: removeBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, \"\\uC800\\uC7A5\"))), React.createElement(MyCalendar, {\n    onChangeDate: onChangeDate,\n    basicInfo: basicInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh',\n      marginTop: '1vh'\n    },\n    onClick: salesPlanSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"\\uC870\\uD68C\"))));\n}\n\nexport default SalesPlanInfoSearch;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/sales/page/SalesPlanInfo/SalesPlanInfoSearch.js"],"names":["Button","FormGroup","React","useEffect","useState","MyCalendar","MyGrid","moment","Axios","SalesPlanItemDialog","SalesPlanSumDialog","$","jQuery","AlternateEmailRounded","getDatePicker","SalesPlanInfoSearch","props","list","setList","startDate","setStartDate","endDate","setEndDate","grid","setGrid","ItemRow","setItemRow","sumRow","setSumRow","nodeid","setNodeId","salesPlanItemDialog","setSalesPlanItemDialog","salesPlanSumDialog","setSalesPlanSumDialog","size","setSize","sumOpen","setSumOpen","selCustomer","setSelCutomer","detailCodeName","detailCode","onChangeDate","e","console","log","target","id","value","column","columnDefs","headerName","field","width","checkboxSelection","editable","cellEditor","hide","addBtn","newItem","NewRowData","updateRowData","add","addIndex","newData","salesPlanNo","itemCode","itemName","unitOfSales","salesPlanDate","salesAmount","unitPriceOfSales","sumPriceOfSales","dueDateOfSales","mpsApplyStatus","description","stauts","onCellClicked","colDef","rowIndex","salesPlanItemClose","data","undefined","salesPlanSumClose","salesPlanSearch","get","params","then","response","gridRowJson","catch","onSubmit","selectedRows","getSelectedRows","length","alert","status","submit","removeBtn","data1","post","api","basicInfo","itemsToUpdate","forEachNodeAfterFilterAndSort","rowNode","index","amount","rowData","price","sumPrice","push","update","datePicker","float","marginRight","marginTop"],"mappings":"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","sourcesContent":["import { Button, FormGroup } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport MyCalendar from 'util/LogiUtil/MyCalendar';\r\nimport MyGrid from 'util/LogiUtil/MyGrid';\r\nimport moment from 'moment';\r\nimport Axios from 'axios';\r\nimport SalesPlanItemDialog from './SalesPlanItemDialog';\r\nimport SalesPlanSumDialog from './SalesPlanSumDialog';\r\nimport $ from 'jquery';\r\nimport jQuery from 'jquery';\r\nimport { AlternateEmailRounded } from '@material-ui/icons';\r\nimport { getDatePicker } from 'erp/hr/util/datePicker';\r\n\r\nfunction SalesPlanInfoSearch(props) {\r\n    const [list, setList] = useState([]);\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState();\r\n    const [grid, setGrid] = useState();\r\n    const [ItemRow, setItemRow] = useState('');\r\n    const [sumRow, setSumRow] = useState('');\r\n    const [nodeid, setNodeId] = useState('');\r\n    const [salesPlanItemDialog, setSalesPlanItemDialog] = useState(false);\r\n    const [salesPlanSumDialog, setSalesPlanSumDialog] = useState(false);\r\n    const [size, setSize] = useState('50vh');\r\n\r\n    const [sumOpen, setSumOpen] = useState('');\r\n\r\n    //다이알로그에서 가져온 값\r\n    const [selCustomer, setSelCutomer] = useState({\r\n        detailCodeName: '',\r\n        detailCode: ''\r\n    });\r\n\r\n    const onChangeDate = e => {\r\n        console.log(e);\r\n        if (e.target.id === 'startDate') {\r\n            setStartDate(e.target.value);\r\n        } else {\r\n            setEndDate(e.target.value);\r\n        }\r\n    };\r\n\r\n    console.log();\r\n    const column = {\r\n        columnDefs: [\r\n            { headerName: '', field: 'check', width: 50, checkboxSelection: true },\r\n            { headerName: '판매계획일련번호', field: 'salesPlanNo' },\r\n            { headerName: '품목코드', field: 'itemCode' },\r\n            { headerName: '품목명', field: 'itemName' },\r\n            { headerName: '단위', field: 'unitOfSales' },\r\n            {\r\n                headerName: '판매계획일',\r\n                field: 'salesPlanDate',\r\n                editable: true,\r\n                cellEditor: 'datePicker'\r\n            },\r\n            { headerName: '계획수량', field: 'salesAmount' },\r\n            { headerName: '계획단가', field: 'unitPriceOfSales' },\r\n            { headerName: '합계액', field: 'sumPriceOfSales' },\r\n            {\r\n                headerName: '판매마감일',\r\n                field: 'dueDateOfSales',\r\n                editable: true,\r\n                cellEditor: 'datePicker'\r\n            },\r\n            { headerName: 'MPS 적용여부', field: 'mpsApplyStatus' },\r\n            { headerName: '비고', field: 'description', editable: true },\r\n            { headerName: 'stauts', field: 'stauts', hide: true }\r\n        ]\r\n    };\r\n\r\n    const addBtn = () => {\r\n        const newItem = NewRowData(); //새로운 row를 변수에담음\r\n        grid.updateRowData({ add: [newItem], addIndex: '' }); // ag그리드 api로 그리드에 add 함\r\n    };\r\n    //추가할 컬럼 선언\r\n    const NewRowData = () => {\r\n        let newData = {\r\n            salesPlanNo: '지정시 저장됨',\r\n            itemCode: '',\r\n            itemName: '',\r\n            unitOfSales: 'EA',\r\n            salesPlanDate: '',\r\n            salesAmount: '0',\r\n            unitPriceOfSales: '0',\r\n            sumPriceOfSales: '0',\r\n            dueDateOfSales: '',\r\n            mpsApplyStatus: '',\r\n            description: '',\r\n            stauts: ''\r\n        };\r\n        return newData;\r\n    };\r\n    const onCellClicked = e => {\r\n        console.log(e);\r\n        if (e.colDef.field === 'itemName' || e.colDef.field === 'itemCode') {\r\n            setNodeId(e.rowIndex);\r\n            setSalesPlanItemDialog(true);\r\n        }\r\n        if (\r\n            e.colDef.field === 'salesAmount' ||\r\n            e.colDef.field === 'unitPriceOfSales' ||\r\n            e.colDef.field === 'sumPriceOfSales'\r\n        ) {\r\n            setNodeId(e.rowIndex);\r\n            setSalesPlanSumDialog(true);\r\n        }\r\n    };\r\n    const salesPlanItemClose = value => {\r\n        console.log(value);\r\n        setSalesPlanItemDialog(false);\r\n        if (value.data === undefined) {\r\n            return;\r\n        } else {\r\n            setItemRow(value.data);\r\n            console.log(value.data, '@#@##@');\r\n        }\r\n    };\r\n    const salesPlanSumClose = value => {\r\n        console.log(value);\r\n        setSalesPlanSumDialog(false);\r\n        if (value.data === undefined) {\r\n            return;\r\n        } else {\r\n            setSumRow(value.data);\r\n            console.log(value.data, '!!!@#@##@');\r\n        }\r\n    };\r\n\r\n    const salesPlanSearch = () => {\r\n        console.log(startDate + 'StartDate');\r\n\r\n        Axios.get('http://localhost:8282/logi/sales/searchSalesPlan', {\r\n            params: {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                salesPlanDate: 'salesPlanDate'\r\n            }\r\n        })\r\n            .then(response => {\r\n                setList(response.data.gridRowJson);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    };\r\n    const onSubmit = () => {\r\n        let selectedRows = grid.getSelectedRows();\r\n        if (selectedRows.length === 0) {\r\n            alert('체크박스 선택 바랍니다');\r\n            return;\r\n        }\r\n        if (\r\n            selectedRows[0].itemCode === undefined ||\r\n            selectedRows[0].itemCode === '' ||\r\n            selectedRows[0].salesPlanDate === undefined ||\r\n            selectedRows[0].salesPlanDate === '' ||\r\n            selectedRows[0].salesAmount === undefined ||\r\n            selectedRows[0].salesAmount === '' ||\r\n            selectedRows[0].dueDateOfSales === undefined ||\r\n            selectedRows[0].dueDateOfSales === ''\r\n        ) {\r\n            alert('빈칸기입하시오');\r\n            return;\r\n        }\r\n        if (selectedRows[0].salesPlanNo === '지정시 저장됨') {\r\n            selectedRows[0].status = 'INSERT';\r\n        } else {\r\n            if (selectedRows[0].mpsApplyStatus === 'Y') {\r\n                alert('MPS 적용 된것은 변경 못합니다');\r\n                return;\r\n            }\r\n            selectedRows[0].status = 'UPDATE';\r\n        }\r\n        submit(selectedRows[0]);\r\n    };\r\n    const removeBtn = () => {\r\n        let selectedRows = grid.getSelectedRows();\r\n        if (selectedRows.length === 0) {\r\n            alert('체크박스 선택 바랍니다');\r\n            return;\r\n        }\r\n        if (selectedRows[0].mpsApplyStatus === 'Y') {\r\n            alert('MPS 적용 된것은 삭제 못합니다');\r\n            return;\r\n        } else {\r\n            selectedRows[0].status = 'DELETE';\r\n            submit(selectedRows[0]);\r\n        }\r\n    };\r\n    const submit = data1 => {\r\n        Axios.post('http://localhost:8282/logi/sales/batchSalesPlanListProcess', data1)\r\n            .then(response => {\r\n                setList(response.data.gridRowJson);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n        alert('완료 되었습니다');\r\n    };\r\n    const api = params => {\r\n        setGrid(params.api);\r\n    };\r\n\r\n    const basicInfo = (startDate, endDate) => {\r\n        setStartDate(startDate);\r\n        setEndDate(endDate);\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('Ddddd', ItemRow);\r\n        if (ItemRow[0] !== undefined) {\r\n            let itemsToUpdate = [];\r\n            grid.forEachNodeAfterFilterAndSort(function(rowNode, index) {\r\n                console.log('##:::' + sumRow.amount);\r\n                let rowData = rowNode.data;\r\n                if (index !== nodeid) {\r\n                    return;\r\n                }\r\n\r\n                rowData.itemCode = ItemRow[0].detailCode;\r\n                rowData.itemName = ItemRow[0].detailCodeName;\r\n\r\n                if (sumRow.amount !== undefined) {\r\n                    rowData.salesAmount = sumRow.amount;\r\n                    rowData.unitPriceOfSales = sumRow.price;\r\n                    rowData.sumPriceOfSales = sumRow.sumPrice;\r\n                }\r\n                itemsToUpdate.push(rowData);\r\n                setSumOpen(ItemRow[0].detailCode);\r\n            });\r\n            console.log(itemsToUpdate, 'itemsToUpdate');\r\n            grid.updateRowData({ update: itemsToUpdate }); // 그리드 컴포넌트에 update 시켜준다. 즉, 값이 들어간다.\r\n        }\r\n    }, [ItemRow, sumRow]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <SalesPlanItemDialog open={salesPlanItemDialog} close={salesPlanItemClose} />\r\n                <SalesPlanSumDialog\r\n                    open={salesPlanSumDialog}\r\n                    value={sumOpen}\r\n                    close={salesPlanSumClose}\r\n                />\r\n                <MyGrid\r\n                    column={column}\r\n                    title={'판매 계획'}\r\n                    list={list}\r\n                    onCellClicked={onCellClicked}\r\n                    components={{ datePicker: getDatePicker() }}\r\n                    rowSelection=\"single\"\r\n                    size={size}\r\n                    api={api}\r\n                >\r\n                    <div style={{ float: 'left' }}>\r\n                        <FormGroup row>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ marginRight: '1vh', marginTop: '1vh' }}\r\n                                onClick={addBtn}\r\n                            >\r\n                                새로운 계획 추가\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ marginRight: '1vh', marginTop: '1vh' }}\r\n                                onClick={removeBtn}\r\n                            >\r\n                                삭제\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ marginRight: '1vh', marginTop: '1vh' }}\r\n                                onClick={onSubmit}\r\n                            >\r\n                                저장\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </div>\r\n                    <MyCalendar onChangeDate={onChangeDate} basicInfo={basicInfo} />\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        style={{ marginRight: '1vh', marginTop: '1vh' }}\r\n                        onClick={salesPlanSearch}\r\n                    >\r\n                        조회\r\n                    </Button>\r\n                </MyGrid>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SalesPlanInfoSearch;\r\n"]},"metadata":{},"sourceType":"module"}