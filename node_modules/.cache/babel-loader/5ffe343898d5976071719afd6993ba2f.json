{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\sales\\\\page\\\\Contract\\\\ContractSearch.js\";\nimport { Button, Checkbox, FormControlLabel, FormGroup, TextField } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport MyCalendar from 'util/LogiUtil/MyCalendar';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport CustomerSearchDialog from './CustomerSearchDialog';\nimport ContractDetailSearch from './ContractDetailSearch';\nimport * as api from 'erp/logistic/sales/api';\nimport useAsync from 'util/useAsync';\n\nfunction ContractSearch(props) {\n  const [list, setList] = useState([]);\n  const [selList, setSelList] = useState([]);\n  const [startDate, setStartDate] = useState();\n  const [endDate, setEndDate] = useState();\n  const [customerSearch, setCustomerSearch] = useState(false);\n  const [dateSearch, setDateSearch] = useState(true);\n  const [searchOpenDialog, setSearchOpenDialog] = useState(false);\n  const [selContract, setSelContract] = useState();\n  const [size, setSize] = useState('calc(100vh - 290px)'); //다이알로그에서 가져온 값\n\n  const [selCustomer, setSelCutomer] = useState({\n    detailCodeName: '',\n    detailCode: ''\n  });\n\n  const onChangeDate = e => {\n    console.log(e);\n\n    if (e.target.id === 'startDate') {\n      setStartDate(e.target.value);\n    }\n\n    if (e.target.id === 'endDate') {\n      setEndDate(e.target.value);\n    }\n  };\n\n  const column = {\n    columnDefs: [{\n      headerName: '수주번호',\n      field: 'contractNo'\n    }, {\n      headerName: '견적번호',\n      field: 'estimateNo'\n    }, {\n      headerName: '유형',\n      field: 'contractTypeName'\n    }, {\n      headerName: '거래처코드',\n      field: 'customerCode',\n      hide: true\n    }, {\n      headerName: '거래처명',\n      field: 'customerName'\n    }, {\n      headerName: '견적일자',\n      field: 'contractDate',\n      hide: true\n    }, {\n      headerName: '수주일자',\n      field: 'contractDate'\n    }, {\n      headerName: '수주요청자',\n      field: 'contractRequester'\n    }, {\n      headerName: '수주담당자명',\n      field: 'empNameInCharge'\n    }, {\n      headerName: '비고',\n      field: 'description'\n    }, {\n      headerName: '납품완료여부',\n      field: 'deliveryCompletionStatus'\n    }, {\n      headerName: 'contractType',\n      field: 'contractType',\n      hide: true\n    }, {\n      headerName: 'personCodeInCharge',\n      field: 'personCodeInCharge',\n      hide: true\n    }]\n  };\n\n  const onDialogCellClicked = params => {\n    setSelCutomer({\n      detailCodeName: params.data.detailCodeName,\n      detailCode: params.data.detailCode\n    });\n  };\n\n  const [detailList, searchDetailListFetch] = useAsync(param => api.searchDetailList(param), [], true);\n\n  const onCellClicked = params => {\n    setSelContract(params.data.contractNo);\n    setSelList([params.data]);\n    searchDetailListFetch(params);\n    setSize('30vh');\n    params.api.sizeColumnsToFit();\n  };\n\n  const detailClose = () => {\n    setSize('calc(100vh - 290px)');\n    setSelContract();\n  };\n\n  const customerSearchClick = () => {\n    setSearchOpenDialog(true);\n  };\n\n  const close = () => {\n    setSearchOpenDialog(false);\n  };\n\n  const basicInfo = (startDate, endDate) => {\n    setStartDate(startDate);\n    setEndDate(endDate);\n  };\n\n  const checkBoxChange = e => {\n    if (e.target.name === 'customerSearch') {\n      setCustomerSearch(true);\n      setDateSearch(false);\n    }\n\n    if (e.target.name === 'dateSearch') {\n      setCustomerSearch(false);\n      setDateSearch(true);\n    }\n  };\n\n  const [contractList, searchContractFetch] = useAsync(param => api.searchContractList(param), [], true);\n\n  const contractSearch = () => {\n    let param;\n\n    if (customerSearch === true) {\n      param = {\n        startDate: 'null',\n        endDate: 'null',\n        searchCondition: 'searchByCustomer',\n        customerCode: selCustomer.detailCode\n      };\n    }\n\n    if (dateSearch === true) {\n      param = {\n        startDate: startDate,\n        endDate: endDate,\n        searchCondition: 'searchByDate',\n        customerCode: 'null'\n      };\n    }\n\n    searchContractFetch(param);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(MyGrid, {\n    column: column,\n    title: '수주 조회',\n    list: contractList.data ? contractList.data.gridRowJson : null,\n    onCellClicked: onCellClicked,\n    rowSelection: \"single\",\n    size: size,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      float: 'left',\n      paddingTop: '1vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: customerSearch,\n      onChange: checkBoxChange,\n      name: \"customerSearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }),\n    label: \"\\uAC70\\uB798\\uCC98\\uBA85\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    control: React.createElement(Checkbox, {\n      checked: dateSearch,\n      onChange: checkBoxChange,\n      name: \"dateSearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }),\n    label: \"\\uB0A0\\uC9DC\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }))), dateSearch === true ? React.createElement(MyCalendar, {\n    onChangeDate: onChangeDate,\n    basicInfo: basicInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }) : React.createElement(TextField, {\n    id: \"customerName\",\n    label: \"\\uAC70\\uB798\\uCC98\\uBA85\",\n    value: selCustomer.detailCodeName,\n    style: {\n      marginRight: '1vw'\n    },\n    disabled: true,\n    onClick: customerSearchClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginTop: '1vh'\n    },\n    onClick: contractSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"\\uC870\\uD68C\")), selContract === undefined ? '' : React.createElement(ContractDetailSearch, {\n    list: detailList.data ? detailList.data.gridRowJson : null,\n    detailClose: detailClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }), React.createElement(MyDialog, {\n    open: searchOpenDialog,\n    close: close,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(CustomerSearchDialog, {\n    close: close,\n    onCellClicked: onDialogCellClicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }))));\n}\n\nexport default ContractSearch;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/erp/logistic/sales/page/Contract/ContractSearch.js"],"names":["Button","Checkbox","FormControlLabel","FormGroup","TextField","React","useState","MyCalendar","MyGrid","MyDialog","moment","Axios","CustomerSearchDialog","ContractDetailSearch","api","useAsync","ContractSearch","props","list","setList","selList","setSelList","startDate","setStartDate","endDate","setEndDate","customerSearch","setCustomerSearch","dateSearch","setDateSearch","searchOpenDialog","setSearchOpenDialog","selContract","setSelContract","size","setSize","selCustomer","setSelCutomer","detailCodeName","detailCode","onChangeDate","e","console","log","target","id","value","column","columnDefs","headerName","field","hide","onDialogCellClicked","params","data","detailList","searchDetailListFetch","param","searchDetailList","onCellClicked","contractNo","sizeColumnsToFit","detailClose","customerSearchClick","close","basicInfo","checkBoxChange","name","contractList","searchContractFetch","searchContractList","contractSearch","searchCondition","customerCode","gridRowJson","float","paddingTop","marginRight","marginTop","undefined"],"mappings":"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","sourcesContent":["import { Button, Checkbox, FormControlLabel, FormGroup, TextField } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport MyCalendar from 'util/LogiUtil/MyCalendar';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport moment from 'moment';\nimport Axios from 'axios';\nimport CustomerSearchDialog from './CustomerSearchDialog';\nimport ContractDetailSearch from './ContractDetailSearch';\nimport * as api from 'erp/logistic/sales/api';\nimport useAsync from 'util/useAsync';\n\nfunction ContractSearch(props) {\n    const [list, setList] = useState([]);\n    const [selList, setSelList] = useState([]);\n    const [startDate, setStartDate] = useState();\n    const [endDate, setEndDate] = useState();\n    const [customerSearch, setCustomerSearch] = useState(false);\n    const [dateSearch, setDateSearch] = useState(true);\n    const [searchOpenDialog, setSearchOpenDialog] = useState(false);\n    const [selContract, setSelContract] = useState();\n    const [size, setSize] = useState('calc(100vh - 290px)');\n\n    //다이알로그에서 가져온 값\n    const [selCustomer, setSelCutomer] = useState({\n        detailCodeName: '',\n        detailCode: ''\n    });\n\n    const onChangeDate = e => {\n        console.log(e);\n        if (e.target.id === 'startDate') {\n            setStartDate(e.target.value);\n        }\n        if (e.target.id === 'endDate') {\n            setEndDate(e.target.value);\n        }\n    };\n\n    const column = {\n        columnDefs: [\n            { headerName: '수주번호', field: 'contractNo' },\n            { headerName: '견적번호', field: 'estimateNo' },\n            { headerName: '유형', field: 'contractTypeName' },\n            { headerName: '거래처코드', field: 'customerCode', hide: true },\n            { headerName: '거래처명', field: 'customerName' },\n            { headerName: '견적일자', field: 'contractDate', hide: true },\n            { headerName: '수주일자', field: 'contractDate' },\n            { headerName: '수주요청자', field: 'contractRequester' },\n            { headerName: '수주담당자명', field: 'empNameInCharge' },\n            { headerName: '비고', field: 'description' },\n            { headerName: '납품완료여부', field: 'deliveryCompletionStatus' },\n            { headerName: 'contractType', field: 'contractType', hide: true },\n            { headerName: 'personCodeInCharge', field: 'personCodeInCharge', hide: true }\n        ]\n    };\n\n    const onDialogCellClicked = params => {\n        setSelCutomer({\n            detailCodeName: params.data.detailCodeName,\n            detailCode: params.data.detailCode\n        });\n    };\n\n    const [detailList, searchDetailListFetch] = \n    useAsync((param) =>api.searchDetailList(param), [], true);\n    const onCellClicked = params => {\n        setSelContract(params.data.contractNo);\n        setSelList([params.data]);\n\n        searchDetailListFetch(params);\n        \n        setSize('30vh');\n        params.api.sizeColumnsToFit();\n    };\n\n    const detailClose = () => {\n        setSize('calc(100vh - 290px)');\n        setSelContract();\n    };\n\n    const customerSearchClick = () => {\n        setSearchOpenDialog(true);\n    };\n\n    const close = () => {\n        setSearchOpenDialog(false);\n    };\n\n    const basicInfo = (startDate, endDate) => {\n        setStartDate(startDate);\n        setEndDate(endDate);\n    };\n\n    const checkBoxChange = e => {\n        if (e.target.name === 'customerSearch') {\n            setCustomerSearch(true);\n            setDateSearch(false);\n        }\n        if (e.target.name === 'dateSearch') {\n            setCustomerSearch(false);\n            setDateSearch(true);\n        }\n    };\n\n    const [contractList, searchContractFetch] = \n    useAsync(param => api.searchContractList(param),[],true);\n    const contractSearch = () => {\n        let param;\n        if (customerSearch === true) {\n            param = {\n                startDate: 'null',\n                endDate: 'null',\n                searchCondition: 'searchByCustomer',\n                customerCode: selCustomer.detailCode\n            };\n        }\n        if (dateSearch === true) {\n            param = {\n                startDate: startDate,\n                endDate: endDate,\n                searchCondition: 'searchByDate',\n                customerCode: 'null'\n            };\n        }\n\n        searchContractFetch(param);\n    };\n\n    return (\n        <>\n            <div>\n                <MyGrid\n                    column={column}\n                    title={'수주 조회'}\n                    list={contractList.data ? contractList.data.gridRowJson : null}\n                    onCellClicked={onCellClicked}\n                    rowSelection=\"single\"\n                    size={size}\n                >\n                    <div style={{ float: 'left', paddingTop: '1vh' }}>\n                        <FormGroup row>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={customerSearch}\n                                        onChange={checkBoxChange}\n                                        name=\"customerSearch\"\n                                    />\n                                }\n                                label=\"거래처명\"\n                            />\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={dateSearch}\n                                        onChange={checkBoxChange}\n                                        name=\"dateSearch\"\n                                    />\n                                }\n                                label=\"날짜\"\n                            />\n                        </FormGroup>\n                    </div>\n                    {dateSearch === true ? (\n                        <MyCalendar onChangeDate={onChangeDate} basicInfo={basicInfo} />\n                    ) : (\n                        <TextField\n                            id=\"customerName\"\n                            label=\"거래처명\"\n                            value={selCustomer.detailCodeName}\n                            style={{ marginRight: '1vw' }}\n                            disabled\n                            onClick={customerSearchClick}\n                        />\n                    )}\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        style={{ marginTop: '1vh' }}\n                        onClick={contractSearch}\n                    >\n                        조회\n                    </Button>\n                </MyGrid>\n                {selContract === undefined ? (\n                    ''\n                ) : (\n                    <ContractDetailSearch list={detailList.data ? detailList.data.gridRowJson : null} detailClose={detailClose} />\n                )}\n                <MyDialog open={searchOpenDialog} close={close}>\n                    <CustomerSearchDialog close={close} onCellClicked={onDialogCellClicked} />\n                </MyDialog>\n            </div>\n        </>\n    );\n}\n\nexport default ContractSearch;\n"]},"metadata":{},"sourceType":"module"}