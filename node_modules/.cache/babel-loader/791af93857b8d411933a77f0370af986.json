{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\NonCurrentAsset\\\\Dialog\\\\OpenMonthAmortizationDialog.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogTitle, DialogContent, List, DialogActions, Button } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { AgGridReact } from \"ag-grid-react\";\n\nconst OpenCodeDialog = ({\n  open,\n  close,\n  value\n}) => {\n  const [positionGridApi, setPositionGridApi] = useState([]);\n  const [dataList, setDataList] = useState([]);\n  const [normalAmortization1, setNormalAmortization1] = useState('');\n  const [sumDepreciationFebruary, setSumDepreciationFebruary] = useState('');\n  const accountColumnDefs = [{\n    headerName: \"상각월\",\n    field: \"month\",\n    width: 180\n  }, {\n    headerName: \"전월충당금이월\",\n    field: \"depreciationFebruary\",\n    width: 210\n  }, {\n    headerName: \"당월감가상각비\",\n    field: \"accountCode\",\n    width: 180\n  }];\n\n  const Close = () => {\n    close({\n      division: \"accountDialog\"\n    });\n  };\n\n  useEffect(() => {\n    let normalAmortization = value;\n    let monthNormalAmortization = value / 12;\n    setDataList(Math.round(monthNormalAmortization));\n    setNormalAmortization1(normalAmortization);\n  }, [value]);\n  useEffect(() => {\n    let depreciationFebruary = 0;\n    let depreciationFebruaryList = [];\n    let sumDepreciationFebruaryList = 0;\n\n    if (positionGridApi.length !== 0) {\n      for (var i = 1; i <= 12; i++) {\n        depreciationFebruaryList.push(depreciationFebruary);\n        depreciationFebruary += parseInt(dataList);\n        let newCol = {\n          month: '2020/' + i,\n          depreciationFebruary: depreciationFebruaryList.splice(0, i)[0],\n          accountCode: dataList\n        };\n        positionGridApi.updateRowData({\n          add: [newCol],\n          addIndex: \"\"\n        });\n      }\n\n      positionGridApi.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n        sumDepreciationFebruaryList += rowNode.data.depreciationFebruary;\n        console.log(\"sumDepreciationFebruaryList\", sumDepreciationFebruaryList);\n        setSumDepreciationFebruary(sumDepreciationFebruaryList);\n      });\n    }\n  }, [positionGridApi]);\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 250\n    }\n  });\n  const classes = useStyles();\n\n  function createData(name, calories, fat) {\n    return {\n      name,\n      calories,\n      fat\n    };\n  }\n\n  useEffect(() => {});\n  const rows = [createData('합계', sumDepreciationFebruary, normalAmortization1)];\n  return React.createElement(Dialog, {\n    \"aria-labelledby\": \"simple-dialog-title\",\n    open: open,\n    maxWidth: \"80%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"simple-dialog-title\",\n    Align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(DialogContent, {\n    dividers: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ag-theme-material\" //그리드 모양\n    ,\n    style: {\n      height: \"400px\",\n      width: \"600px\" //paddingTop: \"8px\",\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: accountColumnDefs //컬럼명\n    ,\n    rowData: \"\" // 뿌릴 data\n    ,\n    rowSelection: \"single\" // 하나만 선택 가능.\n    ,\n    getRowStyle: param => {\n      return {\n        \"text-align\": \"center\"\n      }; //body 가운데 정렬\n    },\n    onGridReady: params => setPositionGridApi(params.api),\n    onCellClicked: \"\" // cell을 클릭하면, handleClose가 실행된다.\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })))), React.createElement(TableContainer, {\n    component: Paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: classes.table,\n    size: \"small\",\n    \"aria-label\": \"a dense table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, rows.map(row => React.createElement(TableRow, {\n    key: row.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, row.name), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, row.calories), React.createElement(TableCell, {\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, row.fat)))))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: Close,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Close\")));\n};\n\nexport default OpenCodeDialog;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/page/NonCurrentAsset/Dialog/OpenMonthAmortizationDialog.js"],"names":["React","useState","useEffect","Dialog","DialogTitle","DialogContent","List","DialogActions","Button","makeStyles","Table","TableBody","TableCell","TableContainer","TableRow","Paper","AgGridReact","OpenCodeDialog","open","close","value","positionGridApi","setPositionGridApi","dataList","setDataList","normalAmortization1","setNormalAmortization1","sumDepreciationFebruary","setSumDepreciationFebruary","accountColumnDefs","headerName","field","width","Close","division","normalAmortization","monthNormalAmortization","Math","round","depreciationFebruary","depreciationFebruaryList","sumDepreciationFebruaryList","length","i","push","parseInt","newCol","month","splice","accountCode","updateRowData","add","addIndex","forEachNodeAfterFilterAndSort","rowNode","index","data","console","log","useStyles","table","minWidth","classes","createData","name","calories","fat","rows","height","param","params","api","map","row"],"mappings":"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","sourcesContent":["import React, { useState,useEffect} from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  List,\n  DialogActions,\n  Button,\n} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { AgGridReact } from \"ag-grid-react\";\n\nconst OpenCodeDialog = ({ open, close, value, }) => {\n  const [positionGridApi, setPositionGridApi] = useState([]);\n  const [dataList,setDataList] = useState([]); \n  const [normalAmortization1,setNormalAmortization1] = useState('');\n  const [sumDepreciationFebruary,setSumDepreciationFebruary] = useState('');\n\n  const accountColumnDefs = [\n    { headerName: \"상각월\", field: \"month\", width: 180 },\n    { headerName: \"전월충당금이월\", field: \"depreciationFebruary\", width: 210 },\n    { headerName: \"당월감가상각비\", field: \"accountCode\", width: 180 },\n  ];\n    \n  const Close = () => {\n    close({\n      division: \"accountDialog\",\n    });\n  };\n \n  useEffect(()=>{\n  \n    let normalAmortization=value\n    let monthNormalAmortization=value/12; \n    setDataList(Math.round(monthNormalAmortization));\n    setNormalAmortization1(normalAmortization)\n   \n \n     \n    \n     \n  },[value])\n\nuseEffect(()=>{   \n  let depreciationFebruary=0;\n  let depreciationFebruaryList =[];\n  let sumDepreciationFebruaryList=0;\n  if(positionGridApi.length!==0){\n  for(var i=1; i<=12; i++){\n    depreciationFebruaryList.push(depreciationFebruary)\n    depreciationFebruary+=parseInt(dataList) \n      \n\n    let newCol={\n      month: '2020/'+i,\n      depreciationFebruary:depreciationFebruaryList.splice(0,i)[0],\n      accountCode:dataList,\n\n    }\n    positionGridApi.updateRowData({add:[newCol],addIndex:\"\"});\n  }\n  positionGridApi.forEachNodeAfterFilterAndSort(function (rowNode, index) {\n    \n    sumDepreciationFebruaryList+=rowNode.data.depreciationFebruary\n    console.log(\"sumDepreciationFebruaryList\",sumDepreciationFebruaryList)\n    setSumDepreciationFebruary(sumDepreciationFebruaryList)\n    \n  })\n \n  \n} \n},[positionGridApi])\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 250,\n  },\n});\nconst classes = useStyles();\nfunction createData(name, calories, fat) {\n  return { name, calories, fat };\n}\nuseEffect(()=>{\n  \n})\nconst rows = [\n  createData('합계', sumDepreciationFebruary,normalAmortization1),\n\n];\n\n  return (\n    <Dialog\n      aria-labelledby=\"simple-dialog-title\"\n      open={open}\n    \n      maxWidth={\"80%\"}\n      \n     \n    >\n      <DialogTitle id=\"simple-dialog-title\" Align=\"center\">\n       \n      </DialogTitle>\n      <DialogContent dividers>\n        <List>\n          <div\n            className={\"ag-theme-material\"} //그리드 모양\n            style={{\n              height: \"400px\",\n              width: \"600px\",\n              //paddingTop: \"8px\",\n            }}\n          >\n            <AgGridReact\n              columnDefs={accountColumnDefs} //컬럼명\n              rowData={\"\"} // 뿌릴 data\n              rowSelection=\"single\" // 하나만 선택 가능.\n              getRowStyle={param => {\n                return { \"text-align\": \"center\" }; //body 가운데 정렬\n              }}\n              onGridReady={params => setPositionGridApi(params.api)}\n              onCellClicked={\"\"} // cell을 클릭하면, handleClose가 실행된다.\n            />\n          </div>\n        </List>\n      </DialogContent>\n      <TableContainer component={Paper}>\n         <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n         <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n         </Table>\n      </TableContainer>\n      <DialogActions>\n        <Button onClick={Close} color=\"primary\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\nexport default OpenCodeDialog;\n"]},"metadata":{},"sourceType":"module"}