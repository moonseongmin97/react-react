{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\purchase\\\\page\\\\LogisticsBOM\\\\Regist\\\\Regist.js\";\nimport { Button, makeStyles } from '@material-ui/core';\nimport Axios from 'axios';\nimport React, { useCallback, useState, useEffect } from 'react';\nimport RegistHead from './RegistHead';\nimport useInput from 'util/useInput';\nimport { AgGridReact } from 'ag-grid-react/lib/agGridReact';\nimport DetailDialog from '../DetailDialog';\nimport RegistGrid from './RegistGrid';\nimport { useDispatch } from 'react-redux';\nimport useAsync from 'util/useAsync';\nimport * as api from 'erp/logistic/purchase/api';\n\nconst Regist = props => {\n  const [bomData, setBomData] = useState(null);\n  const [itemCode, setItemCode] = useState(null);\n  const [positionGridApi, setPositionGridApi] = useState();\n  const [nodeId, setNodeId] = useState(\"\");\n  const [data, setData] = useState(null);\n  const [divisionCode, setDivisionCode] = useState(null);\n  const dispatch = useDispatch();\n  const useStyles = makeStyles(theme => ({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1)\n      },\n      paddingLeft: 9\n    },\n    fieldset: {\n      width: 270\n    },\n    button2: {\n      paddingLeft: 10\n    },\n    tField: {\n      paddingLeft: 9,\n      paddingTop: 60\n    }\n    /* ,\n    button1: {\n       paddingLeft: 18\n    } */\n\n  }));\n  const classes = useStyles();\n  const [bom, getBomDeployRegistFetch] = useAsync(param => api.getBomDeployRegist(param), [], true);\n  const getBomDeploy = useCallback(() => {\n    getBomDeployRegistFetch(itemCode);\n  }, [getBomDeployRegistFetch, itemCode]);\n\n  const checkRenderer = element => {\n    if (element.data.no === 1) {\n      return null;\n    } else {\n      return '<input type=\"checkbox\" />';\n    }\n  }; //========================== 그리드 객체 준비 ==========================\n\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    /* params.api.sizeColumnsToFit(); */\n  };\n\n  const searchBom = () => {\n    if (divisionCode === null && itemCode === null) {\n      alert(\"품목분류를 선택하고 품목코드를 검색해주세요.\");\n      return;\n    } else if (itemCode === null) {\n      alert(\"품목코드를 검색하여 선택해주세요.\");\n      return;\n    } else {\n      getBomDeploy();\n    }\n  };\n\n  const [detailDialogOpen, setDetailDialogOpen] = useState(false);\n  const getItemCode = useInput(\"\");\n  let dCode = \"\";\n  const [detailCode, getDetailCodeFetch] = useAsync(param => api.getDetailCode(param), [], true);\n  const getDetailCode = useCallback(() => {\n    getDetailCodeFetch(dCode);\n  }, [dCode, getDetailCodeFetch]);\n  useEffect(() => {\n    if (detailCode.data) {\n      setData(detailCode.data.detailCodeList);\n      setDetailDialogOpen(true);\n    }\n  }, [detailCode.data]);\n\n  const onCellClicked = e => {\n    console.log(e.data);\n    positionGridApi.forEachNode(node => {\n      if (e.data.no === node.data.no) {\n        node.setSelected(true); //node.setDataValue();\n\n        return;\n      }\n    });\n    setNodeId(e.data.no);\n\n    if (e.colDef.headerName === \"NO\" || e.colDef.field === \"no\" || e.colDef.field === \"netAmount\" || e.colDef.field === \"description\" || e.colDef.field === \"status\") {\n      return;\n    } else if (e.colDef.field === \"itemClassificationName\") {\n      dCode = \"IT\";\n    } else if (e.colDef.field === \"itemCode\" || e.colDef.field === \"itemName\") {\n      if (e.data.itemClassificationName === \"\") {\n        alert(\"품목구분을 먼저 선택해주세요.\");\n        return;\n      } else {\n        dCode = getItemCode.value;\n      }\n    }\n\n    getDetailCode();\n  };\n\n  let resultList = [];\n  const [result, batchBomFetch] = useAsync(param => api.batchBom(param), [], true);\n  const batchBom = useCallback(() => {\n    batchBomFetch(resultList);\n  }, [batchBomFetch, resultList]);\n  useEffect(() => {\n    if (result.data) setBomData(result.data.bomData);\n  }, [result.data]);\n\n  const addNewRow = () => {\n    const rowCount = positionGridApi.getDisplayedRowCount();\n\n    if (rowCount === 0) {\n      alert(\"BOM 조회를 먼저 해주세요.\");\n      return;\n    } else {\n      const newItem = newRowData(); //새로운 row를 변수에담음\n\n      positionGridApi.updateRowData({\n        add: [newItem],\n        addIndex: \"\"\n      }); // ag그리드 api로 그리드에 add 함\n    }\n  };\n\n  const newRowData = () => {\n    let newNo = \"\";\n    let rows = positionGridApi.forEachNode(n => {\n      newNo = n.data.no + 1;\n    });\n    const rowCount = positionGridApi.getDisplayedRowCount();\n    console.log(\"rowCount : \" + rowCount); //const lastNo = positionGridApi.getDisplayedRowAtIndex(rowCount-1).bomData.no;        \n\n    const ItemClassificationName = positionGridApi.getDisplayedRowAtIndex(0).data.itemClassificationName; //let newNo = parseInt(lastNo.substing(0,1)) + 1;\n\n    function numberPad(str, width) {\n      // newCode 맨 앞의 숫자가 0이면 공백으로 처리하기 때문에 0을 살려주는 함수\n      str = str + \"\";\n      return str.length >= str ? str : new Array(width - str.length + 1).join('0') + str;\n    }\n\n    let newData = {\n      no: newNo,\n      itemClassificationName: \"\",\n      itemCode: \"\",\n      itemName: \"\",\n      netAmount: \"\",\n      customerBusinessItems: \"\",\n      decription: \"\",\n      status: \"insert\",\n      parentItemCode: itemCode\n    };\n    return newData;\n  };\n\n  const deleteRow = e => {\n    console.log(333);\n    const selectedData = positionGridApi.getSelectedRows();\n    console.log(selectedData);\n    console.log(selectedData.length);\n\n    if (selectedData.length === 0) {\n      alert(\"삭제할 항목을 선택해주세요.\");\n      return;\n    } else if (selectedData.length > 1) {\n      if (!window.confirm(\"해당 정보들을 삭제 하시겠습니까?\")) {\n        return;\n      } else {\n        selectedData.status = \"DELETE\";\n      }\n    } else if (selectedData.length === 1) {\n      if (!window.confirm(\"해당 \" + selectedData[0].itemCode + \"정보를 지우시겠습니까?\")) {\n        return;\n      } else {\n        for (let i = 0; i < selectedData.length; i++) {\n          selectedData[i].status = \"DELETE\";\n        } //positionGridApi.updateRowData({ update: selectedData.status});\n\n      }\n    }\n  };\n\n  const batchAll = () => {\n    let insertCount = 0;\n    let updateCount = 0;\n    let deleteCount = 0;\n    positionGridApi.forEacthNode((node, index) => {\n      let rowObject = node.data;\n      let status = rowObject.status;\n\n      if (status === \"INSERT\") {\n        if (rowObject.itemClassificationName === \"\") {\n          alert(\"품목분류를 입력하지 않은 행이 있습니다. </br> 저장 목록에서 제외합니다.\");\n        } else if (rowObject.itemCode === \"\") {\n          alert(\"품목코드를 입력하지 않은 행이 있습니다. </br> 저장 목록에서 제외합니다.\");\n        } else if (rowObject.netAmount === \"\") {\n          alert(\"정미수량을 입력하지 않은 행이 있습니다 </br> 저장 목록에서 제외합니다\");\n        } else {\n          resultList.push(rowObject);\n          insertCount++;\n        }\n      } else if (status === \"UPDATE\") {\n        resultList.push(rowObject);\n        updateCount++;\n      } else if (status === \"DELETE\") {\n        if (rowObject.deleteStatus !== \"LOCAL 삭제\") {\n          resultList.push(rowObject);\n          deleteCount++;\n        } else {\n          let removedRows = [];\n          let selectRow = node.data;\n          removedRows.push(selectRow);\n          positionGridApi.updateRowData({\n            remove: [selectRow]\n          });\n        }\n      }\n    });\n    let confirmMsg = (insertCount !== 0 ? insertCount + \"개의 항목 추가\\n\" : \"\") + (updateCount !== 0 ? updateCount + \"개의 항목 추가\\n\" : \"\") + (deleteCount !== 0 ? deleteCount + \"개의 항목 추가\\n\" : \"\") + \"\\r위와 같이 작업합니다. 계속하시겠습니까?\";\n    let confirmStatus = \"\";\n\n    if (resultList.length !== 0) {\n      confirmStatus = window.confirm(confirmMsg);\n    }\n\n    if (resultList.length !== 0 && confirmStatus) {\n      batchBom();\n    } else if (resultList.length !== 0 && !confirmStatus) {\n      alert(\"취소되었습니다.\");\n    } else if (resultList.length === 0) {\n      alert(\"추가/수정/삭제할 항목이 없습니다.\");\n    }\n\n    resultList = [];\n  };\n\n  const handleClose = value => {\n    setDetailDialogOpen(false);\n\n    if (value.data === undefined) {\n      return;\n    }\n\n    if (value.data[0].detailCode.indexOf(\"IT\") >= 0) {\n      positionGridApi.getRowNode(nodeId).setDataValue(\"itemClassificationName\", value.data[0].detailCodeName);\n    } else {\n      let flag = false;\n      positionGridApi.forEachNode(node => {\n        if (node.data.itemCode === value.data[0].detailCode) {\n          if (node.data.lev === \"1\") {\n            alert(\"BOM 구성에 자기 자신인 품목을 등록할 수 없습니다.\\n 하위품목만 등록할 수 있습니다.\");\n          } else {\n            alert(\"BOM 구성에 이미 있는 품목입니다.\");\n          }\n\n          flag = true;\n        }\n      });\n\n      if (flag) {\n        return;\n      }\n\n      positionGridApi.getRowNode(nodeId).setDataValue(\"itemCode\", value.data[0].detailCode);\n      positionGridApi.getRowNode(nodeId).setDataValue(\"itemName\", value.data[0].detailCodeName);\n    }\n\n    if (positionGridApi.getRowNode(nodeId).data.status !== \"insert\") {\n      positionGridApi.getRowNode(nodeId).setDataValue(\"status\", \"UPDATE\");\n    }\n\n    getItemCode.setValue(value.data[0].detailCode);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(RegistHead, {\n    trItemCode: setItemCode,\n    trDivisionCode: setDivisionCode,\n    batchAll: batchAll,\n    searchBom: searchBom,\n    setNodeId: setNodeId,\n    setData: setData,\n    bomData: bom.data && bom.data,\n    addNewRow: addNewRow,\n    deleteRow: deleteRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }), React.createElement(RegistGrid, {\n    bomData: bom.data && bom.data,\n    onGridReady: onGridReady,\n    onCellClicked: onCellClicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }), React.createElement(DetailDialog, {\n    data: data,\n    open: detailDialogOpen,\n    close: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }));\n};\n\nexport default Regist;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/erp/logistic/purchase/page/LogisticsBOM/Regist/Regist.js"],"names":["Button","makeStyles","Axios","React","useCallback","useState","useEffect","RegistHead","useInput","AgGridReact","DetailDialog","RegistGrid","useDispatch","useAsync","api","Regist","props","bomData","setBomData","itemCode","setItemCode","positionGridApi","setPositionGridApi","nodeId","setNodeId","data","setData","divisionCode","setDivisionCode","dispatch","useStyles","theme","root","margin","spacing","paddingLeft","fieldset","width","button2","tField","paddingTop","classes","bom","getBomDeployRegistFetch","param","getBomDeployRegist","getBomDeploy","checkRenderer","element","no","onGridReady","params","searchBom","alert","detailDialogOpen","setDetailDialogOpen","getItemCode","dCode","detailCode","getDetailCodeFetch","getDetailCode","detailCodeList","onCellClicked","e","console","log","forEachNode","node","setSelected","colDef","headerName","field","itemClassificationName","value","resultList","result","batchBomFetch","batchBom","addNewRow","rowCount","getDisplayedRowCount","newItem","newRowData","updateRowData","add","addIndex","newNo","rows","n","ItemClassificationName","getDisplayedRowAtIndex","numberPad","str","length","Array","join","newData","itemName","netAmount","customerBusinessItems","decription","status","parentItemCode","deleteRow","selectedData","getSelectedRows","window","confirm","i","batchAll","insertCount","updateCount","deleteCount","forEacthNode","index","rowObject","push","deleteStatus","removedRows","selectRow","remove","confirmMsg","confirmStatus","handleClose","undefined","indexOf","getRowNode","setDataValue","detailCodeName","flag","lev","setValue"],"mappings":"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","sourcesContent":["import { Button, makeStyles } from '@material-ui/core';\nimport Axios from 'axios';\nimport React, { useCallback, useState, useEffect } from 'react';\nimport RegistHead from './RegistHead';\nimport useInput from 'util/useInput';\nimport { AgGridReact } from 'ag-grid-react/lib/agGridReact';\nimport DetailDialog from '../DetailDialog';\nimport RegistGrid from './RegistGrid';\nimport { useDispatch } from 'react-redux';\nimport useAsync from 'util/useAsync';\nimport * as api from 'erp/logistic/purchase/api';\n\nconst Regist = (props) => {\n    const [bomData, setBomData] = useState(null);\n    const [itemCode, setItemCode] = useState(null);\n    const [positionGridApi, setPositionGridApi] = useState();\n    const [nodeId, setNodeId] = useState(\"\");\n    const [data, setData] = useState(null);\n    const [divisionCode, setDivisionCode] = useState(null);\n    const dispatch = useDispatch();\n\n    const useStyles = makeStyles(theme => ({\n        root: {\n            \"& > *\": {\n                margin: theme.spacing(1)\n            },\n            paddingLeft: 9,\n        },\n        fieldset: {\n            width: 270            \n        },\n        button2: {\n            paddingLeft: 10\n        },\n        tField: {\n            paddingLeft: 9,\n            paddingTop: 60\n        }/* ,\n        button1: {\n            paddingLeft: 18\n        } */\n    }));\n\n    const classes = useStyles();\n\n    const [bom, getBomDeployRegistFetch] = \n    useAsync((param) =>api.getBomDeployRegist(param), [], true);\n\n    const getBomDeploy = useCallback(() => {\n        getBomDeployRegistFetch(itemCode);\n    },[getBomDeployRegistFetch, itemCode]);\n    \n\n    const checkRenderer = (element) => {\n        if(element.data.no === 1) {\n            return null;\n        }else {\n            return '<input type=\"checkbox\" />';\n        }\n    };\n\n    //========================== 그리드 객체 준비 ==========================\n    const onGridReady = (params) => {\n        setPositionGridApi(params.api);\n        /* params.api.sizeColumnsToFit(); */\n    };\n\n    const searchBom = () => {\n        if(divisionCode === null && itemCode === null) {\n            alert(\"품목분류를 선택하고 품목코드를 검색해주세요.\")\n            return;\n        }else if(itemCode === null) {\n            alert(\"품목코드를 검색하여 선택해주세요.\");\n            return;\n        }else {\n            getBomDeploy();\n        }        \n    }   \n\n    const [detailDialogOpen, setDetailDialogOpen] = useState(false);\n    const getItemCode = useInput(\"\");\n    let dCode = \"\";\n\n    const [detailCode, getDetailCodeFetch] = \n    useAsync((param) =>api.getDetailCode(param), [], true);\n    const getDetailCode = useCallback(() => {\n        getDetailCodeFetch(dCode);\n    },[dCode, getDetailCodeFetch]);\n    useEffect(() => {\n        if(detailCode.data){\n        setData(detailCode.data.detailCodeList);\n        setDetailDialogOpen(true);\n    }\n    },[detailCode.data]);\n\n    const onCellClicked = (e) => {\n        console.log(e.data);\n        positionGridApi.forEachNode(node => {\n            if(e.data.no === node.data.no) {\n                node.setSelected(true);\n                //node.setDataValue();\n                return;\n            }\n        });\n        setNodeId(e.data.no);\n        if(e.colDef.headerName === \"NO\" || e.colDef.field === \"no\" ||  e.colDef.field === \"netAmount\" \n        || e.colDef.field === \"description\" || e.colDef.field === \"status\") {\n            return;\n        }else if(e.colDef.field === \"itemClassificationName\") {\n            dCode = \"IT\";\n        }else if(e.colDef.field === \"itemCode\" || e.colDef.field === \"itemName\") {\n            if(e.data.itemClassificationName === \"\") {\n                alert(\"품목구분을 먼저 선택해주세요.\");\n                return;\n            }else {\n                dCode = getItemCode.value;\n            }\n        }\n        getDetailCode();\n    };\n\n    let resultList = [];\n    \n    const [result, batchBomFetch] = \n    useAsync((param) =>api.batchBom(param), [], true);\n    const batchBom =  useCallback(() => {\n        batchBomFetch(resultList);\n    },[batchBomFetch, resultList]);\n    useEffect(() => {\n        if(result.data)\n        setBomData(result.data.bomData);\n    },[result.data]);\n    \n    const addNewRow = () => {\n        const rowCount = positionGridApi.getDisplayedRowCount();\n        if(rowCount === 0) {\n            alert(\"BOM 조회를 먼저 해주세요.\");\n            return;\n        }else {\n            const newItem = newRowData(); //새로운 row를 변수에담음\n            positionGridApi.updateRowData({ add: [newItem], addIndex: \"\" }); // ag그리드 api로 그리드에 add 함\n        }         \n    };    \n\n    const newRowData = () => {\n        let newNo = \"\";\n        let rows = positionGridApi.forEachNode(n => {\n            newNo = n.data.no + 1;\n        }); \n        const rowCount = positionGridApi.getDisplayedRowCount();\n        console.log(\"rowCount : \"+rowCount);\n        //const lastNo = positionGridApi.getDisplayedRowAtIndex(rowCount-1).bomData.no;        \n        const ItemClassificationName = positionGridApi.getDisplayedRowAtIndex(0).data.itemClassificationName;\n\n        //let newNo = parseInt(lastNo.substing(0,1)) + 1;\n\n        function numberPad(str, width) { // newCode 맨 앞의 숫자가 0이면 공백으로 처리하기 때문에 0을 살려주는 함수\n            str = str + \"\";\n            return str.length >= str ? str : new Array(width - str.length+1).join('0') + str;\n        } \n\n        let newData = {\n            no: newNo,\n            itemClassificationName: \"\",\n            itemCode: \"\",\n            itemName: \"\",\n            netAmount: \"\",\n            customerBusinessItems: \"\",\n            decription: \"\",\n            status: \"insert\",\n            parentItemCode: itemCode\n        };\n        return newData;\n    };\n    \n\n    const deleteRow = (e) => {\n        console.log(333);\n        const selectedData = positionGridApi.getSelectedRows();\n        console.log(selectedData);\n        console.log(selectedData.length);\n        \n        if(selectedData.length === 0) {\n            alert(\"삭제할 항목을 선택해주세요.\");\n            return;\n        }else if(selectedData.length > 1) {\n            if(!window.confirm(\n                \"해당 정보들을 삭제 하시겠습니까?\"\n            )) {\n                return;\n            } else {\n\n                selectedData.status = \"DELETE\";                \n            }\n        }else if(selectedData.length === 1) {\n            if(!window.confirm(\n                \"해당 \" + selectedData[0].itemCode + \"정보를 지우시겠습니까?\"\n            )) {\n                return;\n            }else {\n                for(let i=0; i<selectedData.length; i++) {\n                    selectedData[i].status = \"DELETE\";\n                }                \n                //positionGridApi.updateRowData({ update: selectedData.status});\n            }\n        }\n    };\n\n    const batchAll = () => {\n        let insertCount = 0;\n        let updateCount = 0;\n        let deleteCount = 0;\n\n        positionGridApi.forEacthNode((node, index) => {\n            let rowObject = node.data;\n            let status = rowObject.status;\n            if(status === \"INSERT\") {\n                if(rowObject.itemClassificationName === \"\") {\n                    alert(\"품목분류를 입력하지 않은 행이 있습니다. </br> 저장 목록에서 제외합니다.\");\n                }else if(rowObject.itemCode === \"\") {\n                    alert(\"품목코드를 입력하지 않은 행이 있습니다. </br> 저장 목록에서 제외합니다.\");\n                }else if(rowObject.netAmount === \"\") {\n                    alert(\"정미수량을 입력하지 않은 행이 있습니다 </br> 저장 목록에서 제외합니다\");\n                }else {\n                    resultList.push(rowObject);\n                    insertCount++;\n                }\n            }else if(status === \"UPDATE\") {\n                resultList.push(rowObject);\n                updateCount++;\n            }else if(status === \"DELETE\") {\n                if(rowObject.deleteStatus !== \"LOCAL 삭제\") {\n                    resultList.push(rowObject);\n                    deleteCount++;\n                }else {\n                    let removedRows = [];\n                    let selectRow = node.data;\n                    removedRows.push(selectRow);\n                    positionGridApi.updateRowData({ remove: [selectRow] });\n                }\n            }\n        });\n        let confirmMsg =\n            (insertCount !== 0 ? insertCount + \"개의 항목 추가\\n\" : \"\") +\n            (updateCount !== 0 ? updateCount + \"개의 항목 추가\\n\" : \"\") +\n            (deleteCount !== 0 ? deleteCount + \"개의 항목 추가\\n\" : \"\") +\n            \"\\r위와 같이 작업합니다. 계속하시겠습니까?\";\n        \n        let confirmStatus = \"\";\n\n        if(resultList.length !== 0) {\n            confirmStatus = window.confirm(confirmMsg);\n        }\n        if(resultList.length !== 0 && confirmStatus) {\n            batchBom();\n        }else if(resultList.length !== 0 && !confirmStatus) {\n            alert(\"취소되었습니다.\");\n        }else if(resultList.length === 0) {\n            alert(\"추가/수정/삭제할 항목이 없습니다.\");\n        }\n        resultList = [];\n    }; \n    \n    const handleClose = value => {\n        setDetailDialogOpen(false);\n        if(value.data === undefined) {\n            return;\n        }\n        if(value.data[0].detailCode.indexOf(\"IT\") >= 0) {\n            positionGridApi.getRowNode(nodeId).setDataValue(\"itemClassificationName\", value.data[0].detailCodeName);\n        }else {\n            let flag = false;\n            positionGridApi.forEachNode(node => {\n                if(node.data.itemCode === value.data[0].detailCode) {\n                    if(node.data.lev === \"1\") {\n                        alert(\"BOM 구성에 자기 자신인 품목을 등록할 수 없습니다.\\n 하위품목만 등록할 수 있습니다.\");\n                    }else {\n                        alert(\"BOM 구성에 이미 있는 품목입니다.\");\n                    }\n                    flag = true;\n                }\n            });\n            if(flag) {\n                return;\n            }\n            positionGridApi.getRowNode(nodeId).setDataValue(\"itemCode\", value.data[0].detailCode);\n            positionGridApi.getRowNode(nodeId).setDataValue(\"itemName\", value.data[0].detailCodeName);\n        }\n        if(positionGridApi.getRowNode(nodeId).data.status !== \"insert\") {\n            positionGridApi.getRowNode(nodeId).setDataValue(\"status\", \"UPDATE\");\n        }\n        getItemCode.setValue(value.data[0].detailCode);\n    }\n\n    return (\n        <>\n            <RegistHead \n                trItemCode = {setItemCode}\n                trDivisionCode = {setDivisionCode}\n                batchAll={batchAll}\n                searchBom = {searchBom}\n                setNodeId = {setNodeId}\n                setData = {setData}\n                bomData = {bom.data&&bom.data}\n                addNewRow = {addNewRow}\n                deleteRow = {deleteRow}\n            />\n\n            <RegistGrid \n                bomData = {bom.data&&bom.data}\n                onGridReady = {onGridReady}\n                onCellClicked = {onCellClicked}\n            />\n\n            <DetailDialog data = {data} open = {detailDialogOpen} close = {handleClose} />\n\n        </>\n    );\n};\n\nexport default Regist;"]},"metadata":{},"sourceType":"module"}