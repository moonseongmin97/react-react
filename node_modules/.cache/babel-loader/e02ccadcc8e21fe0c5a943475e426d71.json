{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lyn\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\base\\\\page\\\\WorkplaceManagement\\\\FinanceAccount.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport useStyles from \"erp/account/statement/page/AccountLedger/Theme\"; //계정별원장에서 css 땡겨씀\n\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport * as types from \"../../reducer/BaseReducer\";\nimport ThreeSixtyIcon from \"@material-ui/icons/ThreeSixty\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { Button } from \"@material-ui/core\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\"; //=============================== 2020-09-01 거래처관리 조편백 ======================================\n\nconst FinanceAccount = () => {\n  const classes = useStyles(); //스타일적용\n\n  const [data, setData] = useState(null); //useEffect 로 조회한 결과값 받는 상태 값\n\n  const [positionGridApi, setPositionGridApi] = useState(null); // 바뀌는 상태 값을 관리함\n\n  const dispatch = useDispatch(); //Redux 저장소에서 있는 함수를 데리고옴\n  //===================== useEffect로 비동기적으로 동작  ====================\n  //컴포넌트가 마운트 됐을 때 호출됨\n\n  useEffect(() => {\n    NormalAccountList(); // 함수호출\n  }, []);\n\n  function NormalAccountList() {\n    axios.get(\"http://localhost:8282/acc/base/getCustomerList\").then(response => {\n      setData(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  } //=============================== ag_grid 시작 ======================================\n\n\n  const FinanceAccountGrid = [// 칼럼정의\n  {\n    checkboxSelection: true,\n    rowSelection: \"multiple\",\n    rowMultiSelectWithClick: true,\n    width: \"80\"\n  }, {\n    headerName: \"금융 거래처코드\",\n    field: \"customerCode\",\n    sortable: true\n  }, // sortable 컬럼눌러서 오름차순내림차순 가능\n  {\n    headerName: \"사업장코드\",\n    field: \"workplaceCode\",\n    editable: true\n  }, {\n    headerName: \"금융기관코드\",\n    field: \"financiaLInstituteCode\",\n    editable: true\n  }, {\n    headerName: \"금융기관명\",\n    field: \"financialInstituteName\",\n    editable: true\n  }, {\n    headerName: \"금융거래처명\",\n    field: \"customerName\",\n    editable: true\n  }, {\n    headerName: \"계좌번호\",\n    field: \"accountNumber\",\n    editable: true\n  }, {\n    headerName: \"유형\",\n    field: \"customerType\",\n    editable: true\n  }, {\n    headerName: \"상태\",\n    field: \"status\",\n    hide: true\n  }];\n  /* \n     customerCode; 거래처코드 /  workplaceCode; 사업장코드 /  customerName; 거래처명 /  customerType; 거래처유형 /  customerCeo; 대표자 /  businessLicenseNumber; 사업자등록번호\n     / socialSecurityNumber; 주민등록번호 / customerBusinessConditions; 업태 / customerBusinessItems; 종목 / customerZipCode; 거래처우편번호 / customerBasicAddress; 거래처기본주소\n     customerDetailAddress; 거래처세부주소 / customerTelNumber; 거래처전화번호 / customerFaxNumber; 거래처팩스번호 / customerNote; 비고 / accountNumber; 계좌번호 /  cardNumber; 카드번호\n     cardType; 카드구분 / cardMemberName; 카드회원명 / cardOpenPlace; 카드가맹점번호 / financialInstituteCode; 금융기관코드 / financialInstituteName; 금융기관명\n     */\n  //=================================================== ag Grid 초기화 시 실행 =========================================\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api); //추가 수정 삭제 버튼누를때 그리드 값 사용하려고 할당함\n\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  }; //=================================================== 추가 ========================================================\n\n\n  const addBtn = () => {\n    //newCustomerCode()\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n\n    positionGridApi.updateRowData({\n      add: [newItem],\n      addIndex: \"\"\n    }); // ag그리드 api로 그리드에 add 함\n  }; //추가할 컬럼 선언\n\n\n  const NewRowData = () => {\n    positionGridApi.selectAll(); // 그리드 전체 값\n\n    const rows = positionGridApi.getSelectedRows(); // 그리드의 모든 값을 반환\n\n    const lastCode = JSON.stringify(rows[rows.length - 1].customerCode); // 마지막 customerCode 가져옴\n\n    const subCode = Number(lastCode.substring(5, 7)) + 1; //잘라서 숫자만 +1\n\n    const newCode = \"PTN-\" + subCode; //문자열과 합쳐줌\n\n    console.log(\" newCode : \" + newCode);\n    let newData = {\n      customerCode: newCode,\n      customerName: \"\",\n      customerTelNumber: \"\",\n      businessLicenseNumber: \"\",\n      customerBusinessConditions: \"\",\n      customerBusinessItems: \"\",\n      status: \"insert\"\n    };\n    return newData;\n  }; //=============================================== 수정 ============================================================\n  ////편집 허용인 컬럼을 더블 클릭할 때 발생하는 이벤트.\n\n\n  const rowCellChanged = e => {\n    if (e.data.status === \"insert\") {\n      return;\n    } else {\n      e.data.status = \"update\";\n    }\n  }; //=============================================== 삭제 ============================================================\n  //체크박스에 체크된 row만 삭제\n\n\n  const deleteBtn = () => {\n    const selectedData = positionGridApi.getSelectedRows(); //선택한 row\n\n    console.log(\":::::::::::::::\" + JSON.stringify(selectedData.customerName));\n\n    if (selectedData.length === 0) {\n      // 선택된게 없으면.\n      alert(\" 삭제할 항목을 선택해주세요 . 🙏 \");\n      return;\n    }\n\n    if (!window.confirm(\"⛔ \" + selectedData[0].customerName + \" 금융 거래처 정보를 삭제 하시겠습니까 ? ⛔ \")) {\n      alert(\"🧡💛💚💙💜🤎🖤🤍\");\n      return;\n    } else {\n      dispatch({\n        division: \"delete\",\n        type: types.BATCH_ACCOUNT_REQUEST,\n        params: {\n          customerCode: selectedData[0].customerCode\n        }\n      });\n    }\n\n    positionGridApi.updateRowData({\n      remove: selectedData\n    }); // 선택된 row 삭제\n\n    alert(\"삭제완료\");\n  }; //=============================================== 저장 ============================================================\n\n\n  const saveBtn = () => {\n    positionGridApi.selectAll(); // 그리드 전체 값\n\n    const rows = positionGridApi.getSelectedRows(); // 그리드의 모든 값을 반환\n\n    const rowsCount = positionGridApi.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n\n    if (!window.confirm(\" 저장하시겠습니까 ? \")) {\n      alert(\"💙 취소 완료 💙\");\n      return;\n    } else {\n      for (var i = 0; i < rowsCount; i++) {\n        delete rows[i].errorCode;\n        delete rows[i].errorMsg;\n        delete rows[i].chk;\n\n        if (rows[i].customerCode.length < 6) {\n          alert(\"거래처명을 입력해주세요.\");\n          return;\n        }\n\n        console.log(\"33333333333333  \" + JSON.stringify(data));\n      }\n\n      dispatch({\n        division: \"save\",\n        type: types.BATCH_ACCOUNT_REQUEST,\n        params: {\n          customerList: rows\n        }\n      });\n    }\n\n    alert(\"💚 저장완료 💚\");\n    NormalAccountList(); //조회\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(React.Fragment, null, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    align: \"center\",\n    className: classes.root3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: addBtn,\n    startIcon: React.createElement(Icon, {\n      className: \"fa fa-plus-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"\\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: deleteBtn,\n    startIcon: React.createElement(DeleteOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: saveBtn,\n    startIcon: React.createElement(ThreeSixtyIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"\\uC800\\uC7A5\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    skipHeaderOnAutoSize: \"true\",\n    enableColResize: \"true\",\n    enableSorting: \"true\",\n    enableFilter: \"true\",\n    enableRangeSelection: \"true\",\n    rowSelection: \"multiple\",\n    rowMultiSelectWithClick: \"true\",\n    rowStyle: {\n      \"text-align\": \"center\"\n    },\n    style: {\n      height: \"550px\",\n      width: \"100%\",\n      paddingTop: \"25px\",\n      float: \"center\"\n    },\n    cellStyle: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: FinanceAccountGrid //정의된 컬럼\n    ,\n    rowData: data //Reduce에서 받아온 데이터\n    ,\n    rowSelection: \"multiple\" //하나만 선택하거나 복수개를 선택할 수 있음\n    ,\n    onGridReady: onGridReady //onload 이벤트와 유사한 것\n    ,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onCellEditingStarted: rowCellChanged //편집 허용인 칼럼을 더블 클릭할 때 발생하는 이벤트.\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  })));\n};\n\nexport default FinanceAccount;","map":{"version":3,"sources":["C:/Users/Lyn/Desktop/68REACT/68REACT/68REACT/src/erp/account/base/page/WorkplaceManagement/FinanceAccount.js"],"names":["React","useEffect","useState","AgGridReact","useStyles","axios","useDispatch","types","ThreeSixtyIcon","DeleteOutlinedIcon","Icon","Button","useThemeSwitcher","FinanceAccount","classes","data","setData","positionGridApi","setPositionGridApi","dispatch","NormalAccountList","get","then","response","catch","e","console","log","FinanceAccountGrid","checkboxSelection","rowSelection","rowMultiSelectWithClick","width","headerName","field","sortable","editable","hide","onGridReady","params","api","sizeColumnsToFit","addBtn","newItem","NewRowData","updateRowData","add","addIndex","selectAll","rows","getSelectedRows","lastCode","JSON","stringify","length","customerCode","subCode","Number","substring","newCode","newData","customerName","customerTelNumber","businessLicenseNumber","customerBusinessConditions","customerBusinessItems","status","rowCellChanged","deleteBtn","selectedData","alert","window","confirm","division","type","BATCH_ACCOUNT_REQUEST","remove","saveBtn","rowsCount","getDisplayedRowCount","i","errorCode","errorMsg","chk","customerList","dark","root3","height","paddingTop","float","textAlign","param"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport useStyles from \"erp/account/statement/page/AccountLedger/Theme\"; //계정별원장에서 css 땡겨씀\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport * as types from \"../../reducer/BaseReducer\";\nimport ThreeSixtyIcon from \"@material-ui/icons/ThreeSixty\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { Button } from \"@material-ui/core\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\n//=============================== 2020-09-01 거래처관리 조편백 ======================================\nconst FinanceAccount = () => {\n  const classes = useStyles(); //스타일적용\n  const [data, setData] = useState(null); //useEffect 로 조회한 결과값 받는 상태 값\n  const [positionGridApi, setPositionGridApi] = useState(null); // 바뀌는 상태 값을 관리함\n  const dispatch = useDispatch(); //Redux 저장소에서 있는 함수를 데리고옴\n\n  //===================== useEffect로 비동기적으로 동작  ====================\n\n  //컴포넌트가 마운트 됐을 때 호출됨\n  useEffect(() => {\n    NormalAccountList(); // 함수호출\n  }, []);\n\n  function NormalAccountList() {\n    axios\n      .get(\"http://localhost:8282/acc/base/getCustomerList\")\n      .then(response => {\n        setData(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  //=============================== ag_grid 시작 ======================================\n\n  const FinanceAccountGrid = [\n    // 칼럼정의\n    {\n      checkboxSelection: true,\n      rowSelection: \"multiple\",\n      rowMultiSelectWithClick: true,\n      width: \"80\",\n    },\n    { headerName: \"금융 거래처코드\", field: \"customerCode\", sortable: true }, // sortable 컬럼눌러서 오름차순내림차순 가능\n    { headerName: \"사업장코드\", field: \"workplaceCode\", editable: true },\n    {\n      headerName: \"금융기관코드\",\n      field: \"financiaLInstituteCode\",\n      editable: true,\n    },\n    {\n      headerName: \"금융기관명\",\n      field: \"financialInstituteName\",\n      editable: true,\n    },\n    { headerName: \"금융거래처명\", field: \"customerName\", editable: true },\n    { headerName: \"계좌번호\", field: \"accountNumber\", editable: true },\n    { headerName: \"유형\", field: \"customerType\", editable: true },\n    { headerName: \"상태\", field: \"status\", hide: true },\n  ];\n  /* \n     customerCode; 거래처코드 /  workplaceCode; 사업장코드 /  customerName; 거래처명 /  customerType; 거래처유형 /  customerCeo; 대표자 /  businessLicenseNumber; 사업자등록번호\n     / socialSecurityNumber; 주민등록번호 / customerBusinessConditions; 업태 / customerBusinessItems; 종목 / customerZipCode; 거래처우편번호 / customerBasicAddress; 거래처기본주소\n     customerDetailAddress; 거래처세부주소 / customerTelNumber; 거래처전화번호 / customerFaxNumber; 거래처팩스번호 / customerNote; 비고 / accountNumber; 계좌번호 /  cardNumber; 카드번호\n     cardType; 카드구분 / cardMemberName; 카드회원명 / cardOpenPlace; 카드가맹점번호 / financialInstituteCode; 금융기관코드 / financialInstituteName; 금융기관명\n     */\n\n  //=================================================== ag Grid 초기화 시 실행 =========================================\n  const onGridReady = params => {\n    setPositionGridApi(params.api); //추가 수정 삭제 버튼누를때 그리드 값 사용하려고 할당함\n\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n\n  //=================================================== 추가 ========================================================\n\n  const addBtn = () => {\n    //newCustomerCode()\n    const newItem = NewRowData(); //새로운 row를 변수에담음\n    positionGridApi.updateRowData({ add: [newItem], addIndex: \"\" }); // ag그리드 api로 그리드에 add 함\n  };\n  //추가할 컬럼 선언\n  const NewRowData = () => {\n    positionGridApi.selectAll(); // 그리드 전체 값\n    const rows = positionGridApi.getSelectedRows(); // 그리드의 모든 값을 반환\n    const lastCode = JSON.stringify(rows[rows.length - 1].customerCode); // 마지막 customerCode 가져옴\n    const subCode = Number(lastCode.substring(5, 7)) + 1; //잘라서 숫자만 +1\n    const newCode = \"PTN-\" + subCode; //문자열과 합쳐줌\n    console.log(\" newCode : \" + newCode);\n\n    let newData = {\n      customerCode: newCode,\n      customerName: \"\",\n      customerTelNumber: \"\",\n      businessLicenseNumber: \"\",\n      customerBusinessConditions: \"\",\n      customerBusinessItems: \"\",\n      status: \"insert\",\n    };\n    return newData;\n  };\n\n  //=============================================== 수정 ============================================================\n\n  ////편집 허용인 컬럼을 더블 클릭할 때 발생하는 이벤트.\n  const rowCellChanged = e => {\n    if (e.data.status === \"insert\") {\n      return;\n    } else {\n      e.data.status = \"update\";\n    }\n  };\n\n  //=============================================== 삭제 ============================================================\n\n  //체크박스에 체크된 row만 삭제\n  const deleteBtn = () => {\n    const selectedData = positionGridApi.getSelectedRows(); //선택한 row\n    console.log(\":::::::::::::::\" + JSON.stringify(selectedData.customerName));\n    if (selectedData.length === 0) {\n      // 선택된게 없으면.\n      alert(\" 삭제할 항목을 선택해주세요 . 🙏 \");\n      return;\n    }\n    if (\n      !window.confirm(\n        \"⛔ \" +\n          selectedData[0].customerName +\n          \" 금융 거래처 정보를 삭제 하시겠습니까 ? ⛔ \",\n      )\n    ) {\n      alert(\"🧡💛💚💙💜🤎🖤🤍\");\n      return;\n    } else {\n      dispatch({\n        division: \"delete\",\n        type: types.BATCH_ACCOUNT_REQUEST,\n        params: { customerCode: selectedData[0].customerCode },\n      });\n    }\n    positionGridApi.updateRowData({ remove: selectedData }); // 선택된 row 삭제\n    alert(\"삭제완료\");\n  };\n\n  //=============================================== 저장 ============================================================\n\n  const saveBtn = () => {\n    positionGridApi.selectAll(); // 그리드 전체 값\n    const rows = positionGridApi.getSelectedRows(); // 그리드의 모든 값을 반환\n    const rowsCount = positionGridApi.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n\n    if (!window.confirm(\" 저장하시겠습니까 ? \")) {\n      alert(\"💙 취소 완료 💙\");\n      return;\n    } else {\n      for (var i = 0; i < rowsCount; i++) {\n        delete rows[i].errorCode;\n        delete rows[i].errorMsg;\n        delete rows[i].chk;\n        if (rows[i].customerCode.length < 6) {\n          alert(\"거래처명을 입력해주세요.\");\n          return;\n        }\n        console.log(\"33333333333333  \" + JSON.stringify(data));\n      }\n      dispatch({\n        division: \"save\",\n        type: types.BATCH_ACCOUNT_REQUEST,\n        params: { customerList: rows },\n      });\n    }\n    alert(\"💚 저장완료 💚\");\n    NormalAccountList(); //조회\n  };\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <>\n      <br />\n      <div align=\"center\" className={classes.root3}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={addBtn}\n          startIcon={<Icon className=\"fa fa-plus-circle\" />}\n        >\n          추가\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={deleteBtn}\n          startIcon={<DeleteOutlinedIcon />}\n        >\n          삭제\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={saveBtn}\n          startIcon={<ThreeSixtyIcon />}\n        >\n          저장\n        </Button>\n      </div>\n      <br />\n      <br />\n      <div\n        className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n        skipHeaderOnAutoSize=\"true\"\n        enableColResize=\"true\"\n        enableSorting=\"true\"\n        enableFilter=\"true\"\n        enableRangeSelection=\"true\"\n        rowSelection=\"multiple\"\n        rowMultiSelectWithClick=\"true\"\n        rowStyle={{ \"text-align\": \"center\" }}\n        style={{\n          height: \"550px\",\n          width: \"100%\",\n          paddingTop: \"25px\",\n          float: \"center\",\n        }}\n        cellStyle={{ textAlign: \"center\" }}\n      >\n        <AgGridReact\n          columnDefs={FinanceAccountGrid} //정의된 컬럼\n          rowData={data} //Reduce에서 받아온 데이터\n          rowSelection=\"multiple\" //하나만 선택하거나 복수개를 선택할 수 있음\n          onGridReady={onGridReady} //onload 이벤트와 유사한 것\n          getRowStyle={function(param) {\n            return { \"text-align\": \"center\" };\n          }} //body 가운데 정렬\n          onCellEditingStarted={rowCellChanged} //편집 허용인 칼럼을 더블 클릭할 때 발생하는 이벤트.\n        />\n      </div>\n    </>\n  );\n};\n\nexport default FinanceAccount;\n"]},"metadata":{},"sourceType":"module"}