{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\NonCurrentAsset\\\\NonCurrentAssetRegister.js\";\nimport React, { useEffect, useState } from \"react\";\nimport useStyles from \"erp/account/account/page/Slip/Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport OpenCodeDialog from \"./Dialog/OpenCodeDialog\";\nimport { SEARCH_NON_CURRENT_REQUEST, DELETE_NON_CURRENT_START } from \"../../reducer/AccountReducer\";\nimport { List, AppBar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport $ from \"jquery\";\nimport jQuery from \"jquery\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n/*##################################### 2020-11-20납품현황 박민호 #######################################*/\n\nwindow.$ = window.jQuery = jQuery;\n\nconst NonCurrentAssetRegister = props => {\n  const [dialogData, setDialogData] = useState(\"\");\n  const [positionGridApi, setPositionGridApi] = React.useState();\n  var [openCodeDialog, setopenCodeDialog] = useState(false);\n  const data = useSelector(({\n    AccReducer\n  }) => AccReducer.AccountReducer.nonCurrentAsset, []); //DB에서 받아온 값 을 그리드에뿌리려고 데꼬옴\n\n  const theme = useStyles();\n  const dispatch = useDispatch();\n  const [rowData, setRowData] = useState([]);\n  const [visibleState, setVisibleState] = useState(true);\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n\n  const column = {\n    accountColumnDefs: [{\n      headerName: \"\",\n      field: \"check\",\n      width: 50,\n      checkboxSelection: true\n    }, {\n      headerName: \"계정코드\",\n      field: \"accountCode\",\n      width: 80\n    }, {\n      headerName: \"계정명\",\n      field: \"accountName\",\n      width: 135\n    }, {\n      headerName: \"자산코드\",\n      field: \"assetCode\",\n      width: 140\n    }, {\n      headerName: \"자산명\",\n      field: \"assetName\",\n      editable: true,\n      width: 150\n    }, {\n      headerName: \"취득일\",\n      field: \"progress\",\n      editable: true,\n      width: 100,\n      cellEditor: \"datePicker\"\n    }, {\n      headerName: \"처리여부\",\n      field: \"finalizeStatus\",\n      width: 100\n    }],\n    autoGroupColumnDef: {\n      minWidth: 100\n    }\n  };\n\n  function getDatePicker() {\n    function Datepicker() {}\n\n    Datepicker.prototype.init = function (params) {\n      this.eInput = document.createElement(\"input\");\n      this.eInput.value = params.value;\n      this.eInput.classList.add(\"ag-input\");\n      this.eInput.style.height = \"100%\";\n      $(this.eInput).datepicker({\n        dateFormat: \"yy/mm/dd\"\n      });\n    };\n\n    Datepicker.prototype.getGui = function () {\n      return this.eInput;\n    };\n\n    Datepicker.prototype.afterGuiAttached = function () {\n      this.eInput.focus();\n      this.eInput.select();\n    };\n\n    Datepicker.prototype.getValue = function () {\n      return this.eInput.value;\n    };\n\n    Datepicker.prototype.destroy = function () {};\n\n    Datepicker.prototype.isPopup = function () {\n      return false;\n    };\n\n    return Datepicker;\n  }\n\n  const openCode = () => {\n    setopenCodeDialog(true);\n  };\n\n  const handleOpenCode = value => {\n    setopenCodeDialog(false);\n    console.log(\"##########################\", value);\n\n    if (value.data === undefined || value.data === null) {\n      return;\n    } else {\n      setDialogData(value.data);\n    }\n  };\n\n  const onCellClicked = params => {\n    const selectedRows = params.api.getSelectedRows(); //선택한 전표 Grid row 1줄을 들고옴\n\n    console.log(\"selectedRows\", selectedRows);\n\n    if (selectedRows[0].assetName !== \"\" && selectedRows[0].progress !== \"\") {\n      props.setVisibleState(false);\n    }\n\n    props.setNonCurrentAsst(selectedRows);\n  };\n\n  const addColum = () => {\n    setVisibleState(true);\n    positionGridApi.updateRowData({\n      add: [NewRowData()],\n      addIndex: \"\"\n    });\n  };\n\n  const NewRowData = () => {\n    let newData = {\n      accountCode: dialogData[0].accountCode,\n      accountName: dialogData[0].accountName,\n      assetCode: \"자동생성\",\n      assetName: \"\",\n      progress: \"\",\n      finalizeStatus: \"진행\"\n    };\n    return newData;\n  };\n\n  const removeColum = () => {\n    let Noncarow = positionGridApi.getSelectedRows();\n\n    if (Noncarow.length === 0) {\n      alert(\"삭제할 그리드 선택 바랍니다\");\n      return;\n    }\n\n    dispatch({\n      type: DELETE_NON_CURRENT_START,\n      param: {\n        assetCode: Noncarow[0].assetCode\n      }\n    });\n    positionGridApi.updateRowData({\n      remove: Noncarow\n    });\n  };\n\n  useEffect(() => {\n    if (dialogData[0] !== undefined) {\n      console.log(\"@@@@@@@@#########\");\n      positionGridApi.selectAll(); // 그리드를 모두 선택해라.\n\n      const allData = positionGridApi.getSelectedRows(); // 선택한 그리드 데이타 들고온나.\n\n      positionGridApi.updateRowData({\n        remove: allData\n      }); // 데이터 전부 지아라.\n\n      dispatch({\n        type: SEARCH_NON_CURRENT_REQUEST,\n        params: {\n          accountName: dialogData[0].accountName,\n          accountCode: dialogData[0].accountCode\n        }\n      });\n      setRowData(data);\n      setVisibleState(\"\");\n    }\n  }, [dialogData]);\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(OpenCodeDialog, {\n    open: openCodeDialog,\n    close: handleOpenCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: theme.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    color: \"primary\",\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"\\uACE0\\uC815\\uC790\\uC0B0\"), React.createElement(Typography, {\n    variant: \"h6\",\n    className: theme.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: openCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"\\uC870\\uD68C\"), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: addColum,\n    disabled: visibleState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"\\uCD94\\uAC00\"), React.createElement(Button, {\n    className: theme.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: removeColum,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\")))), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    style: {\n      height: \"340px\",\n      width: \"100%\" //paddingTop: \"8px\",\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: column.accountColumnDefs //컬럼명\n    ,\n    rowSelection: \"single\",\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onGridReady: onGridReady,\n    autoGroupColumnDef: column.autoGroupColumnDef,\n    onGridSizeChanged: event => {\n      event.api.sizeColumnsToFit();\n    },\n    components: {\n      datePicker: getDatePicker()\n    },\n    rowData: data,\n    onCellClicked: onCellClicked //셀 한번클릭\n    //domLayout={\"autoHeight\"}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }))));\n};\n\nexport default NonCurrentAssetRegister;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/page/NonCurrentAsset/NonCurrentAssetRegister.js"],"names":["React","useEffect","useState","useStyles","AgGridReact","useDispatch","useSelector","OpenCodeDialog","SEARCH_NON_CURRENT_REQUEST","DELETE_NON_CURRENT_START","List","AppBar","Button","Toolbar","Typography","$","jQuery","useThemeSwitcher","window","NonCurrentAssetRegister","props","dialogData","setDialogData","positionGridApi","setPositionGridApi","openCodeDialog","setopenCodeDialog","data","AccReducer","AccountReducer","nonCurrentAsset","theme","dispatch","rowData","setRowData","visibleState","setVisibleState","onGridReady","params","api","sizeColumnsToFit","column","accountColumnDefs","headerName","field","width","checkboxSelection","editable","cellEditor","autoGroupColumnDef","minWidth","getDatePicker","Datepicker","prototype","init","eInput","document","createElement","value","classList","add","style","height","datepicker","dateFormat","getGui","afterGuiAttached","focus","select","getValue","destroy","isPopup","openCode","handleOpenCode","console","log","undefined","onCellClicked","selectedRows","getSelectedRows","assetName","progress","setNonCurrentAsst","addColum","updateRowData","NewRowData","addIndex","newData","accountCode","accountName","assetCode","finalizeStatus","removeColum","Noncarow","length","alert","type","param","remove","selectAll","allData","dark","root","title","menuButton","event","datePicker"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport useStyles from \"erp/account/account/page/Slip/Theme\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport OpenCodeDialog from \"./Dialog/OpenCodeDialog\";\nimport {\n  SEARCH_NON_CURRENT_REQUEST,\n  DELETE_NON_CURRENT_START,\n} from \"../../reducer/AccountReducer\";\nimport { List, AppBar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport $ from \"jquery\";\nimport jQuery from \"jquery\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n/*##################################### 2020-11-20납품현황 박민호 #######################################*/\nwindow.$ = window.jQuery = jQuery;\nconst NonCurrentAssetRegister = props => {\n  const [dialogData, setDialogData] = useState(\"\");\n  const [positionGridApi, setPositionGridApi] = React.useState();\n  var [openCodeDialog, setopenCodeDialog] = useState(false);\n  const data = useSelector(({ AccReducer }) => AccReducer.AccountReducer.nonCurrentAsset, []); //DB에서 받아온 값 을 그리드에뿌리려고 데꼬옴\n  const theme = useStyles();\n  const dispatch = useDispatch();\n  const [rowData, setRowData] = useState([]);\n  const [visibleState, setVisibleState] = useState(true);\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n  const column = {\n    accountColumnDefs: [\n      { headerName: \"\", field: \"check\", width: 50, checkboxSelection: true },\n      { headerName: \"계정코드\", field: \"accountCode\", width: 80 },\n      { headerName: \"계정명\", field: \"accountName\", width: 135 },\n      { headerName: \"자산코드\", field: \"assetCode\", width: 140 },\n      { headerName: \"자산명\", field: \"assetName\", editable: true, width: 150 },\n      {\n        headerName: \"취득일\",\n        field: \"progress\",\n        editable: true,\n        width: 100,\n        cellEditor: \"datePicker\",\n      },\n      { headerName: \"처리여부\", field: \"finalizeStatus\", width: 100 },\n    ],\n    autoGroupColumnDef: { minWidth: 100 },\n  };\n  function getDatePicker() {\n    function Datepicker() {}\n    Datepicker.prototype.init = function(params) {\n      this.eInput = document.createElement(\"input\");\n      this.eInput.value = params.value;\n      this.eInput.classList.add(\"ag-input\");\n      this.eInput.style.height = \"100%\";\n\n      $(this.eInput).datepicker({ dateFormat: \"yy/mm/dd\" });\n    };\n    Datepicker.prototype.getGui = function() {\n      return this.eInput;\n    };\n    Datepicker.prototype.afterGuiAttached = function() {\n      this.eInput.focus();\n      this.eInput.select();\n    };\n    Datepicker.prototype.getValue = function() {\n      return this.eInput.value;\n    };\n    Datepicker.prototype.destroy = function() {};\n    Datepicker.prototype.isPopup = function() {\n      return false;\n    };\n    return Datepicker;\n  }\n\n  const openCode = () => {\n    setopenCodeDialog(true);\n  };\n  const handleOpenCode = value => {\n    setopenCodeDialog(false);\n    console.log(\"##########################\", value);\n    if (value.data === undefined || value.data === null) {\n      return;\n    } else {\n      setDialogData(value.data);\n    }\n  };\n  const onCellClicked = params => {\n    const selectedRows = params.api.getSelectedRows(); //선택한 전표 Grid row 1줄을 들고옴\n\n    console.log(\"selectedRows\", selectedRows);\n    if (selectedRows[0].assetName !== \"\" && selectedRows[0].progress !== \"\") {\n      props.setVisibleState(false);\n    }\n    props.setNonCurrentAsst(selectedRows);\n  };\n\n  const addColum = () => {\n    setVisibleState(true);\n    positionGridApi.updateRowData({ add: [NewRowData()], addIndex: \"\" });\n  };\n  const NewRowData = () => {\n    let newData = {\n      accountCode: dialogData[0].accountCode,\n      accountName: dialogData[0].accountName,\n      assetCode: \"자동생성\",\n      assetName: \"\",\n      progress: \"\",\n      finalizeStatus: \"진행\",\n    };\n    return newData;\n  };\n  const removeColum = () => {\n    let Noncarow = positionGridApi.getSelectedRows();\n    if (Noncarow.length === 0) {\n      alert(\"삭제할 그리드 선택 바랍니다\");\n      return;\n    }\n    dispatch({\n      type: DELETE_NON_CURRENT_START,\n      param: {\n        assetCode: Noncarow[0].assetCode,\n      },\n    });\n    positionGridApi.updateRowData({ remove: Noncarow });\n  };\n\n  useEffect(() => {\n    if (dialogData[0] !== undefined) {\n      console.log(\"@@@@@@@@#########\");\n      positionGridApi.selectAll(); // 그리드를 모두 선택해라.\n      const allData = positionGridApi.getSelectedRows(); // 선택한 그리드 데이타 들고온나.\n      positionGridApi.updateRowData({ remove: allData }); // 데이터 전부 지아라.\n\n      dispatch({\n        type: SEARCH_NON_CURRENT_REQUEST,\n        params: {\n          accountName: dialogData[0].accountName,\n          accountCode: dialogData[0].accountCode,\n        },\n      });\n      setRowData(data);\n      setVisibleState(\"\");\n    }\n  }, [dialogData]);\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <div>\n      <OpenCodeDialog open={openCodeDialog} close={handleOpenCode} />\n      <List>\n        <div className={theme.root}>\n          <AppBar color=\"primary\" position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h4\">고정자산</Typography>\n              <Typography variant=\"h6\" className={theme.title}></Typography>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={openCode}\n              >\n                조회\n              </Button>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={addColum}\n                disabled={visibleState}\n              >\n                추가\n              </Button>\n              <Button\n                className={theme.menuButton}\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={removeColum}\n              >\n                삭제\n              </Button>\n            </Toolbar>\n          </AppBar>\n        </div>\n        <div\n          className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n          style={{\n            height: \"340px\",\n            width: \"100%\",\n            //paddingTop: \"8px\",\n          }}\n        >\n          <AgGridReact\n            columnDefs={column.accountColumnDefs} //컬럼명\n            rowSelection=\"single\"\n            getRowStyle={function(param) {\n              return { \"text-align\": \"center\" };\n            }} //body 가운데 정렬\n            onGridReady={onGridReady}\n            autoGroupColumnDef={column.autoGroupColumnDef}\n            onGridSizeChanged={event => {\n              event.api.sizeColumnsToFit();\n            }}\n            components={{ datePicker: getDatePicker() }}\n            rowData={data}\n            onCellClicked={onCellClicked} //셀 한번클릭\n            //domLayout={\"autoHeight\"}\n          />\n        </div>\n      </List>\n    </div>\n  );\n};\n\nexport default NonCurrentAssetRegister;\n"]},"metadata":{},"sourceType":"module"}