{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\base\\\\page\\\\CodeInfo\\\\CodeGrid.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { searchCodeList, addCodeList, saveCodeList, updateCodeList, delCodeTO } from 'erp/logistic/base/action/LogisticsInfoAction';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport AddCodeInfo from './AddCodeInfo';\n\nfunction CodeGrid(props) {\n  const dispatch = useDispatch();\n  const codeList = useSelector(state => state.logistic.logisticsinfo.codeList);\n  const list = codeList.filter(ele => {\n    if (ele.status !== 'DELETE') {\n      return ele;\n    }\n  });\n  const [addOpenDialog, setAddOpenDialog] = useState(false);\n  const [edit, setEdit] = useState(false);\n  const [codeGird, setCodeGrid] = useState();\n  const column = {\n    columnDefs: [{\n      width: '80',\n      headerCheckboxSelection: false,\n      checkboxSelection: true\n    }, {\n      headerName: '구분 코드',\n      field: 'divisionCodeNo'\n    }, // hide:true\n    {\n      headerName: '코드 타입',\n      field: 'codeType'\n    }, {\n      headerName: '코드명',\n      field: 'divisionCodeName'\n    }, {\n      headerName: '변경',\n      field: 'codeChangeAvailable'\n    }, {\n      width: '400',\n      headerName: '설명',\n      field: 'description',\n      editable: edit\n    }, {\n      headerName: '상태',\n      field: 'status',\n      hide: true\n    } // editable : 편집가능  hide:true\n    ]\n  };\n\n  const onCellClicked = params => {\n    props.onClick(params.data.divisionCodeNo);\n\n    if (params.data.codeChangeAvailable === '변경가능') {\n      props.setEdit(true);\n      setEdit(true);\n      codeGird.sizeColumnsToFit();\n      UpdateRow(params);\n    } else {\n      props.setEdit(false);\n      setEdit(false);\n      codeGird.sizeColumnsToFit();\n    }\n  };\n\n  const UpdateRow = params => {\n    params.data.status = 'UPDATE';\n    dispatch(updateCodeList({\n      divisionCodeNo: params.data.divisionCodeNo\n    }));\n  };\n\n  const codeApi = params => {\n    setCodeGrid(params.api);\n  };\n\n  const addClick = () => {\n    setAddOpenDialog(true);\n  };\n\n  const delClick = () => {\n    const selRowIndex = codeGird.getSelectedNodes();\n\n    for (var i = 0; i < selRowIndex.length; i++) {\n      var nodeIndex = selRowIndex[i].childIndex;\n      if (codeGird.getRowNode(nodeIndex).data.status === 'INSERT') codeGird.getRowNode(nodeIndex).data.status = '';else codeGird.getRowNode(nodeIndex).data.status = 'DELETE';\n    } //console.log(rowsCount);\n\n\n    var newList = [];\n    codeGird.forEachNodeAfterFilter(ele => {\n      newList = [...newList, ele.data];\n      return ele.data;\n    });\n    dispatch(delCodeTO({\n      newList\n    }));\n  };\n\n  const close = () => {\n    setAddOpenDialog(false);\n  };\n\n  const codeSubmit = codeTo => {\n    dispatch(addCodeList({\n      codeTo\n    }));\n    setAddOpenDialog(false);\n  };\n\n  const saveClick = () => {\n    var list = [];\n    codeGird.forEachNode(node => {\n      list = [...list, node.data];\n    });\n    var delList = codeList.filter(ele => {\n      if (ele.status === 'DELETE') return ele;\n    }); // console.log('list',list);\n    //console.log('delList',delList);\n\n    var totalList;\n\n    if (delList[0] !== undefined) {\n      var nList = delList.map(ele => {\n        // if(ele===undefined)\n        //     return list;\n        return [...list, ele];\n      });\n      totalList = nList[0];\n    }\n\n    if (delList[0] === undefined) {\n      totalList = list;\n    } //console.log(totalList)\n\n\n    dispatch(saveCodeList(totalList));\n  };\n\n  useEffect(() => {\n    dispatch(searchCodeList());\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(MyGrid, {\n    column: column,\n    title: '코드 관리',\n    list: list,\n    onCellClicked: onCellClicked,\n    rowSelection: \"multiple\",\n    api: codeApi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: addClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"\\uCF54\\uB4DC \\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: delClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"\\uCF54\\uB4DC \\uC0AD\\uC81C\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: saveClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"\\uC77C\\uAD04\\uC800\\uC7A5\")), React.createElement(MyDialog, {\n    open: addOpenDialog,\n    close: close,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(AddCodeInfo, {\n    onSubmit: codeSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }))));\n}\n\nexport default CodeGrid;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/erp/logistic/base/page/CodeInfo/CodeGrid.js"],"names":["React","useEffect","useState","Button","MyGrid","useDispatch","useSelector","searchCodeList","addCodeList","saveCodeList","updateCodeList","delCodeTO","MyDialog","AddCodeInfo","CodeGrid","props","dispatch","codeList","state","logistic","logisticsinfo","list","filter","ele","status","addOpenDialog","setAddOpenDialog","edit","setEdit","codeGird","setCodeGrid","column","columnDefs","width","headerCheckboxSelection","checkboxSelection","headerName","field","editable","hide","onCellClicked","params","onClick","data","divisionCodeNo","codeChangeAvailable","sizeColumnsToFit","UpdateRow","codeApi","api","addClick","delClick","selRowIndex","getSelectedNodes","i","length","nodeIndex","childIndex","getRowNode","newList","forEachNodeAfterFilter","close","codeSubmit","codeTo","saveClick","forEachNode","node","delList","totalList","undefined","nList","map","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    searchCodeList,\n    addCodeList,\n    saveCodeList,\n    updateCodeList,\n    delCodeTO\n} from 'erp/logistic/base/action/LogisticsInfoAction';\nimport MyDialog from 'util/LogiUtil/MyDialog';\nimport AddCodeInfo from './AddCodeInfo';\n\nfunction CodeGrid(props) {\n    const dispatch = useDispatch();\n    const codeList = useSelector(state => state.logistic.logisticsinfo.codeList);\n    const list = codeList.filter(ele => {\n        if (ele.status !== 'DELETE') {\n            return ele;\n        }\n    });\n    const [addOpenDialog, setAddOpenDialog] = useState(false);\n    const [edit, setEdit] = useState(false);\n    const [codeGird, setCodeGrid] = useState();\n\n    const column = {\n        columnDefs: [\n            { width: '80', headerCheckboxSelection: false, checkboxSelection: true },\n            { headerName: '구분 코드', field: 'divisionCodeNo' }, // hide:true\n            { headerName: '코드 타입', field: 'codeType' },\n            { headerName: '코드명', field: 'divisionCodeName' },\n            { headerName: '변경', field: 'codeChangeAvailable' },\n            { width: '400', headerName: '설명', field: 'description', editable: edit },\n            { headerName: '상태', field: 'status', hide: true } // editable : 편집가능  hide:true\n        ]\n    };\n\n    const onCellClicked = params => {\n        props.onClick(params.data.divisionCodeNo);\n        if (params.data.codeChangeAvailable === '변경가능') {\n            props.setEdit(true);\n            setEdit(true);\n            codeGird.sizeColumnsToFit();\n            UpdateRow(params);\n        } else {\n            props.setEdit(false);\n            setEdit(false);\n            codeGird.sizeColumnsToFit();\n        }\n    };\n    const UpdateRow = params => {\n        params.data.status = 'UPDATE';\n        dispatch(updateCodeList({ divisionCodeNo: params.data.divisionCodeNo }));\n    };\n\n    const codeApi = params => {\n        setCodeGrid(params.api);\n    };\n\n    const addClick = () => {\n        setAddOpenDialog(true);\n    };\n\n    const delClick = () => {\n        const selRowIndex = codeGird.getSelectedNodes();\n        for (var i = 0; i < selRowIndex.length; i++) {\n            var nodeIndex = selRowIndex[i].childIndex;\n            if (codeGird.getRowNode(nodeIndex).data.status === 'INSERT')\n                codeGird.getRowNode(nodeIndex).data.status = '';\n            else codeGird.getRowNode(nodeIndex).data.status = 'DELETE';\n        }\n\n        //console.log(rowsCount);\n        var newList = [];\n        codeGird.forEachNodeAfterFilter(ele => {\n            newList = [...newList, ele.data];\n            return ele.data;\n        });\n        dispatch(delCodeTO({ newList }));\n    };\n\n    const close = () => {\n        setAddOpenDialog(false);\n    };\n    const codeSubmit = codeTo => {\n        dispatch(addCodeList({ codeTo }));\n        setAddOpenDialog(false);\n    };\n\n    const saveClick = () => {\n        var list = [];\n        codeGird.forEachNode(node => {\n            list = [...list, node.data];\n        });\n        var delList = codeList.filter(ele => {\n            if (ele.status === 'DELETE') return ele;\n        });\n        // console.log('list',list);\n        //console.log('delList',delList);\n        var totalList;\n        if (delList[0] !== undefined) {\n            var nList = delList.map(ele => {\n                // if(ele===undefined)\n                //     return list;\n                return [...list, ele];\n            });\n            totalList = nList[0];\n        }\n        if (delList[0] === undefined) {\n            totalList = list;\n        }\n        //console.log(totalList)\n        dispatch(saveCodeList(totalList));\n    };\n\n    useEffect(() => {\n        dispatch(searchCodeList());\n    }, []);\n\n    return (\n        <>\n            <MyGrid\n                column={column}\n                title={'코드 관리'}\n                list={list}\n                onCellClicked={onCellClicked}\n                rowSelection=\"multiple\"\n                api={codeApi}\n            >\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={addClick}\n                >\n                    코드 추가\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={delClick}\n                >\n                    코드 삭제\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={saveClick}>\n                    일괄저장\n                </Button>\n            </MyGrid>\n            <MyDialog open={addOpenDialog} close={close}>\n                <div>\n                    <AddCodeInfo onSubmit={codeSubmit} />\n                </div>\n            </MyDialog>\n        </>\n    );\n}\n\nexport default CodeGrid;\n"]},"metadata":{},"sourceType":"module"}