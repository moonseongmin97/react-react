{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\erp\\\\hr\\\\salary\\\\page\\\\BaseSalaryManage\\\\BaseSalaryContainer.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport HrAppBar from 'erp/hr/util/HrAppBar';\nimport * as types from \"../../saga/BaseSalarySaga\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport MyGrid from 'erp/hr/util/MyGrid';\nimport Icon from \"@material-ui/core/Icon\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport columnDefinition from './columnDefinition';\nimport axios from \"axios\";\nimport { FormControl } from \"@material-ui/core\";\nimport MySelect from 'erp/hr/util/MySelect';\n\nconst BaseDeductionManage = () => {\n  const [gridEvent, setGridEvent] = useState();\n  const dataDispatch = useDispatch();\n  const [rowData, setRowData] = useState([]);\n  const data = useSelector(({\n    hr\n  }) => hr.salary.baseSalaryList);\n  const [selectData, setSelectData] = useState({\n    dept: [{\n      key: '전체부서',\n      value: 'ALL'\n    }]\n  });\n  useEffect(() => {\n    dataDispatch({\n      type: types.BASE_SALARY_LIST_REQUEST\n    });\n  }, [dataDispatch]);\n  const updateDispatch = useDispatch();\n\n  const createNewRowData = () => {\n    let newData = {\n      workPlaceCode: \"BRC-01\",\n      deptName: '부서명 입력',\n      positionCode: '입력하지 마세요',\n      positionName: '직급명 입력',\n      baseSalary: '0000',\n      hobongRatio: '인상율 입력',\n      status: 'insert'\n    };\n    return newData;\n  }; // 시작과 동시에 전체부서\n\n\n  const [selectDeptTitle, setSelectDeptTitle] = useState(selectData.dept[0].value);\n  const selectHandleChange = useCallback(e => {\n    console.log('  !  e  !  ' + e.target.value);\n    console.log('  !  e  !  ' + e.target.name);\n    const selectValue = e.target.value;\n    const selectName = e.target.name;\n\n    if (selectName === '부서') {\n      setSelectDeptTitle(selectValue);\n    }\n  }, []);\n  console.log(selectDeptTitle + \"선택한 값\");\n  useEffect(() => {\n    if (selectDeptTitle === 'ALL') {\n      setRowData(data);\n      return;\n    } else {\n      axios.get(\"http://localhost:8282/hr/salary/BaseSalaryList\", {\n        params: {\n          selectDeptTitle\n        }\n      }).then(response => {\n        setRowData(response.data.gridRowJson);\n        console.log(response.data.gridRowJson + \"어케 들어옴\");\n      }).catch(e => {\n        console.log(e);\n      });\n    }\n  }, [selectDeptTitle, data]);\n  useEffect(() => {\n    axios.get(\"http://localhost:8282/hr/base/deptList\").then(({\n      data\n    }) => {\n      const dataList = data.list.map(e => {\n        return {\n          key: e.deptName,\n          value: e.deptCode\n        };\n      });\n      setSelectData({ ...selectData,\n        dept: [...selectData.dept, ...dataList]\n      });\n    }).catch(e => {\n      alert(e);\n    });\n  }, []);\n\n  const onAddRow = () => {\n    const newItem = createNewRowData();\n    gridEvent.updateRowData({\n      add: [newItem]\n    });\n  };\n\n  const onGridReady = event => {\n    event.api.sizeColumnsToFit();\n    setGridEvent(event.api);\n  };\n\n  const onRemoveSelected = () => {\n    var selectedData = gridEvent.getSelectedRows();\n    selectedData[0].status = 'delete';\n    gridEvent.updateRowData({\n      remove: selectedData\n    });\n    updateDispatch({\n      type: types.UPDATE_BASE_SALARY_REQUEST,\n      payload: selectedData\n    });\n  };\n\n  function onCellEditingStopped(row) {\n    if (row.data.status !== 'insert') {\n      row.data.status = 'update';\n    } else {\n      if (row.data.deptName === '부서명 입력' || row.data.positionName === '직급명 입력' || row.data.hobongRatio === '인상율 입력') {\n        return;\n      }\n    }\n\n    updateDispatch({\n      type: types.UPDATE_BASE_SALARY_REQUEST,\n      payload: [row.data]\n    });\n  }\n\n  ;\n  return React.createElement(React.Fragment, null, React.createElement(HrAppBar, {\n    title: \"\\uAE09\\uC5EC\\uAE30\\uC900\\uAD00\\uB9AC\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }), React.createElement(FormControl, {\n    style: {\n      minWidth: \"250px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(MySelect, {\n    selectName: '부서' // 부서\n    ,\n    selectValue: selectDeptTitle // 초기값 전체부서\n    ,\n    selectonChange: selectHandleChange,\n    menuItemMap: selectData.dept,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onAddRow,\n    startIcon: React.createElement(Icon, {\n      className: \"fa fa-plus-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"\\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: onRemoveSelected,\n    startIcon: React.createElement(DeleteOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"), React.createElement(MyGrid, {\n    paginationAutoPageSize: true,\n    pagination: true,\n    rowData: rowData,\n    onGridReady: onGridReady,\n    onCellEditingStopped: onCellEditingStopped,\n    columnDefinition: columnDefinition,\n    style: {\n      height: \"400%\",\n      width: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }));\n};\n\nexport default React.memo(BaseDeductionManage);","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/erp/hr/salary/page/BaseSalaryManage/BaseSalaryContainer.js"],"names":["React","useState","useEffect","useCallback","HrAppBar","types","useDispatch","useSelector","Button","MyGrid","Icon","DeleteOutlinedIcon","columnDefinition","axios","FormControl","MySelect","BaseDeductionManage","gridEvent","setGridEvent","dataDispatch","rowData","setRowData","data","hr","salary","baseSalaryList","selectData","setSelectData","dept","key","value","type","BASE_SALARY_LIST_REQUEST","updateDispatch","createNewRowData","newData","workPlaceCode","deptName","positionCode","positionName","baseSalary","hobongRatio","status","selectDeptTitle","setSelectDeptTitle","selectHandleChange","e","console","log","target","name","selectValue","selectName","get","params","then","response","gridRowJson","catch","dataList","list","map","deptCode","alert","onAddRow","newItem","updateRowData","add","onGridReady","event","api","sizeColumnsToFit","onRemoveSelected","selectedData","getSelectedRows","remove","UPDATE_BASE_SALARY_REQUEST","payload","onCellEditingStopped","row","minWidth","height","width","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport HrAppBar from 'erp/hr/util/HrAppBar'\nimport * as types from \"../../saga/BaseSalarySaga\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport MyGrid from 'erp/hr/util/MyGrid'\nimport Icon from \"@material-ui/core/Icon\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport columnDefinition from './columnDefinition';\nimport axios from \"axios\";\nimport { FormControl } from \"@material-ui/core\";\nimport MySelect from 'erp/hr/util/MySelect';\n\nconst BaseDeductionManage = () => {\n\n    const [gridEvent, setGridEvent] = useState();\n    const dataDispatch = useDispatch();\n    const [rowData, setRowData] = useState([]);\n    const data = useSelector(({ hr }) => hr.salary.baseSalaryList);\n    const [selectData, setSelectData] = useState(\n        {\n            dept: [\n                { key: '전체부서', value: 'ALL' }\n            ]\n        }\n    );\n\n    useEffect(() => {\n        dataDispatch({ type: types.BASE_SALARY_LIST_REQUEST });\n    }, [dataDispatch]);\n\n\n    const updateDispatch = useDispatch();\n\n    const createNewRowData = () => {\n        let newData = {\n            workPlaceCode: \"BRC-01\",\n            deptName: '부서명 입력',\n            positionCode: '입력하지 마세요',\n            positionName: '직급명 입력',\n            baseSalary: '0000',\n            hobongRatio: '인상율 입력',\n            status: 'insert'\n        };\n        return newData;\n    }\n\n    // 시작과 동시에 전체부서\n    const [selectDeptTitle, setSelectDeptTitle] = useState(selectData.dept[0].value);\n\n    const selectHandleChange = useCallback((e) => {\n        console.log('  !  e  !  ' + e.target.value);\n        console.log('  !  e  !  ' + e.target.name);\n        const selectValue = e.target.value;\n        const selectName = e.target.name;\n        if (selectName === '부서') {\n            setSelectDeptTitle(selectValue);\n        }\n    }, []);\n\n    console.log(selectDeptTitle + \"선택한 값\");\n\n    useEffect(() => {\n        if (selectDeptTitle === 'ALL') {\n            setRowData(data);\n            return;\n        } else {\n\n            axios.get(\n                \"http://localhost:8282/hr/salary/BaseSalaryList\",\n                { params: { selectDeptTitle } }\n            ).then(response => {\n                setRowData(response.data.gridRowJson);\n                console.log(response.data.gridRowJson + \"어케 들어옴\");\n            }).catch(e => { console.log(e); });\n        }\n\n    }, [selectDeptTitle, data]);\n\n    useEffect(() => {\n        axios.get(\n            \"http://localhost:8282/hr/base/deptList\"\n        ).then(({ data }) => {\n            const dataList = data.list.map(e => {\n                return {\n                    key: e.deptName,\n                    value: e.deptCode\n                }\n            })\n            setSelectData({\n                ...selectData, dept: [...selectData.dept, ...dataList]\n            })\n        }).catch(e => {\n            alert(e);\n        });\n    }, []);\n\n    const onAddRow = () => {\n        const newItem = createNewRowData();\n        gridEvent.updateRowData({ add: [newItem] });\n    }\n\n    const onGridReady = event => {\n        event.api.sizeColumnsToFit();\n        setGridEvent(event.api);\n    }\n\n    const onRemoveSelected = () => {\n        var selectedData = gridEvent.getSelectedRows();\n        selectedData[0].status = 'delete';\n        gridEvent.updateRowData({ remove: selectedData });\n        updateDispatch({\n            type: types.UPDATE_BASE_SALARY_REQUEST,\n            payload: selectedData\n        });\n    };\n\n    function onCellEditingStopped(row) {\n        if (row.data.status !== 'insert') {\n            row.data.status = 'update';\n        } else {\n            if (\n                row.data.deptName === '부서명 입력' ||\n                row.data.positionName === '직급명 입력' ||\n                row.data.hobongRatio === '인상율 입력') {\n                return;\n            }\n        }\n        updateDispatch({\n            type: types.UPDATE_BASE_SALARY_REQUEST,\n            payload: [row.data]\n        });\n\n    };\n\n    return (\n        <>\n            <HrAppBar title='급여기준관리' />\n            <FormControl style={{ minWidth: \"250px\" }}>\n                <MySelect\n                    selectName={'부서'}   // 부서\n                    selectValue={selectDeptTitle}  // 초기값 전체부서\n                    selectonChange={selectHandleChange}\n                    menuItemMap={selectData.dept} />\n            </FormControl>\n            <Button variant=\"contained\" color=\"primary\" onClick={onAddRow} startIcon={<Icon className=\"fa fa-plus-circle\" />} >\n                추가\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={onRemoveSelected} startIcon={<DeleteOutlinedIcon />}>\n                삭제\n            </Button>\n            <MyGrid\n                paginationAutoPageSize={true}\n                pagination={true}\n                rowData={rowData}\n                onGridReady={onGridReady}\n                onCellEditingStopped={onCellEditingStopped}\n                columnDefinition={columnDefinition} style={{\n                    height: \"400%\",\n                    width: \"100%\",\n                }} />\n        </>\n    );\n};\nexport default React.memo(BaseDeductionManage);"]},"metadata":{},"sourceType":"module"}