{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\base\\\\page\\\\ClientInfo\\\\NomalClientInfo.js\";\nimport React, { useEffect, useState } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { savaClientInfo, searchClientInfo } from 'erp/logistic/base/action/BasicInfoAction';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux'; //****************************2020-11-25 박미노****************************************** */\n\nfunction NomalClientInfo(props) {\n  const [gridRow, setGridRow] = useState();\n  const dispatch = useDispatch();\n  const column = {\n    columnDefs: [{\n      headerName: '일반거래처 코드',\n      field: 'customerCode',\n      headerCheckboxSelection: true,\n      headerCheckboxSelectionFilteredOnly: true,\n      checkboxSelection: true\n    }, {\n      headerName: '사업장코드',\n      field: 'workplaceCode',\n      editable: true\n    }, {\n      headerName: '거래처명',\n      field: 'customerName',\n      width: 300,\n      editable: true\n    }, {\n      headerName: '사업장코드',\n      field: 'customerType',\n      editable: true\n    }, {\n      headerName: '거래처유형',\n      field: 'customerCeo',\n      editable: true\n    }, {\n      headerName: 'status',\n      field: 'status'\n    }, {\n      headerName: '사업자등록번호',\n      field: 'businessLicenseNumber',\n      width: 300,\n      editable: true,\n      hide: true\n    }, {\n      headerName: '개인거래처 주민등록번호',\n      field: 'socialSecurityNumber',\n      hide: true\n    }, {\n      headerName: '업태',\n      field: 'customerBusinessConditions',\n      editable: true\n    }, {\n      headerName: '종목',\n      field: 'customerBusinessItems',\n      editable: true\n    }, {\n      headerName: '우편번호',\n      field: 'customerZipCode',\n      editable: true,\n      hide: true\n    }, {\n      headerName: '기본주소',\n      field: 'customerBasicAddress',\n      width: 500,\n      editable: true,\n      hide: true\n    }, {\n      headerName: '세부주소',\n      field: 'customerDetailAddress',\n      editable: true,\n      hide: true\n    }, {\n      headerName: '전화번호',\n      field: 'customerTelNumber',\n      width: 300,\n      editable: true,\n      hide: true\n    }, {\n      headerName: '팩스번호',\n      field: 'customerFaxNumber',\n      editable: true,\n      hide: true\n    }, {\n      headerName: '비고',\n      field: 'customerNote',\n      hide: true\n    }, {\n      headerName: '사업자등록번호',\n      field: 'companyCeoName',\n      hide: true\n    }]\n  };\n  /*일괄저장 기능 : 체크버튼 누르고 일괄저장(삭제됨!!!)\n               일반거래처 정보추가 버튼 누르고 리스트 넣고(체크된거 전혀 없는 상태로) 일괄저장 눌러야 저장됩니다. \n               체크는 무조껀 삭제입니다.*/\n\n  useEffect(() => {\n    dispatch(searchClientInfo({\n      searchCondition: 'ALL',\n      workplaceCode: ''\n    }));\n  }, []);\n  const ClientInfoList = useSelector(state => state.logistic.basicinfo.ClientInfoList);\n\n  const api = params => {\n    setGridRow(params.api);\n  }; //새로운 정보 추가\n\n\n  const addClick = () => {\n    gridRow.selectAll(); // 그리드 전체 값\n\n    const newRow = NewRowData(); //새로운 row를 변수에담음\n\n    gridRow.updateRowData({\n      add: [newRow],\n      addIndex: ''\n    }); // ag그리드 api로 그리드에 add 함\n\n    gridRow.deselectAll();\n  };\n\n  const NewRowData = () => {\n    var newRow = {\n      workplaceCode: 'BRC-01',\n      customerCode: '저장시 지정됨',\n      status: 'INSERT'\n    };\n    return newRow;\n  }; //일괄저장\n\n\n  const saveClick = () => {\n    const deleteData = gridRow.getSelectedRows();\n\n    for (var a = 0; a < deleteData.length; a++) {\n      deleteData[a].status = 'DELETE';\n    }\n\n    gridRow.selectAll(); // 그리드 전체 값\n\n    const rows = gridRow.getSelectedRows(); // 그리드의 모든 값을 반환\n\n    const rowsCount = gridRow.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n    //console.log(\"날아가는데이터\"+JSON.stringify(rows));\n\n    if (!window.confirm(' 저장하시겠습니까 ? ')) {\n      alert(' 취소되었습니다.');\n      gridRow.deselectAll();\n      return;\n    } else {\n      for (var i = 0; i < rowsCount; i++) {\n        if (rows[i].customerName === undefined) {\n          alert('거래처명을 정확하게 입력해주세요.');\n          gridRow.deselectAll();\n          return;\n        }\n\n        delete rows[i].errorCode;\n        delete rows[i].errorMsg;\n        delete rows[i].chk;\n      }\n\n      dispatch(savaClientInfo(rows));\n      gridRow.deselectAll();\n    }\n\n    dispatch(searchClientInfo({\n      searchCondition: 'ALL',\n      workplaceCode: ''\n    }));\n  }; //로우 값 변경시\n\n\n  const rowCellChanged = params => {\n    console.log(params.data.status);\n\n    if (params.data.status === 'normal') {\n      params.data.status = 'UPDATE';\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(MyGrid //onCellClicked={onCellClicked}\n  , {\n    column: column,\n    title: '일반 거래처',\n    list: ClientInfoList,\n    onCellEditingStarted: rowCellChanged //편집시작시 이벤트\n    ,\n    rowSelection: \"multiple\",\n    api: api,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: addClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"\\uC77C\\uBC18\\uAC70\\uB798\\uCC98 \\uC815\\uBCF4 \\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: saveClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"\\uC77C\\uAD04\\uC800\\uC7A5\")));\n}\n\nexport default NomalClientInfo;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/logistic/base/page/ClientInfo/NomalClientInfo.js"],"names":["React","useEffect","useState","MyGrid","savaClientInfo","searchClientInfo","axios","Button","useDispatch","useSelector","NomalClientInfo","props","gridRow","setGridRow","dispatch","column","columnDefs","headerName","field","headerCheckboxSelection","headerCheckboxSelectionFilteredOnly","checkboxSelection","editable","width","hide","searchCondition","workplaceCode","ClientInfoList","state","logistic","basicinfo","api","params","addClick","selectAll","newRow","NewRowData","updateRowData","add","addIndex","deselectAll","customerCode","status","saveClick","deleteData","getSelectedRows","a","length","rows","rowsCount","getDisplayedRowCount","window","confirm","alert","i","customerName","undefined","errorCode","errorMsg","chk","rowCellChanged","console","log","data","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport MyGrid from 'util/LogiUtil/MyGrid';\nimport { savaClientInfo, searchClientInfo } from 'erp/logistic/base/action/BasicInfoAction';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\n//****************************2020-11-25 박미노****************************************** */\n\nfunction NomalClientInfo(props) {\n    const [gridRow, setGridRow] = useState();\n    const dispatch = useDispatch();\n    const column = {\n        columnDefs: [\n            {\n                headerName: '일반거래처 코드',\n                field: 'customerCode',\n                headerCheckboxSelection: true,\n                headerCheckboxSelectionFilteredOnly: true,\n                checkboxSelection: true\n            },\n            { headerName: '사업장코드', field: 'workplaceCode', editable: true },\n            { headerName: '거래처명', field: 'customerName', width: 300, editable: true },\n            { headerName: '사업장코드', field: 'customerType', editable: true },\n            { headerName: '거래처유형', field: 'customerCeo', editable: true },\n            { headerName: 'status', field: 'status' },\n            {\n                headerName: '사업자등록번호',\n                field: 'businessLicenseNumber',\n                width: 300,\n                editable: true,\n                hide: true\n            },\n            { headerName: '개인거래처 주민등록번호', field: 'socialSecurityNumber', hide: true },\n            { headerName: '업태', field: 'customerBusinessConditions', editable: true },\n            { headerName: '종목', field: 'customerBusinessItems', editable: true },\n            { headerName: '우편번호', field: 'customerZipCode', editable: true, hide: true },\n            {\n                headerName: '기본주소',\n                field: 'customerBasicAddress',\n                width: 500,\n                editable: true,\n                hide: true\n            },\n            { headerName: '세부주소', field: 'customerDetailAddress', editable: true, hide: true },\n            {\n                headerName: '전화번호',\n                field: 'customerTelNumber',\n                width: 300,\n                editable: true,\n                hide: true\n            },\n            { headerName: '팩스번호', field: 'customerFaxNumber', editable: true, hide: true },\n            { headerName: '비고', field: 'customerNote', hide: true },\n            { headerName: '사업자등록번호', field: 'companyCeoName', hide: true }\n        ]\n    };\n\n        /*일괄저장 기능 : 체크버튼 누르고 일괄저장(삭제됨!!!)\n                     일반거래처 정보추가 버튼 누르고 리스트 넣고(체크된거 전혀 없는 상태로) 일괄저장 눌러야 저장됩니다. \n                     체크는 무조껀 삭제입니다.*/   \n    useEffect(() => {\n        dispatch(searchClientInfo({ searchCondition: 'ALL', workplaceCode: '' }));\n    }, []);\n\n    const ClientInfoList  = useSelector(state => state.logistic.basicinfo.ClientInfoList);\n\n    const api = params => {\n        setGridRow(params.api);\n    };\n\n    //새로운 정보 추가\n    const addClick = () => {\n        gridRow.selectAll(); // 그리드 전체 값\n        const newRow = NewRowData(); //새로운 row를 변수에담음\n        gridRow.updateRowData({ add: [newRow], addIndex: '' }); // ag그리드 api로 그리드에 add 함\n        gridRow.deselectAll();\n    };\n\n    const NewRowData = () => {\n        var newRow = {\n            workplaceCode: 'BRC-01',\n            customerCode: '저장시 지정됨',\n            status: 'INSERT'\n        };\n        return newRow;\n    };\n\n    //일괄저장\n    const saveClick = () => {\n        const deleteData = gridRow.getSelectedRows();\n\n        for (var a = 0; a < deleteData.length; a++) {\n            deleteData[a].status = 'DELETE';\n        }\n\n        gridRow.selectAll(); // 그리드 전체 값\n        const rows = gridRow.getSelectedRows(); // 그리드의 모든 값을 반환\n        const rowsCount = gridRow.getDisplayedRowCount(); // 표시된 총 행 수를 반환\n\n        //console.log(\"날아가는데이터\"+JSON.stringify(rows));\n\n        if (!window.confirm(' 저장하시겠습니까 ? ')) {\n            alert(' 취소되었습니다.');\n            gridRow.deselectAll();\n            return;\n        } else {\n            for (var i = 0; i < rowsCount; i++) {\n                if (rows[i].customerName === undefined) {\n                    alert('거래처명을 정확하게 입력해주세요.');\n                    gridRow.deselectAll();\n                    return;\n                }\n                delete rows[i].errorCode;\n                delete rows[i].errorMsg;\n                delete rows[i].chk;\n            }\n            dispatch(savaClientInfo(rows));\n            gridRow.deselectAll();\n        }\n        dispatch(searchClientInfo({ searchCondition: 'ALL', workplaceCode: '' }));\n    };\n\n    //로우 값 변경시\n    const rowCellChanged = params => {\n        console.log(params.data.status);\n        if (params.data.status === 'normal') {\n            params.data.status = 'UPDATE';\n        }\n    };\n\n    return (\n        <>\n            <div></div>\n            <MyGrid\n                //onCellClicked={onCellClicked}\n                column={column}\n                title={'일반 거래처'}\n                list={ClientInfoList}\n                onCellEditingStarted={rowCellChanged} //편집시작시 이벤트\n                rowSelection=\"multiple\"\n                api={api}\n            >\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={addClick}\n                >\n                    일반거래처 정보 추가\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={saveClick}\n                >\n                    일괄저장\n                </Button>\n            </MyGrid>\n        </>\n    );\n}\n\nexport default NomalClientInfo;\n"]},"metadata":{},"sourceType":"module"}