{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\erp\\\\logistic\\\\base\\\\page\\\\WareHouseInfo\\\\WareHouseInfo.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core'; // import * as types from \"erp/logistic/ActionType/ActionType\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { searchWarehouseList, saveWarehouseList } from 'erp/logistic/base/action/LogisticsInfoAction';\nimport WarehouseDialog from './WareHouseDialog';\nimport WarehouseDialogInfo from './WareHouseDialogInfo';\nimport MyGrid from 'util/LogiUtil/MyGrid';\n\nfunction WareHouseInfo(props) {\n  const [addOpenDialog, setAddOpenDialog] = useState(false);\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const dispatch = useDispatch();\n  const warehouseList = useSelector(state => state.logistic.logisticsinfo.warehouseList);\n  const list = warehouseList.filter(ele => {\n    if (ele.status !== 'DELETE') {\n      return ele;\n    }\n  }); //깃테스트중!\n\n  const columns = {\n    columnDefs: [// { width: \"40\", headerCheckboxSelection: true, checkboxSelection: true },\n    {\n      headerCheckboxSelection: true,\n      checkboxSelection: true,\n      width: 50\n    }, {\n      headerName: '창고 코드',\n      field: 'warehouseCode'\n    }, {\n      headerName: '창고 명',\n      field: 'warehouseName',\n      editable: true\n    }, {\n      headerName: '창고 사용여부',\n      field: 'warehouseUseOrNot',\n      editable: true,\n      cellEditor: 'agSelectCellEditor',\n      cellEditorParams: {\n        values: ['Y', 'N']\n      }\n    }, {\n      headerName: '설명',\n      field: 'description',\n      editable: true\n    }]\n  };\n\n  const onClick = () => {\n    //console.log(\"추가버튼\");\n    setAddOpenDialog(true);\n  };\n\n  const close = () => {\n    setAddOpenDialog(false);\n  };\n  /*-----------------*/\n\n  /*-----addItem-----*/\n\n  /*-----------------*/\n\n\n  const onSubmit = warehouseTo => {\n    //console.log(\"서브밋\", warehouseTo);\n    console.log(warehouseTo);\n    gridApi.updateRowData({\n      add: [warehouseTo]\n    });\n    setAddOpenDialog(false);\n    gridApi.forEachNode(node => console.log(node.data));\n  };\n  /*--------------------*/\n\n  /*-----batchItems-----*/\n\n  /*--------------------*/\n\n\n  const onSave = () => {\n    var batchList = [];\n    gridApi.forEachNode(node => batchList.push(node.data));\n    dispatch(saveWarehouseList(batchList));\n  };\n\n  const onGridReady = params => {\n    //console.log(\"AgCheckbox@@\", params.api.getAgCheckbox());\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n  };\n  /*---------------------*/\n\n  /*-----deleteItems-----*/\n\n  /*---------------------*/\n\n\n  const onDelete = params => {\n    const rows = gridApi.getSelectedRows();\n    console.log(rows);\n    gridApi.updateRowData({\n      remove: rows\n    });\n  };\n\n  const valueChanged = e => {\n    console.log(e);\n    e.data.status = 'UPDATE';\n  };\n\n  useEffect(() => {\n    dispatch(searchWarehouseList());\n  }, []);\n  return React.createElement(React.Fragment, null, React.createElement(MyGrid, {\n    title: '창고 관리',\n    column: columns,\n    list: list,\n    onCellValueChanged: valueChanged,\n    api: onGridReady,\n    rowSelection: \"multiple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"\\uCC3D\\uACE0 \\uCD94\\uAC00\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    style: {\n      marginRight: '1vh'\n    },\n    onClick: onDelete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, ' ', \"\\uC0AD\\uC81C\", ' '), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: onSave,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"\\uC77C\\uAD04 \\uC800\\uC7A5\")), React.createElement(WarehouseDialog, {\n    open: addOpenDialog,\n    close: close,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(WarehouseDialogInfo, {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))));\n}\n\nexport default WareHouseInfo;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/erp/logistic/base/page/WareHouseInfo/WareHouseInfo.js"],"names":["React","useEffect","useState","Button","useDispatch","useSelector","searchWarehouseList","saveWarehouseList","WarehouseDialog","WarehouseDialogInfo","MyGrid","WareHouseInfo","props","addOpenDialog","setAddOpenDialog","gridApi","setGridApi","gridColumnApi","setGridColumnApi","dispatch","warehouseList","state","logistic","logisticsinfo","list","filter","ele","status","columns","columnDefs","headerCheckboxSelection","checkboxSelection","width","headerName","field","editable","cellEditor","cellEditorParams","values","onClick","close","onSubmit","warehouseTo","console","log","updateRowData","add","forEachNode","node","data","onSave","batchList","push","onGridReady","params","api","columnApi","onDelete","rows","getSelectedRows","remove","valueChanged","e","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button } from '@material-ui/core';\n// import * as types from \"erp/logistic/ActionType/ActionType\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    searchWarehouseList,\n    saveWarehouseList,\n} from 'erp/logistic/base/action/LogisticsInfoAction';\nimport WarehouseDialog from './WareHouseDialog';\nimport WarehouseDialogInfo from './WareHouseDialogInfo';\nimport MyGrid from 'util/LogiUtil/MyGrid';\n\nfunction WareHouseInfo(props) {\n    const [addOpenDialog, setAddOpenDialog] = useState(false);\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const dispatch = useDispatch();\n    const warehouseList = useSelector(state => state.logistic.logisticsinfo.warehouseList);\n    const list = warehouseList.filter(ele => {\n        if (ele.status !== 'DELETE') {\n            return ele;\n        }\n    });\n\n    //깃테스트중!\n    const columns = {\n        columnDefs: [\n            // { width: \"40\", headerCheckboxSelection: true, checkboxSelection: true },\n            {\n                headerCheckboxSelection: true,\n                checkboxSelection: true,\n                width: 50\n            },\n            {\n                headerName: '창고 코드',\n                field: 'warehouseCode'\n            },\n            {\n                headerName: '창고 명',\n                field: 'warehouseName',\n                editable: true\n            },\n            {\n                headerName: '창고 사용여부',\n                field: 'warehouseUseOrNot',\n                editable: true,\n                cellEditor: 'agSelectCellEditor',\n                cellEditorParams: { values: ['Y', 'N'] }\n            },\n            { headerName: '설명', field: 'description', editable: true }\n        ]\n    };\n\n    const onClick = () => {\n        //console.log(\"추가버튼\");\n        setAddOpenDialog(true);\n    };\n\n    const close = () => {\n        setAddOpenDialog(false);\n    };\n\n    /*-----------------*/\n    /*-----addItem-----*/\n    /*-----------------*/\n    const onSubmit = warehouseTo => {\n        //console.log(\"서브밋\", warehouseTo);\n        console.log(warehouseTo);\n        gridApi.updateRowData({add: [warehouseTo]});\n        setAddOpenDialog(false);\n\n        gridApi.forEachNode(node =>\n            console.log(node.data)\n        );\n    };\n\n/*--------------------*/\n/*-----batchItems-----*/\n/*--------------------*/\n    const onSave = () => {\n        var batchList = [];\n        gridApi.forEachNode(node => batchList.push(node.data));\n        dispatch(saveWarehouseList(batchList));\n    };\n\n    const onGridReady = params => {\n        //console.log(\"AgCheckbox@@\", params.api.getAgCheckbox());\n        setGridApi(params.api);\n        setGridColumnApi(params.columnApi);\n    };\n\n/*---------------------*/\n/*-----deleteItems-----*/\n/*---------------------*/\n    const onDelete = params => {\n        const rows = gridApi.getSelectedRows();\n        console.log(rows);\n        gridApi.updateRowData({remove:rows});\n    };\n    const valueChanged = e => {\n        console.log(e);\n        e.data.status = 'UPDATE';\n    };\n    useEffect(() => {\n        dispatch(searchWarehouseList());\n    }, []);\n\n    return (\n        <>\n            <MyGrid\n                title={'창고 관리'}\n                column={columns}\n                list={list}\n                onCellValueChanged={valueChanged}\n                api={onGridReady}\n                rowSelection=\"multiple\"\n            >\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={onClick}\n                >\n                    창고 추가\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{ marginRight: '1vh' }}\n                    onClick={onDelete}\n                >\n                    {' '}\n                    삭제{' '}\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" onClick={onSave}>\n                    일괄 저장\n                </Button>\n            </MyGrid>\n            <WarehouseDialog open={addOpenDialog} close={close}>\n                <div>\n                    <WarehouseDialogInfo onSubmit={onSubmit} />\n                </div>\n            </WarehouseDialog>\n        </>\n    );\n}\n\nexport default WareHouseInfo;\n"]},"metadata":{},"sourceType":"module"}