{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68react\\\\src\\\\erp\\\\hr\\\\attendance\\\\page\\\\Node\\\\nodeTest\\\\node.js\";\nimport React, { useState, useCallback } from 'react';\nimport MyGrid from '../MyGrid';\nimport HrAppBar from 'erp/hr/util/HrAppBar';\nimport axios from \"axios\";\n\nconst Node = () => {\n  const [memberList, setMemberList] = useState([]);\n  const [memberId, setMemberId] = useState(\"\");\n  const [gridEvent, setGridEvent] = useState();\n\n  const addOnClick = () => {\n    gridEvent.updateRowData({\n      add: [{\n        id: '',\n        pw: '',\n        addr: '',\n        tel: ''\n      }]\n    });\n  };\n\n  const onGridReady = event => {\n    event.api.sizeColumnsToFit();\n    setGridEvent(event.api);\n  }; //삭제\n\n\n  const onRemove = () => {\n    var selectedData = gridEvent.getSelectedRows();\n    axios.delete(`http://localhost:4000/module/function1/${selectedData[0].id}`).then(response => {\n      alert(response.data.errorMsg);\n      gridEvent.updateRowData({\n        remove: selectedData\n      });\n    }).catch(e => {\n      alert(e);\n    });\n  };\n\n  const columnDefinition = [{\n    headerName: \"ID\",\n    field: \"id\",\n    editable: true\n  }, {\n    headerName: \"PW\",\n    field: \"pw\",\n    editable: true\n  }, {\n    headerName: \"ADDR\",\n    field: \"addr\",\n    editable: true\n  }, {\n    headerName: \"TEL\",\n    field: \"tel\",\n    editable: true\n  }]; //전체조회\n\n  const searchmemberList = useCallback(() => {\n    axios.get(\"http://localhost:4000/module/function1\").then(response => {\n      console.log(response.data);\n      setMemberList(response.data.empInfo);\n    }).catch(e => {\n      alert(e);\n    });\n  }, []); //한명조회\n\n  const searchMember = useCallback(() => {\n    axios.get(`http://localhost:4000/module/function1/${memberId}`).then(response => {\n      console.log(response.data);\n      setMemberList(response.data.empInfo);\n    }).catch(e => {\n      alert(e);\n    });\n  }, [memberId]); //한명 저장\n\n  const insertMember = () => {\n    let selectedData = gridEvent.getSelectedRows();\n    axios.post(`http://localhost:4000/module/function1`, selectedData[0]).then(response => {\n      alert(response.data.errorMsg);\n    }).catch(e => {\n      alert(e);\n    });\n  }; //프로시저로 한명 저장\n\n\n  const insertProcedureMember = () => {\n    let selectedData = gridEvent.getSelectedRows();\n    axios.post(`http://localhost:4000/module/function1/${selectedData[0].id}`, selectedData[0]).then(response => {\n      setMemberList(response.data.empInfo);\n    }).catch(e => {\n      alert(e);\n    });\n  }; //업데이트\n\n\n  const updateMember = () => {\n    let selectedData = gridEvent.getSelectedRows();\n    axios.put(`http://localhost:4000/module/function1/${selectedData[0].id}`, {\n      memberJson: JSON.stringify(selectedData[0])\n    }).then(response => {\n      alert(response.data.errorMsg);\n    }).catch(e => {\n      alert(e);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(HrAppBar, {\n    title: \"\\uB178\\uB4DC \\uC11C\\uBC84 \\uD14C\\uC2A4\\uD2B8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: searchmemberList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \" \\uC804\\uCCB4 \\uC870\\uD68C\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    value: memberId,\n    onChange: e => {\n      setMemberId(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: searchMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \" \\uD55C\\uBA85 \\uC870\\uD68C\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addOnClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"\\uCD94\\uAC00\"), React.createElement(\"button\", {\n    onClick: onRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"\\uC0AD\\uC81C\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: insertMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"\\uD55C\\uBA85 \\uC800\\uC7A5\"), React.createElement(\"button\", {\n    onClick: insertProcedureMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"\\uD504\\uB85C\\uC2DC\\uC800\\uB85C \\uD55C\\uBA85 \\uC800\\uC7A5\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: updateMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \" \\uC5C5\\uB370\\uC774\\uD2B8 \"), React.createElement(MyGrid, {\n    rowData: memberList,\n    onGridReady: onGridReady,\n    columnDefinition: columnDefinition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }));\n};\n\nexport default Node;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68react/src/erp/hr/attendance/page/Node/nodeTest/node.js"],"names":["React","useState","useCallback","MyGrid","HrAppBar","axios","Node","memberList","setMemberList","memberId","setMemberId","gridEvent","setGridEvent","addOnClick","updateRowData","add","id","pw","addr","tel","onGridReady","event","api","sizeColumnsToFit","onRemove","selectedData","getSelectedRows","delete","then","response","alert","data","errorMsg","remove","catch","e","columnDefinition","headerName","field","editable","searchmemberList","get","console","log","empInfo","searchMember","insertMember","post","insertProcedureMember","updateMember","put","memberJson","JSON","stringify","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport MyGrid from '../MyGrid'\nimport HrAppBar from 'erp/hr/util/HrAppBar'\nimport axios from \"axios\";\nconst Node = () => {\n\n    const [memberList, setMemberList] = useState([]);\n    const [memberId, setMemberId] = useState(\"\");\n    const [gridEvent, setGridEvent] = useState();\n\n\n    const addOnClick = () => {\n        gridEvent.updateRowData({ add: [{ id: '', pw: '', addr: '', tel: '' }] });\n    }\n\n    const onGridReady = event => {\n        event.api.sizeColumnsToFit();\n        setGridEvent(event.api);\n    }\n    //삭제\n    const onRemove = () => {\n        var selectedData = gridEvent.getSelectedRows();\n        axios.delete(\n            `http://localhost:4000/module/function1/${selectedData[0].id}`\n        ).then(response => {\n            alert(response.data.errorMsg);\n            gridEvent.updateRowData({ remove: selectedData });\n        }).catch(e => {\n            alert(e);\n        });\n\n    };\n\n    const columnDefinition = [\n        { headerName: \"ID\", field: \"id\", editable: true },\n        { headerName: \"PW\", field: \"pw\", editable: true },\n        { headerName: \"ADDR\", field: \"addr\", editable: true },\n        { headerName: \"TEL\", field: \"tel\", editable: true }\n    ];\n\n    \n    //전체조회\n    const searchmemberList = useCallback(() => {\n        axios.get(\n            \"http://localhost:4000/module/function1\"\n        ).then(response => {\n            console.log(response.data)\n            setMemberList(response.data.empInfo);\n        }).catch(e => {\n            alert(e);\n        });\n    }, []);\n\n\n    //한명조회\n    const searchMember = useCallback(() => {\n        axios.get(\n            `http://localhost:4000/module/function1/${memberId}`,\n        ).then(response => {\n            console.log(response.data)\n            setMemberList(response.data.empInfo);\n        }).catch(e => {\n            alert(e);\n        });\n    }, [memberId]);\n\n    //한명 저장\n    const insertMember = () => {\n        let selectedData = gridEvent.getSelectedRows();\n        axios.post(\n            `http://localhost:4000/module/function1`,\n            selectedData[0]\n        ).then(response => {\n            alert(response.data.errorMsg)\n        }).catch(e => {\n            alert(e);\n        });\n    }\n    //프로시저로 한명 저장\n    const insertProcedureMember = () => {\n        let selectedData = gridEvent.getSelectedRows();\n        axios.post(\n            `http://localhost:4000/module/function1/${selectedData[0].id}`,\n            selectedData[0]\n        ).then(response => {\n            setMemberList(response.data.empInfo);\n        }).catch(e => {\n            alert(e);\n        });\n    }\n    //업데이트\n    const updateMember = () => {\n        let selectedData = gridEvent.getSelectedRows();\n        axios.put(\n            `http://localhost:4000/module/function1/${selectedData[0].id}`,\n            { memberJson: JSON.stringify(selectedData[0]) }\n        ).then(response => {\n            alert(response.data.errorMsg)\n        }).catch(e => {\n            alert(e);\n        });\n    }\n\n    return (\n        <div>\n            <HrAppBar title=\"노드 서버 테스트\" />\n            <button onClick={searchmemberList}> 전체 조회</button>\n            <hr />\n            <input value={memberId} onChange={(e) => { setMemberId(e.target.value) }} />\n            <button onClick={searchMember}> 한명 조회</button>\n            <hr />\n            <button onClick={addOnClick}>추가</button>\n            <button onClick={onRemove}>삭제</button>\n            <hr />\n            <button onClick={insertMember} >한명 저장</button>\n            <button onClick={insertProcedureMember} >프로시저로 한명 저장</button>\n            <hr />\n            <button onClick={updateMember}> 업데이트 </button>\n            <MyGrid rowData={memberList} onGridReady={onGridReady} columnDefinition={columnDefinition} />\n            \n        </div>\n    )\n}\n\nexport default Node;"]},"metadata":{},"sourceType":"module"}