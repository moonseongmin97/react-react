{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68react\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\ApprovalManager\\\\JournalGrid.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as types from \"../../reducer/AccountReducer\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { makeStyles, Typography, AppBar, Toolbar } from \"@material-ui/core\";\nimport JournalDetailDialog from \"./JournalDetailDialog\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst JournalGrid = ({\n  slipNo,\n  flag\n}) => {\n  // slipNo : SlipGrid 컴포넌트에서 넘어온 slipNo로 journal 조회함.\n  // flag : 3개 버튼 활성화.\n  const data = useSelector(({\n    AccReducer\n  }) => AccReducer.AccountReducer.approvalJournalList, []);\n  const dispatch = useDispatch(); //========================== 그리드 객체 준비 ==========================\n\n  const [gridApi, setGridApi] = useState();\n  const [journalDetailDialogOpen, setJournalDetailDialogOpen] = useState(false);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n    params.api.sizeColumnsToFit();\n  };\n\n  useEffect(() => {\n    if (!flag) return;\n    initalBtn();\n  }, [flag]); //========================== 그리드초기화 ==========================\n\n  const initalBtn = () => {\n    gridApi.selectAll(); // 그리드를 모두 선택해라.\n\n    const allData = gridApi.getSelectedRows(); // 선택한 그리드 데이타 들고온나.\n\n    gridApi.updateRowData({\n      remove: allData\n    }); // 데이터 전부 지아라.\n  }; //========================== 분개조회 ==========================\n\n\n  useEffect(() => {\n    if (slipNo === \"\" || slipNo === \"NEW\") return;\n    dispatch({\n      type: types.SEARCH_AM_JOURNAL_REQUEST,\n      params: {\n        slipNo: slipNo\n      }\n    });\n  }, [slipNo]); // SlipGrid 컴포넌트에서 보낸 slipNo 가 바뀔 때마다, slipNo 를 파라미터로 분개 List를 가져와라. setData 해라.\n  //========================== 그리드내용 ==========================\n\n  const accountColumnDefs = [{\n    headerName: \"\",\n    field: \"check\",\n    width: 50,\n    checkboxSelection: true\n  }, {\n    headerName: \"분개일련번호\",\n    field: \"journalNo\",\n    width: 230\n  }, {\n    headerName: \"계정코드\",\n    field: \"accountCode\",\n    width: 100\n  }, {\n    headerName: \"계정명\",\n    field: \"accountName\",\n    width: 130\n  }, {\n    headerName: \"대차구분\",\n    field: \"balanceDivision\",\n    width: 100\n  }, {\n    headerName: \"적요\",\n    field: \"summaryComment\",\n    width: 230\n  }, {\n    headerName: \"거래처코드\",\n    field: \"customerCode\",\n    width: 110\n  }, {\n    headerName: \"거래처명\",\n    field: \"customerName\",\n    width: 110\n  }, {\n    headerName: \"금액\",\n    field: \"price\",\n    width: 110,\n    valueFormatter: currencyFormatter\n  }, // valueFormatter : 그리드의 표시형식.\n  {\n    headerName: \"전표번호\",\n    field: \"slipNo\",\n    width: 110,\n    hide: true\n  }, {\n    headerName: \"차변\",\n    field: \"leftDebtorPrice\",\n    width: 110,\n    hide: true\n  }, {\n    headerName: \"대변\",\n    field: \"rightCreditsPrice\",\n    width: 110,\n    hide: true\n  }, {\n    headerName: \"적요번호\",\n    field: \"summaryNumber\",\n    width: 110,\n    hide: true\n  }]; //========================== 통화표시 포매터 ==========================\n\n  function currencyFormatter(params) {\n    return \"￦\" + formatNumber(params.value);\n  }\n\n  function formatNumber(number) {\n    return Math.floor(number).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n  } // 몰라. 통화표시 형식임.\n\n\n  const onCellClicked = id => {\n    // cell을 클릭했을 때마다 일어나는 event.\n    setJournalDetailDialogOpen(true);\n    dispatch({\n      type: types.SET_JOURNAL_NO_REQUEST,\n      journalNo: id.data.journalNo\n    });\n  };\n\n  const handleClose = value => {\n    // Dialog가 닫힐 때마다 handleClose 이 메서드가 실행됨. value라는 객체를 가지고 있음.\n    setJournalDetailDialogOpen(false);\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(React.Fragment, null, React.createElement(AppBar, {\n    color: \"primary\",\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"\\uBD84\\uAC1C\"))), React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    style: {\n      height: \"200px\",\n      width: \"100%\" //paddingTop: \"20px\",\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: accountColumnDefs,\n    rowData: data // 그리드에 data 뿌림.\n    ,\n    rowSelection: \"multiple\" // 여러 줄 선택가능.\n    ,\n    onGridReady: onGridReady // 그리드가 초기화 되면.\n    ,\n    onCellClicked: onCellClicked // cell 한개 클릭했을 때 발생 event\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(JournalDetailDialog, {\n    open: journalDetailDialogOpen,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  })));\n};\n\nexport default JournalGrid;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68react/src/erp/account/account/page/ApprovalManager/JournalGrid.js"],"names":["React","useState","useEffect","useDispatch","useSelector","types","AgGridReact","makeStyles","Typography","AppBar","Toolbar","JournalDetailDialog","useThemeSwitcher","JournalGrid","slipNo","flag","data","AccReducer","AccountReducer","approvalJournalList","dispatch","gridApi","setGridApi","journalDetailDialogOpen","setJournalDetailDialogOpen","onGridReady","params","api","sizeColumnsToFit","initalBtn","selectAll","allData","getSelectedRows","updateRowData","remove","type","SEARCH_AM_JOURNAL_REQUEST","accountColumnDefs","headerName","field","width","checkboxSelection","valueFormatter","currencyFormatter","hide","formatNumber","value","number","Math","floor","toString","replace","onCellClicked","id","SET_JOURNAL_NO_REQUEST","journalNo","handleClose","dark","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as types from \"../../reducer/AccountReducer\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { makeStyles, Typography, AppBar, Toolbar } from \"@material-ui/core\";\nimport JournalDetailDialog from \"./JournalDetailDialog\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst JournalGrid = ({ slipNo, flag }) => {\n  // slipNo : SlipGrid 컴포넌트에서 넘어온 slipNo로 journal 조회함.\n  // flag : 3개 버튼 활성화.\n\n  const data = useSelector(\n    ({ AccReducer }) => AccReducer.AccountReducer.approvalJournalList,\n    [],\n  );\n\n  const dispatch = useDispatch();\n\n  //========================== 그리드 객체 준비 ==========================\n  const [gridApi, setGridApi] = useState();\n  const [journalDetailDialogOpen, setJournalDetailDialogOpen] = useState(false);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n    params.api.sizeColumnsToFit();\n  };\n\n  useEffect(() => {\n    if (!flag) return;\n    initalBtn();\n  }, [flag]);\n  //========================== 그리드초기화 ==========================\n\n  const initalBtn = () => {\n    gridApi.selectAll(); // 그리드를 모두 선택해라.\n    const allData = gridApi.getSelectedRows(); // 선택한 그리드 데이타 들고온나.\n    gridApi.updateRowData({ remove: allData }); // 데이터 전부 지아라.\n  };\n\n  //========================== 분개조회 ==========================\n  useEffect(() => {\n    if (slipNo === \"\" || slipNo === \"NEW\") return;\n    dispatch({\n      type: types.SEARCH_AM_JOURNAL_REQUEST,\n      params: { slipNo: slipNo },\n    });\n  }, [slipNo]); // SlipGrid 컴포넌트에서 보낸 slipNo 가 바뀔 때마다, slipNo 를 파라미터로 분개 List를 가져와라. setData 해라.\n\n  //========================== 그리드내용 ==========================\n  const accountColumnDefs = [\n    { headerName: \"\", field: \"check\", width: 50, checkboxSelection: true },\n    { headerName: \"분개일련번호\", field: \"journalNo\", width: 230 },\n    { headerName: \"계정코드\", field: \"accountCode\", width: 100 },\n    { headerName: \"계정명\", field: \"accountName\", width: 130 },\n    { headerName: \"대차구분\", field: \"balanceDivision\", width: 100 },\n    { headerName: \"적요\", field: \"summaryComment\", width: 230 },\n    { headerName: \"거래처코드\", field: \"customerCode\", width: 110 },\n    { headerName: \"거래처명\", field: \"customerName\", width: 110 },\n    {\n      headerName: \"금액\",\n      field: \"price\",\n      width: 110,\n      valueFormatter: currencyFormatter,\n    },\n    // valueFormatter : 그리드의 표시형식.\n    { headerName: \"전표번호\", field: \"slipNo\", width: 110, hide: true },\n    { headerName: \"차변\", field: \"leftDebtorPrice\", width: 110, hide: true },\n    { headerName: \"대변\", field: \"rightCreditsPrice\", width: 110, hide: true },\n    { headerName: \"적요번호\", field: \"summaryNumber\", width: 110, hide: true },\n  ];\n\n  //========================== 통화표시 포매터 ==========================\n  function currencyFormatter(params) {\n    return \"￦\" + formatNumber(params.value);\n  }\n  function formatNumber(number) {\n    return Math.floor(number)\n      .toString()\n      .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n  } // 몰라. 통화표시 형식임.\n\n  const onCellClicked = id => {\n    // cell을 클릭했을 때마다 일어나는 event.\n    setJournalDetailDialogOpen(true);\n    dispatch({\n      type: types.SET_JOURNAL_NO_REQUEST,\n      journalNo: id.data.journalNo,\n    });\n  };\n\n  const handleClose = value => {\n    // Dialog가 닫힐 때마다 handleClose 이 메서드가 실행됨. value라는 객체를 가지고 있음.\n    setJournalDetailDialogOpen(false);\n  };\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <>\n      <AppBar color=\"primary\" position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\">분개</Typography>\n        </Toolbar>\n      </AppBar>\n      <div\n        className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n        style={{\n          height: \"200px\",\n          width: \"100%\",\n          //paddingTop: \"20px\",\n        }}\n      >\n        <AgGridReact\n          columnDefs={accountColumnDefs}\n          rowData={data} // 그리드에 data 뿌림.\n          rowSelection=\"multiple\" // 여러 줄 선택가능.\n          onGridReady={onGridReady} // 그리드가 초기화 되면.\n          onCellClicked={onCellClicked} // cell 한개 클릭했을 때 발생 event\n        />\n        <JournalDetailDialog\n          open={journalDetailDialogOpen}\n          onClose={handleClose}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default JournalGrid;\n"]},"metadata":{},"sourceType":"module"}