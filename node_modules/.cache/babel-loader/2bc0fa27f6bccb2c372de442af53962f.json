{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\68REACT\\\\68REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\Slip\\\\SalaryAndDelivery\\\\MonthSalary.js\";\nimport React, { useState, useEffect } from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SEARCH_MONTH_SALARY_LIST_REQUEST } from \"erp/hr/salary/saga/SearchMonthSalSaga\";\nimport { thisYear } from \"erp/account/util/lib\";\nimport Select from \"react-select\";\nimport { List, DialogActions, Button, FormControl, MenuItem } from \"@material-ui/core\";\n\nconst MonthSalary = props => {\n  const [date, setDate] = useState(\"\");\n  const [positionGridApi, setPositionGridApi] = React.useState();\n  const data = useSelector(({\n    HrReducer\n  }) => HrReducer.monthSalary, []);\n  const dispatch = useDispatch();\n  const [journalLists, setJournalLists] = useState([//분개는 단 두가지만 표현한다 현금/ 공제금액 그리고 이부분들은 set을 사용하면 작동안된다.\n  {\n    journalNo: \"NEW JOURNAL\",\n    // 여기서 분개 번호가 만들어짐.\n    slipNo: \"NEW\",\n    balanceDivision: \"차변\",\n    accountCode: \"0603\",\n    //급여는 노무비로 넣었다.\n    accountName: \"급여\",\n    customerCode: null,\n    leftDebtorPrice: \"\",\n    // 차변\n    rightCreditsPrice: 0 // 대변\n\n  }, {\n    journalNo: \"NEW JOURNAL\",\n    slipNo: \"NEW\",\n    balanceDivision: \"대변\",\n    accountCode: \"0101\",\n    //급여에 대한 현금\n    accountName: \"현금\",\n    customerCode: null,\n    leftDebtorPrice: 0,\n    // 차변\n    rightCreditsPrice: \"\" // 대변\n\n  }, {\n    journalNo: \"NEW JOURNAL\",\n    slipNo: \"NEW\",\n    balanceDivision: \"차변\",\n    accountCode: \"0621\",\n    //공제금을 세부적으로 구분하지 않고 보험료로 전표발행\n    accountName: \"보험료\",\n    customerCode: null,\n    leftDebtorPrice: \"\",\n    // 차변\n    rightCreditsPrice: 0 // 대변\n\n  }, {\n    journalNo: \"NEW JOURNAL\",\n    slipNo: \"NEW\",\n    balanceDivision: \"대변\",\n    accountCode: \"0101\",\n    //공제금에 대한 현금\n    accountName: \"현금\",\n    customerCode: null,\n    leftDebtorPrice: 0,\n    // 차변\n    rightCreditsPrice: \"\" // 대변\n\n  }]);\n  console.log(\"data\", data);\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n  };\n\n  const DatehandleChange = newValue => {\n    setDate(newValue.value);\n  }; //========================== 그리드내용 ==========================\n\n\n  const accountColumnDefs = [{\n    width: \"100\",\n    headerCheckboxSelection: true,\n    checkboxSelection: true\n  }, {\n    headerName: \"사원코드\",\n    field: \"empCode\"\n  }, {\n    headerName: \"적용연월\",\n    field: \"applyYearMonth\",\n    hide: true\n  }, {\n    headerName: \"총 급여\",\n    field: \"salary\",\n    valueFormatter: currencyFormatter\n  }, {\n    headerName: \"연차미사용수당\",\n    field: \"unusedDaySalary\",\n    valueFormatter: currencyFormatter\n  }, {\n    headerName: \"경비지급액\",\n    field: \"cost\",\n    valueFormatter: currencyFormatter\n  }, {\n    headerName: \"초과수당 합계\",\n    field: \"totalExtSal\",\n    valueFormatter: currencyFormatter\n  }, {\n    headerName: \"공제금액 합계\",\n    field: \"totalDeduction\",\n    valueFormatter: currencyFormatter\n  }, {\n    headerName: \"차인지급액\",\n    field: \"realSalary\",\n    valueFormatter: currencyFormatter\n  }, {\n    headerName: \"실지급액\",\n    field: \"totalPayment\",\n    hide: true\n  }, {\n    headerName: \"마감여부\",\n    field: \"finalizeStatus\"\n  }]; //========================== 그리드를 클릭했을 때 발생되는 이벤트 ==========================\n  // onClose 와 open 값을 비구조 할당과 동시에 Dialog가 닫히면서\n  // onClose안에 객체(data, division) 을 가지고 AccountSearch 컴포넌트로 감.\n  // onclick 에 handleClose 실행되면서 close 함수호출\n\n  function currencyFormatter(params) {\n    return formatNumber(params.value) + \" 원\";\n  }\n\n  function formatNumber(number) {\n    // this puts commas into the number eg 1000 goes to 1,000,\n    // i pulled this from stack overflow, i have no idea how it works\n    return Math.floor(number).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n  }\n\n  const SumSalary = () => {\n    const salaryRows = positionGridApi.getSelectedRows();\n    var realSalary = 0;\n    var totalDeduction = 0;\n\n    if (salaryRows.length === 0) {\n      alert(\"선택된 값이 없습니다\");\n      return;\n    }\n\n    console.log(salaryRows[0].finalizeStatus);\n\n    for (var i = 0; i < salaryRows.length; i++) {\n      if (salaryRows[i].finalizeStatus === 'Y') {\n        alert(\"마감여부 확인 바랍니다\");\n        return;\n      }\n\n      realSalary += parseInt(salaryRows[i].realSalary);\n      totalDeduction += parseInt(salaryRows[i].totalDeduction);\n    }\n\n    const newJournal = journalLists.map((journalState, index) => {\n      switch (index) {\n        case 0:\n          return { ...journalState,\n            leftDebtorPrice: realSalary\n          };\n\n        case 1:\n          return { ...journalState,\n            rightCreditsPrice: realSalary\n          };\n\n        case 2:\n          return { ...journalState,\n            leftDebtorPrice: totalDeduction\n          };\n\n        case 3:\n          return { ...journalState,\n            rightCreditsPrice: totalDeduction\n          };\n\n        default:\n          return { ...journalState\n          };\n      }\n    });\n    console.log(\"newJournal\", newJournal);\n    props.close({\n      newJournal,\n      salaryRows,\n      division: \"Salary\"\n    });\n  };\n\n  const selectData = async () => {\n    //월별 급여조회 호출\n    await dispatch({\n      type: SEARCH_MONTH_SALARY_LIST_REQUEST,\n      payload: {\n        applyYearMonth: date,\n        deptCode: 'ALL'\n      }\n    });\n  };\n\n  const customStyles = {\n    menu: (provided, state) => ({ ...provided,\n      width: state.selectProps.width,\n      borderBottom: \"1px dotted pink\",\n      color: state.selectProps.menuColor,\n      padding: 20\n    }),\n    singleValue: (provided, state) => {\n      const opacity = state.isDisabled ? 0.5 : 1;\n      const transition = \"opacity 300ms\";\n      return { ...provided,\n        opacity,\n        transition\n      };\n    }\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    Align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    style: {\n      minWidth: \"250px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Select, {\n    styles: customStyles,\n    onChange: DatehandleChange,\n    options: thisYear(),\n    placeholder: \"\\uAC12\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"ALL\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"\\uC804\\uCCB4\\uBD80\\uC11C\"))), React.createElement(Button, {\n    variant: \"contained\",\n    size: \"large\",\n    color: \"primary\",\n    startIcon: React.createElement(SearchIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }) //아이콘\n    ,\n    onClick: selectData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"\\uAC80\\uC0C9\")), React.createElement(\"div\", {\n    className: \"ag-theme-material\" //그리드 모양\n    ,\n    style: {\n      height: \"540px\",\n      width: '100%',\n      paddingTop: \"8px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: accountColumnDefs //컬럼명\n    ,\n    rowSelection: \"multiple\" // 하나만 선택 가능.\n    ,\n    getRowStyle: function (param) {\n      return {\n        \"text-align\": \"center\"\n      };\n    } //body 가운데 정렬\n    ,\n    onGridReady: onGridReady,\n    rowData: data,\n    suppressRowClickSelection: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: SumSalary,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"\\uC784\\uAE08\\uB9C8\\uAC10\"))));\n};\n\nexport default MonthSalary;","map":{"version":3,"sources":["C:/Users/USER/Desktop/68REACT/68REACT/68REACT/src/erp/account/account/page/Slip/SalaryAndDelivery/MonthSalary.js"],"names":["React","useState","useEffect","SearchIcon","AgGridReact","useDispatch","useSelector","SEARCH_MONTH_SALARY_LIST_REQUEST","thisYear","Select","List","DialogActions","Button","FormControl","MenuItem","MonthSalary","props","date","setDate","positionGridApi","setPositionGridApi","data","HrReducer","monthSalary","dispatch","journalLists","setJournalLists","journalNo","slipNo","balanceDivision","accountCode","accountName","customerCode","leftDebtorPrice","rightCreditsPrice","console","log","onGridReady","params","api","sizeColumnsToFit","DatehandleChange","newValue","value","accountColumnDefs","width","headerCheckboxSelection","checkboxSelection","headerName","field","hide","valueFormatter","currencyFormatter","formatNumber","number","Math","floor","toString","replace","SumSalary","salaryRows","getSelectedRows","realSalary","totalDeduction","length","alert","finalizeStatus","i","parseInt","newJournal","map","journalState","index","close","division","selectData","type","payload","applyYearMonth","deptCode","customStyles","menu","provided","state","selectProps","borderBottom","color","menuColor","padding","singleValue","opacity","isDisabled","transition","minWidth","height","paddingTop","param"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,2CAAP;AACA,OAAO,wDAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,aAAxC;AACA,SAASC,gCAAT,QAAiD,uCAAjD;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SACEC,IADF,EAEEC,aAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,QALF,QAMO,mBANP;;AAQA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACkB,eAAD,EAAkBC,kBAAlB,IAAuCpB,KAAK,CAACC,QAAN,EAA7C;AACA,QAAMoB,IAAI,GAAGf,WAAW,CAAC,CAAC;AAACgB,IAAAA;AAAD,GAAD,KAAeA,SAAS,CAACC,WAA1B,EAAsC,EAAtC,CAAxB;AACA,QAAMC,QAAQ,GAAGnB,WAAW,EAA5B;AAEA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,CAC/C;AACA;AACE0B,IAAAA,SAAS,EAAE,aADb;AAC4B;AAC1BC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,IALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,EAPnB;AAOuB;AACrBC,IAAAA,iBAAiB,EAAE,CARrB,CAQwB;;AARxB,GAF+C,EAY/C;AACEP,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,IALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,CAPnB;AAOsB;AACpBC,IAAAA,iBAAiB,EAAE,EARrB,CAQyB;;AARzB,GAZ+C,EAsB/C;AACEP,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,KALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,EAPnB;AAOuB;AACrBC,IAAAA,iBAAiB,EAAE,CARrB,CAQwB;;AARxB,GAtB+C,EAgC/C;AACEP,IAAAA,SAAS,EAAE,aADb;AAEEC,IAAAA,MAAM,EAAE,KAFV;AAGEC,IAAAA,eAAe,EAAE,IAHnB;AAIEC,IAAAA,WAAW,EAAE,MAJf;AAIuB;AACrBC,IAAAA,WAAW,EAAE,IALf;AAMEC,IAAAA,YAAY,EAAE,IANhB;AAOEC,IAAAA,eAAe,EAAE,CAPnB;AAOsB;AACpBC,IAAAA,iBAAiB,EAAE,EARrB,CAQyB;;AARzB,GAhC+C,CAAD,CAAhD;AA2CAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBf,IAAnB;;AACA,QAAMgB,WAAW,GAAGC,MAAM,IAAI;AAC1BlB,IAAAA,kBAAkB,CAACkB,MAAM,CAACC,GAAR,CAAlB;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,gBAAX,GAF0B,CAEK;AAChC,GAHH;;AAIE,QAAMC,gBAAgB,GAAIC,QAAD,IAAc;AAACxB,IAAAA,OAAO,CAACwB,QAAQ,CAACC,KAAV,CAAP;AAAyB,GAAjE,CAtDyB,CAuDzB;;;AACF,QAAMC,iBAAiB,GAAG,CACxB;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,uBAAuB,EAAE,IAAzC;AAA+CC,IAAAA,iBAAiB,EAAE;AAAlE,GADwB,EAExB;AAAEC,IAAAA,UAAU,EAAE,MAAd;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAFwB,EAGxB;AAAED,IAAAA,UAAU,EAAE,MAAd;AAAsBC,IAAAA,KAAK,EAAE,gBAA7B;AAAgDC,IAAAA,IAAI,EAAE;AAAtD,GAHwB,EAIxB;AAAEF,IAAAA,UAAU,EAAE,MAAd;AAAsBC,IAAAA,KAAK,EAAE,QAA7B;AAAwCE,IAAAA,cAAc,EAAEC;AAAxD,GAJwB,EAKxB;AAAEJ,IAAAA,UAAU,EAAE,SAAd;AAAyBC,IAAAA,KAAK,EAAE,iBAAhC;AAAoDE,IAAAA,cAAc,EAAEC;AAApE,GALwB,EAMxB;AAAEJ,IAAAA,UAAU,EAAE,OAAd;AAAuBC,IAAAA,KAAK,EAAE,MAA9B;AAAuCE,IAAAA,cAAc,EAAEC;AAAvD,GANwB,EAOxB;AAAEJ,IAAAA,UAAU,EAAE,SAAd;AAAyBC,IAAAA,KAAK,EAAE,aAAhC;AAAgDE,IAAAA,cAAc,EAAEC;AAAhE,GAPwB,EAQxB;AAAEJ,IAAAA,UAAU,EAAE,SAAd;AAAyBC,IAAAA,KAAK,EAAE,gBAAhC;AAAmDE,IAAAA,cAAc,EAAEC;AAAnE,GARwB,EASxB;AAAEJ,IAAAA,UAAU,EAAE,OAAd;AAAuBC,IAAAA,KAAK,EAAE,YAA9B;AAA6CE,IAAAA,cAAc,EAAEC;AAA7D,GATwB,EAUxB;AAAEJ,IAAAA,UAAU,EAAE,MAAd;AAAsBC,IAAAA,KAAK,EAAE,cAA7B;AAA8CC,IAAAA,IAAI,EAAE;AAApD,GAVwB,EAWxB;AAAEF,IAAAA,UAAU,EAAE,MAAd;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAXwB,CAA1B,CAxD2B,CAqE/B;AACE;AACA;AAEA;;AAEF,WAASG,iBAAT,CAA2Bd,MAA3B,EAAmC;AAC/B,WAAOe,YAAY,CAACf,MAAM,CAACK,KAAR,CAAZ,GAA6B,IAApC;AACH;;AAED,WAASU,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B;AACA;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWF,MAAX,EAAmBG,QAAnB,GAA8BC,OAA9B,CAAsC,yBAAtC,EAAiE,KAAjE,CAAP;AACH;;AAED,QAAMC,SAAS,GAAC,MAAI;AAElB,UAAMC,UAAU,GAAEzC,eAAe,CAAC0C,eAAhB,EAAlB;AACA,QAAIC,UAAU,GAAC,CAAf;AACA,QAAIC,cAAc,GAAC,CAAnB;;AAEA,QAAGH,UAAU,CAACI,MAAX,KAAoB,CAAvB,EAAyB;AACtBC,MAAAA,KAAK,CAAC,aAAD,CAAL;AACA;AACF;;AACD9B,IAAAA,OAAO,CAACC,GAAR,CAAYwB,UAAU,CAAC,CAAD,CAAV,CAAcM,cAA1B;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACP,UAAU,CAACI,MAA1B,EAAkCG,CAAC,EAAnC,EAAsC;AAEpC,UAAGP,UAAU,CAACO,CAAD,CAAV,CAAcD,cAAd,KAA+B,GAAlC,EAAsC;AAC5BD,QAAAA,KAAK,CAAC,cAAD,CAAL;AACA;AACT;;AACDH,MAAAA,UAAU,IAAEM,QAAQ,CAACR,UAAU,CAACO,CAAD,CAAV,CAAcL,UAAf,CAApB;AACAC,MAAAA,cAAc,IAAEK,QAAQ,CAACR,UAAU,CAACO,CAAD,CAAV,CAAcJ,cAAf,CAAxB;AAED;;AACD,UAAMM,UAAU,GAAG5C,YAAY,CAAC6C,GAAb,CAAiB,CAACC,YAAD,EAAeC,KAAf,KAAyB;AAC3D,cAAQA,KAAR;AACE,aAAK,CAAL;AACE,iBAAO,EACL,GAAGD,YADE;AAELtC,YAAAA,eAAe,EAAE6B;AAFZ,WAAP;;AAKF,aAAK,CAAL;AACE,iBAAO,EACL,GAAGS,YADE;AAELrC,YAAAA,iBAAiB,EAAE4B;AAFd,WAAP;;AAKF,aAAK,CAAL;AACE,iBAAO,EACL,GAAGS,YADE;AAELtC,YAAAA,eAAe,EAAE8B;AAFZ,WAAP;;AAKF,aAAK,CAAL;AACE,iBAAO,EACL,GAAGQ,YADE;AAELrC,YAAAA,iBAAiB,EAAE6B;AAFd,WAAP;;AAKF;AACE,iBAAO,EAAE,GAAGQ;AAAL,WAAP;AA1BJ;AA4BD,KA7BkB,CAAnB;AA8BApC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBiC,UAAzB;AAEDrD,IAAAA,KAAK,CAACyD,KAAN,CAAY;AACTJ,MAAAA,UADS;AAETT,MAAAA,UAFS;AAGTc,MAAAA,QAAQ,EAAE;AAHD,KAAZ;AAKA,GA3DD;;AA4DA,QAAMC,UAAU,GAAG,YAAY;AAAC;AAC5B,UAAMnD,QAAQ,CAAC;AACboD,MAAAA,IAAI,EAAErE,gCADO;AAEbsE,MAAAA,OAAO,EAAE;AACPC,QAAAA,cAAc,EAAE7D,IADT;AAEP8D,QAAAA,QAAQ,EAAC;AAFF;AAFI,KAAD,CAAd;AAQH,GATD;;AAWA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,CAACC,QAAD,EAAWC,KAAX,MAAsB,EAC1B,GAAGD,QADuB;AAE1BrC,MAAAA,KAAK,EAAEsC,KAAK,CAACC,WAAN,CAAkBvC,KAFC;AAG1BwC,MAAAA,YAAY,EAAE,iBAHY;AAI1BC,MAAAA,KAAK,EAAEH,KAAK,CAACC,WAAN,CAAkBG,SAJC;AAK1BC,MAAAA,OAAO,EAAE;AALiB,KAAtB,CADW;AAQjBC,IAAAA,WAAW,EAAE,CAACP,QAAD,EAAWC,KAAX,KAAqB;AAChC,YAAMO,OAAO,GAAGP,KAAK,CAACQ,UAAN,GAAmB,GAAnB,GAAyB,CAAzC;AACA,YAAMC,UAAU,GAAG,eAAnB;AAEA,aAAO,EAAE,GAAGV,QAAL;AAAeQ,QAAAA,OAAf;AAAwBE,QAAAA;AAAxB,OAAP;AACD;AAbgB,GAArB;AAgBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACO;AAAK,IAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,MAAM,EAAEb,YADV;AAEE,IAAA,QAAQ,EAAEvC,gBAFZ;AAGE,IAAA,OAAO,EAAEjC,QAAQ,EAHnB;AAIE,IAAA,WAAW,EAAC,mDAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCANF,CADF,CADA,EAWE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,KAAK,EAAC,SAHR;AAIE,IAAA,SAAS,EAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJb,CAI6B;AAJ7B;AAKE,IAAA,OAAO,EAAEmE,UALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXF,CADP,EAuBO;AACE,IAAA,SAAS,EAAE,mBADb,CACkC;AADlC;AAEE,IAAA,KAAK,EAAE;AACLmB,MAAAA,MAAM,EAAE,OADH;AAELjD,MAAAA,KAAK,EAAE,MAFF;AAILkD,MAAAA,UAAU,EAAE;AAJP,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASF,oBAAC,WAAD;AACM,IAAA,UAAU,EAAEnD,iBADlB,CACqC;AADrC;AAEM,IAAA,YAAY,EAAC,UAFnB,CAE8B;AAF9B;AAGM,IAAA,WAAW,EAAE,UAAUoD,KAAV,EAAiB;AAAE,aAAO;AAAE,sBAAc;AAAhB,OAAP;AAAoC,KAH1E,CAG4E;AAH5E;AAIM,IAAA,WAAW,EAAE3D,WAJnB;AAMM,IAAA,OAAO,EAAEhB,IANf;AAOM,IAAA,yBAAyB,EAAE,IAPjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATE,CAvBP,CADD,EA4CM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEsC,SAAjB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADA,CADA,CA5CN,CADF;AAuDC,CAnOD;;AAoOA,eAAe5C,WAAf","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham-dark.css\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { SEARCH_MONTH_SALARY_LIST_REQUEST } from \"erp/hr/salary/saga/SearchMonthSalSaga\";\nimport {thisYear} from \"erp/account/util/lib\"\nimport Select from \"react-select\";\nimport {\n  List,\n  DialogActions,\n  Button,\n  FormControl, \n  MenuItem\n} from \"@material-ui/core\";\n\nconst MonthSalary = (props) => {\n    const [date, setDate] = useState(\"\");\n    const [positionGridApi, setPositionGridApi] =React.useState();\n    const data = useSelector(({HrReducer})=>HrReducer.monthSalary,[]);\n    const dispatch = useDispatch();\n\n    const [journalLists, setJournalLists] = useState([\n      //분개는 단 두가지만 표현한다 현금/ 공제금액 그리고 이부분들은 set을 사용하면 작동안된다.\n      {\n        journalNo: \"NEW JOURNAL\", // 여기서 분개 번호가 만들어짐.\n        slipNo: \"NEW\",\n        balanceDivision: \"차변\",\n        accountCode: \"0603\", //급여는 노무비로 넣었다.\n        accountName: \"급여\",\n        customerCode: null,\n        leftDebtorPrice: \"\", // 차변\n        rightCreditsPrice: 0, // 대변\n      },\n      {\n        journalNo: \"NEW JOURNAL\",\n        slipNo: \"NEW\",\n        balanceDivision: \"대변\",\n        accountCode: \"0101\", //급여에 대한 현금\n        accountName: \"현금\",\n        customerCode: null,\n        leftDebtorPrice: 0, // 차변\n        rightCreditsPrice: \"\", // 대변\n      },\n      {\n        journalNo: \"NEW JOURNAL\",\n        slipNo: \"NEW\",\n        balanceDivision: \"차변\",\n        accountCode: \"0621\", //공제금을 세부적으로 구분하지 않고 보험료로 전표발행\n        accountName: \"보험료\",\n        customerCode: null,\n        leftDebtorPrice: \"\", // 차변\n        rightCreditsPrice: 0, // 대변\n      },\n      {\n        journalNo: \"NEW JOURNAL\",\n        slipNo: \"NEW\",\n        balanceDivision: \"대변\",\n        accountCode: \"0101\", //공제금에 대한 현금\n        accountName: \"현금\",\n        customerCode: null,\n        leftDebtorPrice: 0, // 차변\n        rightCreditsPrice: \"\", // 대변\n      },\n    ]);\n    console.log(\"data\",data);\n    const onGridReady = params => {\n        setPositionGridApi(params.api);\n        params.api.sizeColumnsToFit(); // 칼럼 사이즈 자동조절\n      };\n      const DatehandleChange = (newValue) => {setDate(newValue.value);};\n      //========================== 그리드내용 ==========================\n    const accountColumnDefs = [\n      { width: \"100\", headerCheckboxSelection: true, checkboxSelection: true, },\n      { headerName: \"사원코드\", field: \"empCode\" },\n      { headerName: \"적용연월\", field: \"applyYearMonth\" , hide: true},\n      { headerName: \"총 급여\", field: \"salary\" , valueFormatter: currencyFormatter },\n      { headerName: \"연차미사용수당\", field: \"unusedDaySalary\" , valueFormatter: currencyFormatter  },\n      { headerName: \"경비지급액\", field: \"cost\" , valueFormatter: currencyFormatter  },\n      { headerName: \"초과수당 합계\", field: \"totalExtSal\" , valueFormatter: currencyFormatter  },\n      { headerName: \"공제금액 합계\", field: \"totalDeduction\" , valueFormatter: currencyFormatter  },\n      { headerName: \"차인지급액\", field: \"realSalary\" , valueFormatter: currencyFormatter  },\n      { headerName: \"실지급액\", field: \"totalPayment\" , hide: true},\n      { headerName: \"마감여부\", field: \"finalizeStatus\" }\n      ]\n//========================== 그리드를 클릭했을 때 발생되는 이벤트 ==========================\n  // onClose 와 open 값을 비구조 할당과 동시에 Dialog가 닫히면서\n  // onClose안에 객체(data, division) 을 가지고 AccountSearch 컴포넌트로 감.\n\n  // onclick 에 handleClose 실행되면서 close 함수호출\n\nfunction currencyFormatter(params) {\n    return formatNumber(params.value) + \" 원\";\n}\n\nfunction formatNumber(number) {\n    // this puts commas into the number eg 1000 goes to 1,000,\n    // i pulled this from stack overflow, i have no idea how it works\n    return Math.floor(number).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n}\n\nconst SumSalary=()=>{\n\n  const salaryRows= positionGridApi.getSelectedRows();\n  var realSalary=0;\n  var totalDeduction=0;\n \n  if(salaryRows.length===0){\n     alert(\"선택된 값이 없습니다\")\n     return;\n  }\n  console.log(salaryRows[0].finalizeStatus);\n \n  for(var i=0; i<salaryRows.length; i++){\n    \n    if(salaryRows[i].finalizeStatus==='Y'){\n              alert(\"마감여부 확인 바랍니다\")\n              return;\n    }\n    realSalary+=parseInt(salaryRows[i].realSalary);\n    totalDeduction+=parseInt(salaryRows[i].totalDeduction)\n    \n  }\n  const newJournal = journalLists.map((journalState, index) => {\n    switch (index) {\n      case 0:\n        return {\n          ...journalState,\n          leftDebtorPrice: realSalary,\n        };\n  \n      case 1:\n        return {\n          ...journalState,\n          rightCreditsPrice: realSalary,\n        };\n  \n      case 2:\n        return {\n          ...journalState,\n          leftDebtorPrice: totalDeduction,\n        };\n  \n      case 3:\n        return {\n          ...journalState,\n          rightCreditsPrice: totalDeduction,\n        };\n  \n      default:\n        return { ...journalState };\n    }\n  });\n  console.log(\"newJournal\",newJournal)\n\n props.close({\n    newJournal,\n    salaryRows,\n    division: \"Salary\",\n  }); \n};\nconst selectData = async () => {//월별 급여조회 호출\n    await dispatch({\n      type: SEARCH_MONTH_SALARY_LIST_REQUEST, \n      payload: {\n        applyYearMonth: date,\n        deptCode:'ALL'\n      },\n    });\n  \n};\n\nconst customStyles = {\n    menu: (provided, state) => ({\n      ...provided,\n      width: state.selectProps.width,\n      borderBottom: \"1px dotted pink\",\n      color: state.selectProps.menuColor,\n      padding: 20,\n    }),\n    singleValue: (provided, state) => {\n      const opacity = state.isDisabled ? 0.5 : 1;\n      const transition = \"opacity 300ms\";\n\n      return { ...provided, opacity, transition };\n    },\n};\n\nreturn(\n  <div>\n   <List>\n          <div Align=\"center\">\n          <FormControl style={{ minWidth: \"250px\" }}>\n            <Select\n              styles={customStyles}\n              onChange={DatehandleChange}\n              options={thisYear()}\n              placeholder=\"값을 선택해주세요\"\n            >\n              <MenuItem value=\"ALL\">전체부서</MenuItem>\n            </Select>               \n          </FormControl>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              color=\"primary\"\n              startIcon={<SearchIcon />} //아이콘\n              onClick={selectData}\n             \n            >\n              검색\n            </Button>\n          </div>\n          <div\n            className={\"ag-theme-material\"} //그리드 모양\n            style={{\n              height: \"540px\",\n              width: '100%',\n              \n              paddingTop: \"8px\",\n            }}\n          >\n        <AgGridReact\n              columnDefs={accountColumnDefs} //컬럼명\n              rowSelection=\"multiple\" // 하나만 선택 가능.\n              getRowStyle={function (param) { return { \"text-align\": \"center\" }; }} //body 가운데 정렬\n              onGridReady={onGridReady}\n    \n              rowData={data}\n              suppressRowClickSelection={true}\n            />\n          </div>\n        </List>\n        <div>\n        <DialogActions>\n        <Button onClick={SumSalary} color=\"primary\"> \n          임금마감\n        </Button>    \n      </DialogActions>     \n        </div>\n</div>\n     \n)\n}\nexport default MonthSalary;\n"]},"metadata":{},"sourceType":"module"}