{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\common\\\\page\\\\dashboard\\\\components\\\\Text.js\";\nimport { FontLoader, Vector3, TextBufferGeometry } from \"three\";\nimport React, { useCallback, useRef } from \"react\";\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport usePromise from \"react-promise-suspense\";\nimport lerp from \"lerp\";\nimport state from \"../store\";\n\nfunction Text({\n  children,\n  size = 1,\n  left,\n  right,\n  top,\n  bottom,\n  color = \"white\",\n  opacity = 1,\n  height = 0.01,\n  layers = 0,\n  font = \"/MOONGET_Heavy.blob\",\n  ...props\n}) {\n  const data = useLoader(FontLoader, font);\n  const geom = usePromise(() => new Promise(res => res(new TextBufferGeometry(children, {\n    font: data,\n    size: 1,\n    height,\n    curveSegments: 32\n  }))), [children]);\n  const onUpdate = useCallback(self => {\n    const box = new Vector3();\n    self.geometry.computeBoundingBox();\n    self.geometry.boundingBox.getSize(box);\n    self.position.x = left ? 0 : right ? -box.x : -box.x / 2;\n    self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2;\n  }, [left, right, top, bottom]);\n  const ref = useRef();\n  let last = state.top.current;\n  useFrame(() => {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1);\n    last = state.top.current;\n  });\n  return React.createElement(\"group\", Object.assign({}, props, {\n    scale: [size, size, 0.1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"mesh\", {\n    geometry: geom,\n    onUpdate: onUpdate,\n    frustumCulled: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"customMaterial\", {\n    ref: ref,\n    attach: \"material\",\n    color: color,\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })));\n}\n\nconst MultilineText = ({\n  text,\n  size = 1,\n  lineHeight = 1,\n  position = [0, 0, 0],\n  ...props\n}) => text.split(\"\\n\").map((text, index) => React.createElement(Text, Object.assign({\n  key: index,\n  size: size\n}, props, {\n  position: [position[0], position[1] - index * lineHeight, position[2]],\n  children: text,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n})));\n\nexport { Text, MultilineText };","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/common/page/dashboard/components/Text.js"],"names":["FontLoader","Vector3","TextBufferGeometry","React","useCallback","useRef","useLoader","useFrame","usePromise","lerp","state","Text","children","size","left","right","top","bottom","color","opacity","height","layers","font","props","data","geom","Promise","res","curveSegments","onUpdate","self","box","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","ref","last","current","shift","MultilineText","text","lineHeight","split","map","index"],"mappings":"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","sourcesContent":["import { FontLoader, Vector3, TextBufferGeometry } from \"three\"\nimport React, { useCallback, useRef } from \"react\"\nimport { useLoader, useFrame } from \"react-three-fiber\"\nimport usePromise from \"react-promise-suspense\"\nimport lerp from \"lerp\"\nimport state from \"../store\"\n\nfunction Text({ children, size = 1, left, right, top, bottom, color = \"white\", opacity = 1, height = 0.01, layers = 0, font = \"/MOONGET_Heavy.blob\", ...props }) {\n  const data = useLoader(FontLoader, font)\n  const geom = usePromise(() => new Promise(res => res(new TextBufferGeometry(children, { font: data, size: 1, height, curveSegments: 32 }))), [children])\n  const onUpdate = useCallback(\n    self => {\n      const box = new Vector3()\n      self.geometry.computeBoundingBox()\n      self.geometry.boundingBox.getSize(box)\n      self.position.x = left ? 0 : right ? -box.x : -box.x / 2\n      self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2\n    },\n    [left, right, top, bottom]\n  )\n\n  const ref = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1)\n    last = state.top.current\n  })\n\n  return (\n    <group {...props} scale={[size, size, 0.1]}>\n      <mesh geometry={geom} onUpdate={onUpdate} frustumCulled={false}>\n        <customMaterial ref={ref} attach=\"material\" color={color} transparent opacity={opacity} />\n      </mesh>\n    </group>\n  )\n}\n\nconst MultilineText = ({ text, size = 1, lineHeight = 1, position = [0, 0, 0], ...props }) =>\n  text.split(\"\\n\").map((text, index) => <Text key={index} size={size} {...props} position={[position[0], position[1] - index * lineHeight, position[2]]} children={text} />)\n\nexport { Text, MultilineText }\n"]},"metadata":{},"sourceType":"module"}