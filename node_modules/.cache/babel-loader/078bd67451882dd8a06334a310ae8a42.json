{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\REACT\\\\68REACT\\\\src\\\\erp\\\\account\\\\account\\\\page\\\\ApprovalManager\\\\SlipGrid.js\";\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport * as types from \"../../reducer/AccountReducer\";\nimport { Toolbar, AppBar, Typography, makeStyles, Button } from \"@material-ui/core\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst SlipGrid = ({\n  setSlipNo,\n  setFlag\n}) => {\n  const classes = useStyles(); // 스타일 먹임\n\n  const data = useSelector(({\n    AccReducer\n  }) => AccReducer.AccountReducer.approvalSlipList);\n  const dispatch = useDispatch(); //========================== 그리드 객체 준비 ==========================\n\n  const [positionGridApi, setPositionGridApi] = useState();\n\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 그리드 초기화 시 칼럼 사이즈 자동조절.\n  }; // 여긴 그냥 ag Grid의 api를 사용하기 위해 선언. 그리고 이곳은 ag Grid 초기화 시 실행된다.\n  //========================== 그리드내용 ==========================\n\n\n  const accountColumnDefs = [{\n    headerName: \"\",\n    field: \"check\",\n    width: 50,\n    checkboxSelection: true\n  }, // checkboxSelection : 체크박스 추가함\n  {\n    headerName: \"전표일련번호\",\n    field: \"slipNo\",\n    width: 150\n  }, {\n    headerName: \"기수일련번호\",\n    field: \"accountPeriodNo\",\n    width: 100\n  }, {\n    headerName: \"전표유형\",\n    field: \"slipType\",\n    width: 100\n  }, {\n    headerName: \"작성날짜\",\n    field: \"reportingDate\",\n    width: 100\n  }, {\n    headerName: \"작성자명\",\n    field: \"reportingEmpName\",\n    width: 100\n  }, {\n    headerName: \"작성자코드\",\n    field: \"reportingEmpCode\",\n    width: 100,\n    hide: true\n  }, {\n    headerName: \"품의내역\",\n    field: \"expenseReport\",\n    width: 180,\n    editable: true\n  }, // editable : 편집가능\n  {\n    headerName: \"승인날짜\",\n    field: \"approvalDate\",\n    width: 100\n  }, {\n    headerName: \"승인자\",\n    field: \"approvalEmpCode\",\n    width: 100\n  }, {\n    headerName: \"승인상태\",\n    field: \"slipStatus\",\n    width: 80\n  }, {\n    headerName: \"부서코드\",\n    field: \"deptCode\",\n    hide: true\n  }, {\n    headerName: \"status\",\n    field: \"status\",\n    hide: true\n  }]; //========================== 그리드초기화 ==========================\n\n  const initalBtn = () => {\n    positionGridApi.selectAll(); // 그리드에 뿌려진 모든 데이터를 선택해라.\n\n    const allData = positionGridApi.getSelectedRows(); // 선택된 데이터를 담아라.\n\n    positionGridApi.updateRowData({\n      remove: allData\n    }); // 그리드에서 제거해라\n  }; //========================== 전표승인 ===============================\n\n\n  const approvalBtn = async () => {\n    let selectedData = positionGridApi.getSelectedRows();\n    let approvalData = selectedData.map(cv => {\n      cv.slipStatus = \"승인\"; // 뒷단에서 반려도 추가를 할경우  전표 등록할때 사용하는 FormControl 을 사용 하여 승인이면 true 반려면 false 를 하고 넘겨 주길 바랍니다 ㅎㅎ\n\n      cv.approvalDate = moment(new Date()).format(\"yyyy-MM-DD\");\n      cv.approvalEmpCode = sessionStorage.getItem(\"empCodeInfo_token\");\n      cv.approvalEmpName = sessionStorage.getItem(\"empNameInfo_token\");\n      return cv;\n    });\n    dispatch({\n      type: types.UPDATE_AM_SLIP_REQUEST,\n      params: {\n        approvalData: approvalData\n      }\n    });\n    alert(` ${approvalData.length} 건 의 전표가 승인이 되었습니다. `);\n    positionGridApi.updateRowData({\n      remove: selectedData\n    });\n    setFlag(true);\n  }; //========================== 전표반려 ===============================\n\n\n  const companionBtn = async () => {\n    let selectedData = positionGridApi.getSelectedRows();\n    let companionData = selectedData.map(cv => {\n      cv.slipStatus = \"반려\"; // 뒷단에서 반려도 추가를 할경우  전표 등록할때 사용하는 FormControl 을 사용 하여 승인이면 true 반려면 false 를 하고 넘겨 주길 바랍니다 ㅎㅎ\n\n      cv.companionDate = moment(new Date()).format(\"yyyy-MM-DD\");\n      cv.companionEmpCode = sessionStorage.getItem(\"empCodeInfo_token\");\n      cv.companionEmpName = sessionStorage.getItem(\"empNameInfo_token\");\n      return cv;\n    });\n    dispatch({\n      type: types.UPDATE_AM_SLIP_REQUEST,\n      params: {\n        approvalData: companionData\n      }\n    });\n    alert(` ${companionData.length} 건 의 전표가 승인이 되었습니다. `);\n    positionGridApi.updateRowData({\n      remove: selectedData\n    });\n    setFlag(true);\n  }; //========================== 전표그리드 row를 눌렀을 때, 이벤트 ==========================\n\n\n  const slipChange = () => {\n    const rowData = positionGridApi.getSelectedRows(); // 선택된 row 정보\n\n    setSlipNo(rowData[0].slipNo); // row 정보의 slipNo를 세팅해라. JournalGrid 컴포넌트로 보내기 위함.\n  };\n\n  const onGridSizeChanged = params => {\n    var gridWidth = document.getElementById(\"grid-wrapperr\").offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth();\n\n      if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.colId);\n      } else {\n        columnsToShow.push(column.colId);\n      }\n    }\n\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit();\n  };\n\n  const {\n    dark\n  } = useThemeSwitcher();\n  return React.createElement(React.Fragment, null, React.createElement(AppBar, {\n    color: \"primary\",\n    position: \"static\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"\\uC804\\uD45C\"), React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: classes.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: approvalBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"\\uC804\\uD45C\\uC2B9\\uC778\"), React.createElement(Button, {\n    className: classes.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: companionBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"\\uBC18\\uB824\"), React.createElement(Button, {\n    className: classes.menuButton,\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: initalBtn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"\\uADF8\\uB9AC\\uB4DC\\uCD08\\uAE30\\uD654\"))), React.createElement(\"div\", {\n    id: \"grid-wrapperr\",\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\",\n    style: {\n      height: \"250px\",\n      width: \"100%\" //paddingTop: \"20px\",\n\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(AgGridReact, {\n    columnDefs: accountColumnDefs,\n    rowData: data // setData된 state를 결국 여기 넣어서 그리드에 표현함.\n    ,\n    rowSelection: \"multiple\" // 그리드 여러개 선택가능\n    ,\n    onGridReady: onGridReady,\n    onCellClicked: slipChange // 그리드 cell 하나 클릭할 때,\n    ,\n    getRowStyle: function (param) {\n      if (param.node.rowPinned) {\n        return {\n          \"font-weight\": \"bold\",\n          background: \"#CEFBC9\"\n        };\n      }\n\n      return {\n        \"text-align\": \"center\"\n      }; // bady 값 가운데정렬\n    } //onGridSizeChanged={onGridSizeChanged}\n    //onFirstDataRendered={params => params.api.sizeColumnsToFit()}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }))), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }));\n}; // 스타일 관련\n\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(1),\n    height: 330,\n    width: 1190\n  },\n  subCategory: {\n    background: \"#232f3e\",\n    color: \"white\"\n  },\n  margin: {\n    margin: theme.spacing(1)\n  },\n  title: {\n    flexGrow: 1\n  },\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\nexport default SlipGrid;","map":{"version":3,"sources":["C:/Users/USER/Desktop/REACT/68REACT/src/erp/account/account/page/ApprovalManager/SlipGrid.js"],"names":["React","useState","moment","useDispatch","useSelector","AgGridReact","types","Toolbar","AppBar","Typography","makeStyles","Button","useThemeSwitcher","SlipGrid","setSlipNo","setFlag","classes","useStyles","data","AccReducer","AccountReducer","approvalSlipList","dispatch","positionGridApi","setPositionGridApi","onGridReady","params","api","sizeColumnsToFit","accountColumnDefs","headerName","field","width","checkboxSelection","hide","editable","initalBtn","selectAll","allData","getSelectedRows","updateRowData","remove","approvalBtn","selectedData","approvalData","map","cv","slipStatus","approvalDate","Date","format","approvalEmpCode","sessionStorage","getItem","approvalEmpName","type","UPDATE_AM_SLIP_REQUEST","alert","length","companionBtn","companionData","companionDate","companionEmpCode","companionEmpName","slipChange","rowData","slipNo","onGridSizeChanged","gridWidth","document","getElementById","offsetWidth","columnsToShow","columnsToHide","totalColsWidth","allColumns","columnApi","getAllColumns","i","column","getMinWidth","push","colId","setColumnsVisible","dark","title","menuButton","height","param","node","rowPinned","background","theme","paper","padding","spacing","subCategory","color","margin","flexGrow","root","marginRight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\nimport * as types from \"../../reducer/AccountReducer\";\nimport {\n  Toolbar,\n  AppBar,\n  Typography,\n  makeStyles,\n  Button,\n} from \"@material-ui/core\";\nimport { useThemeSwitcher } from \"mui-theme-switcher\";\n\nconst SlipGrid = ({ setSlipNo, setFlag }) => {\n  const classes = useStyles(); // 스타일 먹임\n\n  const data = useSelector(({ AccReducer }) => AccReducer.AccountReducer.approvalSlipList);\n  const dispatch = useDispatch();\n\n  //========================== 그리드 객체 준비 ==========================\n  const [positionGridApi, setPositionGridApi] = useState();\n  const onGridReady = params => {\n    setPositionGridApi(params.api);\n    params.api.sizeColumnsToFit(); // 그리드 초기화 시 칼럼 사이즈 자동조절.\n  }; // 여긴 그냥 ag Grid의 api를 사용하기 위해 선언. 그리고 이곳은 ag Grid 초기화 시 실행된다.\n\n  //========================== 그리드내용 ==========================\n  const accountColumnDefs = [\n    { headerName: \"\", field: \"check\", width: 50, checkboxSelection: true }, // checkboxSelection : 체크박스 추가함\n    { headerName: \"전표일련번호\", field: \"slipNo\", width: 150 },\n    { headerName: \"기수일련번호\", field: \"accountPeriodNo\", width: 100 },\n    { headerName: \"전표유형\", field: \"slipType\", width: 100 },\n    { headerName: \"작성날짜\", field: \"reportingDate\", width: 100 },\n    { headerName: \"작성자명\", field: \"reportingEmpName\", width: 100 },\n    {\n      headerName: \"작성자코드\",\n      field: \"reportingEmpCode\",\n      width: 100,\n      hide: true,\n    },\n    {\n      headerName: \"품의내역\",\n      field: \"expenseReport\",\n      width: 180,\n      editable: true,\n    }, // editable : 편집가능\n    { headerName: \"승인날짜\", field: \"approvalDate\", width: 100 },\n    { headerName: \"승인자\", field: \"approvalEmpCode\", width: 100 },\n    { headerName: \"승인상태\", field: \"slipStatus\", width: 80 },\n    { headerName: \"부서코드\", field: \"deptCode\", hide: true },\n    { headerName: \"status\", field: \"status\", hide: true },\n  ];\n\n  //========================== 그리드초기화 ==========================\n  const initalBtn = () => {\n    positionGridApi.selectAll(); // 그리드에 뿌려진 모든 데이터를 선택해라.\n    const allData = positionGridApi.getSelectedRows(); // 선택된 데이터를 담아라.\n    positionGridApi.updateRowData({ remove: allData }); // 그리드에서 제거해라\n  };\n\n  //========================== 전표승인 ===============================\n  const approvalBtn = async () => {\n    let selectedData = positionGridApi.getSelectedRows();\n    let approvalData = selectedData.map(cv => {\n      cv.slipStatus = \"승인\"; // 뒷단에서 반려도 추가를 할경우  전표 등록할때 사용하는 FormControl 을 사용 하여 승인이면 true 반려면 false 를 하고 넘겨 주길 바랍니다 ㅎㅎ\n      cv.approvalDate = moment(new Date()).format(\"yyyy-MM-DD\");\n      cv.approvalEmpCode = sessionStorage.getItem(\"empCodeInfo_token\");\n      cv.approvalEmpName = sessionStorage.getItem(\"empNameInfo_token\");\n      return cv;\n    });\n    dispatch({\n      type: types.UPDATE_AM_SLIP_REQUEST,\n      params: { approvalData: approvalData },\n    });\n    alert(` ${approvalData.length} 건 의 전표가 승인이 되었습니다. `);\n    positionGridApi.updateRowData({ remove: selectedData });\n    setFlag(true);\n  };\n  //========================== 전표반려 ===============================\n  const companionBtn = async () => {\n    let selectedData = positionGridApi.getSelectedRows();\n    let companionData = selectedData.map(cv => {\n      cv.slipStatus = \"반려\"; // 뒷단에서 반려도 추가를 할경우  전표 등록할때 사용하는 FormControl 을 사용 하여 승인이면 true 반려면 false 를 하고 넘겨 주길 바랍니다 ㅎㅎ\n      cv.companionDate = moment(new Date()).format(\"yyyy-MM-DD\");\n      cv.companionEmpCode = sessionStorage.getItem(\"empCodeInfo_token\");\n      cv.companionEmpName = sessionStorage.getItem(\"empNameInfo_token\");\n      return cv;\n    });\n    dispatch({\n      type: types.UPDATE_AM_SLIP_REQUEST,\n      params: { approvalData: companionData },\n    });\n    alert(` ${companionData.length} 건 의 전표가 승인이 되었습니다. `);\n    positionGridApi.updateRowData({ remove: selectedData });\n    setFlag(true);\n  };\n  //========================== 전표그리드 row를 눌렀을 때, 이벤트 ==========================\n  const slipChange = () => {\n    const rowData = positionGridApi.getSelectedRows(); // 선택된 row 정보\n    setSlipNo(rowData[0].slipNo); // row 정보의 slipNo를 세팅해라. JournalGrid 컴포넌트로 보내기 위함.\n  };\n\n  const onGridSizeChanged = params => {\n    var gridWidth = document.getElementById(\"grid-wrapperr\").offsetWidth;\n    var columnsToShow = [];\n    var columnsToHide = [];\n    var totalColsWidth = 0;\n    var allColumns = params.columnApi.getAllColumns();\n    for (var i = 0; i < allColumns.length; i++) {\n      var column = allColumns[i];\n      totalColsWidth += column.getMinWidth();\n      if (totalColsWidth > gridWidth) {\n        columnsToHide.push(column.colId);\n      } else {\n        columnsToShow.push(column.colId);\n      }\n    }\n    params.columnApi.setColumnsVisible(columnsToShow, true);\n    params.columnApi.setColumnsVisible(columnsToHide, false);\n    params.api.sizeColumnsToFit();\n  };\n\n  const { dark } = useThemeSwitcher();\n\n  return (\n    <>\n      <AppBar color=\"primary\" position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\">전표</Typography>\n          <Typography variant=\"h6\" className={classes.title}></Typography>\n          <Button\n            className={classes.menuButton}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={approvalBtn}\n          >\n            전표승인\n          </Button>\n          <Button\n            className={classes.menuButton}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={companionBtn}\n          >\n            반려\n          </Button>\n          <Button\n            className={classes.menuButton}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={initalBtn}\n          >\n            그리드초기화\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <div id=\"grid-wrapperr\" style={{ width: \"100%\", height: \"100%\" }}>\n        <div\n          className={dark ? \"ag-theme-alpine-dark\" : \"ag-theme-material\"}\n          style={{\n            height: \"250px\",\n            width: \"100%\",\n            //paddingTop: \"20px\",\n          }}\n        >\n          <AgGridReact\n            columnDefs={accountColumnDefs}\n            rowData={data} // setData된 state를 결국 여기 넣어서 그리드에 표현함.\n            rowSelection=\"multiple\" // 그리드 여러개 선택가능\n            onGridReady={onGridReady}\n            onCellClicked={slipChange} // 그리드 cell 하나 클릭할 때,\n            getRowStyle={function(param) {\n              if (param.node.rowPinned) {\n                return { \"font-weight\": \"bold\", background: \"#CEFBC9\" };\n              }\n              return { \"text-align\": \"center\" }; // bady 값 가운데정렬\n            }}\n            //onGridSizeChanged={onGridSizeChanged}\n            //onFirstDataRendered={params => params.api.sizeColumnsToFit()}\n          />\n        </div>\n      </div>\n      <br />\n    </>\n  );\n};\n\n// 스타일 관련\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: theme.spacing(1),\n    height: 330,\n    width: 1190,\n  },\n  subCategory: {\n    background: \"#232f3e\",\n    color: \"white\",\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\nexport default SlipGrid;\n"]},"metadata":{},"sourceType":"module"}