{"version":3,"sources":["../../src/ts/focusController.ts"],"names":[],"mappings":"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","file":"focusController.js","sourcesContent":["import { Bean, Autowired, PostConstruct, PreDestroy } from \"./context/context\";\nimport { EventService } from \"./eventService\";\nimport { Column } from \"./entities/column\";\nimport { CellFocusedEvent, Events } from \"./events\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { GridApi } from \"./gridApi\";\nimport { CellComp } from \"./rendering/cellComp\";\nimport { _ } from \"./utils\";\n\n@Bean('focusController')\nexport class FocusController {\n\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private focusedCellPosition: CellPosition;\n    private keyboardFocusActive: boolean = false;\n\n    private events: (() => void)[] = [];\n\n    @PostConstruct\n    private init(): void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\n\n        this.events = [\n            this.eventService.addEventListener(Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener),\n            this.eventService.addEventListener(Events.EVENT_COLUMN_EVERYTHING_CHANGED, clearFocusedCellListener),\n            this.eventService.addEventListener(Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener),\n            this.eventService.addEventListener(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener)\n        ];\n\n        const activateKeyboardModeListener = this.activateKeyboardMode.bind(this);\n        eDocument.addEventListener('keydown', activateKeyboardModeListener);\n        this.events.push(() => eDocument.removeEventListener('keydown', activateKeyboardModeListener));\n\n        const activateMouseModeListener = this.activateMouseMode.bind(this);\n        eDocument.addEventListener('mousedown', activateMouseModeListener);\n        this.events.push(() => eDocument.removeEventListener('mousedown', activateMouseModeListener));\n    }\n\n    @PreDestroy\n    public destroy(): void {\n        if (this.events.length) {\n            this.events.forEach(func => func());\n            this.events = [];\n        }\n    }\n\n    public isKeyboardFocus(): boolean {\n        return this.keyboardFocusActive;\n    }\n\n    public clearFocusedCell(): void {\n        this.focusedCellPosition = null;\n        this.onCellFocused(false);\n    }\n\n    public getFocusedCell(): CellPosition {\n        return this.focusedCellPosition;\n    }\n\n    private activateMouseMode(): void {\n        this.keyboardFocusActive = false;\n        this.eventService.dispatchEvent({ type: Events.EVENT_MOUSE_FOCUS });\n    }\n\n    private activateKeyboardMode(): void {\n        this.keyboardFocusActive = true;\n        this.eventService.dispatchEvent({ type: Events.EVENT_KEYBOARD_FOCUS });\n    }\n\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    public getFocusCellToUseAfterRefresh(): CellPosition {\n        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh()) {\n            return null;\n        }\n\n        if (!this.focusedCellPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        const browserFocusedCell = this.getGridCellForDomElement(document.activeElement);\n        if (!browserFocusedCell) {\n            return null;\n        }\n\n        return this.focusedCellPosition;\n    }\n\n    private getGridCellForDomElement(eBrowserCell: Node): CellPosition {\n\n        let ePointer = eBrowserCell;\n        while (ePointer) {\n            const cellComp = this.gridOptionsWrapper.getDomData(ePointer, CellComp.DOM_DATA_KEY_CELL_COMP) as CellComp;\n            if (cellComp) {\n                return cellComp.getCellPosition();\n            }\n            ePointer = ePointer.parentNode;\n        }\n\n        return null;\n    }\n\n    public setFocusedCell(rowIndex: number, colKey: string | Column, floating: string | undefined, forceBrowserFocus = false): void {\n        const column = _.makeNull(this.columnController.getGridColumn(colKey));\n        this.focusedCellPosition = {rowIndex: rowIndex, rowPinned: _.makeNull(floating), column: column};\n        this.onCellFocused(forceBrowserFocus);\n    }\n\n    public isCellFocused(cellPosition: CellPosition): boolean {\n        if (_.missing(this.focusedCellPosition)) { return false; }\n        return this.focusedCellPosition.column === cellPosition.column && this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);\n    }\n\n    public isRowNodeFocused(rowNode: RowNode): boolean {\n        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);\n    }\n\n    public isAnyCellFocused(): boolean {\n        return !!this.focusedCellPosition;\n    }\n\n    public isRowFocused(rowIndex: number, floating: string): boolean {\n        if (_.missing(this.focusedCellPosition)) { return false; }\n        const floatingOrNull = _.makeNull(floating);\n        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === floatingOrNull;\n    }\n\n    public findFocusableElements(rootNode: HTMLElement, exclude?: string): HTMLElement[] {\n        const focusableString = '[tabindex], input, select, button, textarea';\n        let excludeString = '.ag-hidden, .ag-hidden *, .ag-disabled, .ag-disabled *';\n\n        if (exclude) {\n            excludeString += ', ' + exclude;\n        }\n\n        const nodes = Array.from(rootNode.querySelectorAll(focusableString)) as HTMLElement[];\n        const excludeNodes = Array.from(rootNode.querySelectorAll(excludeString)) as HTMLElement[];\n\n        if (!excludeNodes.length) {\n            return nodes;\n        }\n\n        const diff = (a: HTMLElement[], b: HTMLElement[]) => a.filter(element => b.indexOf(element) === -1);\n        return diff(nodes, excludeNodes);\n    }\n\n    private onCellFocused(forceBrowserFocus: boolean): void {\n        const event: CellFocusedEvent = {\n            type: Events.EVENT_CELL_FOCUSED,\n            forceBrowserFocus: forceBrowserFocus,\n            rowIndex: null as number,\n            column: null as Column,\n            floating: null as string,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            rowPinned: null as string\n        };\n\n        if (this.focusedCellPosition) {\n            event.rowIndex = this.focusedCellPosition.rowIndex;\n            event.column = this.focusedCellPosition.column;\n            event.rowPinned = this.focusedCellPosition.rowPinned;\n        }\n\n        this.eventService.dispatchEvent(event);\n    }\n}\n"]}