{"version":3,"sources":["../../src/ts/filter/provided/providedFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qDAAoD;AAEpD,2EAAiE;AACjE,iDAAiE;AAEjE,qCAAgC;AAEhC,6CAA4C;AAY5C;;;;GAIG;AACH;IAA6C,kCAAS;IAAtD;QAAA,qEA4PC;QAnPW,iBAAW,GAAG,KAAK,CAAC;QACpB,eAAS,GAAe,IAAI,CAAC;QAqBrC,oGAAoG;QACpG,+GAA+G;QAC/G,0GAA0G;QAC1G,oGAAoG;QACpG,2GAA2G;QAC3G,6DAA6D;QACrD,kBAAY,GAA+B,IAAI,CAAC;;IAuN5D,CAAC;IAlNG,kBAAkB;IACX,wCAAe,GAAtB;QACI,OAAO,CAAC,IAAI,CAAC,0SAEgF,CAAC,CAAC;QAC/F,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,EAAE,CAAC;IACtD,CAAC;IAEM,uCAAc,GAArB;QACI,oDAAoD;QACpD,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;IAC/B,CAAC;IAGS,sCAAa,GAAvB;QACI,IAAM,cAAc,GAAG,UAAU,CAAA,iFAEe,IAAI,CAAC,gBAAgB,EAAE,yEACzD,IAAI,CAAC,kBAAkB,EAAE,iDAE5B,CAAC;QAEZ,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;IACrC,CAAC;IAEM,6BAAI,GAAX,UAAY,MAAqB;QAC7B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACvB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAClC,CAAC;IAES,kCAAS,GAAnB,UAAoB,MAA6B;QAC7C,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC;QAEnC,IAAI,MAAM,CAAC,aAAa,KAAK,cAAc,CAAC,oBAAoB,EAAE;YAC9D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;SACjC;aAAM,IAAI,MAAM,CAAC,aAAa,KAAK,cAAc,CAAC,qBAAqB,EAAE;YACtE,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;SAClC;aAAM;YACH,kFAAkF;YAClF,IAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YAC7C,IAAM,aAAa,GAAG,CAAC,qBAAS,CAAC,0BAA0B,EAAE,qBAAS,CAAC,uBAAuB,CAAC,CAAC;YAChG,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACrE;QAED,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAE3D,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEO,0CAAiB,GAAzB,UAA0B,MAA6B;QAAvD,iBAiCC;QAhCG,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;QAChD,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;QAChD,IAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,IAAI,WAAW,IAAI,WAAW,CAAC;QAExE,IAAI,gBAAgB,EAAE;YAClB,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;YAC9D,IAAM,eAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAEpD,SAAC,CAAC,WAAW,CAAC,eAAa,EAAE,uBAAuB,CAAC,CAAC;YAEtD,IAAM,SAAS,GAAG,UAAC,IAAY,EAAE,aAAyB;gBACtD,IAAM,MAAM,GAAG,SAAC,CAAC,YAAY,CAAC,UAAU,CACpC,uFAAiF,IAAI,cAAW,CAAC,CAAC;gBAEtG,eAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAClC,KAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;YACrE,CAAC,CAAC;YAEF,IAAI,WAAW,EAAE;gBACb,SAAS,CAAC,SAAS,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;aAC/E;YAED,IAAI,WAAW,EAAE;gBACb,SAAS,CAAC,SAAS,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;aAC/E;YAED,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,SAAS,CAAC,SAAS,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;aAC/E;YAED,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,eAAa,CAAC,CAAC;SACpE;IACL,CAAC;IAED,wEAAwE;IAC9D,6CAAoB,GAA9B;QACI,OAAO,CAAC,CAAC;IACb,CAAC;IAEO,+CAAsB,GAA9B;QACI,IAAM,UAAU,GAAG,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QACxG,IAAI,CAAC,iBAAiB,GAAG,SAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;IAC/E,CAAC;IAEM,iCAAQ,GAAf;QACI,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAEM,iCAAQ,GAAf,UAAgB,KAA0B;QACtC,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;SAC9B;aAAM;YACH,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC5B;QAED,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,iEAAiE;QACjE,8EAA8E;QAC9E,2DAA2D;QAC3D,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,kCAAS,GAAjB;QACI,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAEO,kCAAS,GAAjB;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,8DAA8D;IACvD,mCAAU,GAAjB;QACI,IAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAE1C,iGAAiG;QACjG,qCAAqC;QACrC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;IACpE,CAAC;IAES,kCAAS,GAAnB,UAAoB,mBAA2B,EAAE,eAAuB;QAApD,oCAAA,EAAA,2BAA2B;QAAE,gCAAA,EAAA,uBAAuB;QACpE,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACnB,4GAA4G;YAC5G,4BAA4B;YAC5B,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,EAAE,mBAAmB,qBAAA,EAAE,eAAe,iBAAA,EAAE,CAAC,CAAC;SAC7F;QAEK,IAAA,8BAAsE,EAApE,8BAAY,EAAE,4BAAW,EAAE,4BAAyC,CAAC;QAE7E,IAAI,YAAY,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,EAAE;YACxF,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SACzB;IACL,CAAC;IAEM,wCAAe,GAAtB;QACI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC5B;IACL,CAAC;IAED,uBAAuB;IACb,4CAAmB,GAA7B;QACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAES,oCAAW,GAArB,UAAsB,mBAA2B;QAA3B,oCAAA,EAAA,2BAA2B;QAC7C,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,EAAE,CAAC;QAEnD,IAAI,mBAAmB,EAAE;YACrB,yDAAyD;YACzD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACxB;aAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YAC1B,6DAA6D;YAC7D,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC5B;IACL,CAAC;IAEM,yCAAgB,GAAvB,UAAwB,MAA+B;QACnD,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;IACtC,CAAC;IAED,0CAA0C;IAC5B,4BAAa,GAA3B,UAA4B,MAA6B,EAAE,eAAuB;QAC9E,IAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAE5D,IAAI,WAAW,EAAE;YACb,IAAI,MAAM,CAAC,UAAU,IAAI,IAAI,EAAE;gBAC3B,OAAO,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;aAC1E;YAED,OAAO,CAAC,CAAC;SACZ;QAED,OAAO,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC;IAC3E,CAAC;IAED,0CAA0C;IAC5B,+BAAgB,GAA9B,UAA+B,MAA6B;QACxD,IAAK,MAAc,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YAC9C,OAAO,CAAC,IAAI,CAAC,8GAA8G,CAAC,CAAC;YAC7H,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;SAC7B;QAED,OAAO,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;IACvC,CAAC;IAEM,gCAAO,GAAd;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAEtB,iBAAM,OAAO,WAAE,CAAC;IACpB,CAAC;IA1Pc,mCAAoB,GAAG,MAAM,CAAC;IAC9B,oCAAqB,GAAG,OAAO,CAAC;IAUZ;QAAlC,kCAAW,CAAC,oBAAoB,CAAC;8DAA2C;IAE5C;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;8DAAkD;IAC3D;QAAtB,mBAAS,CAAC,UAAU,CAAC;oDAA+B;IAyCrD;QADC,uBAAa;uDAUb;IA2LL,qBAAC;CA5PD,AA4PC,CA5P4C,qBAAS,GA4PrD;AA5PqB,wCAAc","file":"providedFilter.js","sourcesContent":["import { Component } from '../../widgets/component';\nimport { ProvidedFilterModel, IDoesFilterPassParams, IFilterComp, IFilterParams } from '../../interfaces/iFilter';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { Autowired, PostConstruct } from '../../context/context';\nimport { GridOptionsWrapper } from '../../gridOptionsWrapper';\nimport { _ } from '../../utils';\nimport { IRowModel } from '../../interfaces/iRowModel';\nimport { Constants } from '../../constants';\nimport { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\n\nexport interface IProvidedFilterParams extends IFilterParams {\n    clearButton?: boolean;\n    resetButton?: boolean;\n    applyButton?: boolean;\n    closeOnApply?: boolean;\n    /** @deprecated */ newRowsAction?: string;\n    debounceMs?: number;\n}\n\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with ag-Grid extend this class. User filters do not\n * extend this class.\n */\nexport abstract class ProvidedFilter extends Component implements IFilterComp {\n    private static NEW_ROWS_ACTION_KEEP = 'keep';\n    private static NEW_ROWS_ACTION_CLEAR = 'clear';\n\n    private newRowsActionKeep: boolean;\n\n    // each level in the hierarchy will save params with the appropriate type for that level.\n    private providedFilterParams: IProvidedFilterParams;\n\n    private applyActive = false;\n    private hidePopup: () => void = null;\n\n    @RefSelector('eFilterBodyWrapper') protected eFilterBodyWrapper: HTMLElement;\n\n    @Autowired('gridOptionsWrapper') protected gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('rowModel') protected rowModel: IRowModel;\n\n    // part of IFilter interface, hence public\n    public abstract doesFilterPass(params: IDoesFilterPassParams): boolean;\n\n    protected abstract updateUiVisibility(): void;\n\n    protected abstract createBodyTemplate(): string;\n    protected abstract getCssIdentifier(): string;\n    protected abstract resetUiToDefaults(silent?: boolean): void;\n\n    protected abstract setModelIntoUi(model: ProvidedFilterModel): void;\n    protected abstract areModelsEqual(a: ProvidedFilterModel, b: ProvidedFilterModel): boolean;\n\n    public abstract getModelFromUi(): ProvidedFilterModel | null;\n\n    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\n    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\n    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\n    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\n    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\n    // not active) then this appliedModel will be null/undefined.\n    private appliedModel: ProvidedFilterModel | null = null;\n\n    // a debounce of the onBtApply method\n    private onBtApplyDebounce: () => void;\n\n    /** @deprecated */\n    public onFilterChanged(): void {\n        console.warn(`ag-Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.`);\n        this.providedFilterParams.filterChangedCallback();\n    }\n\n    public isFilterActive(): boolean {\n        // filter is active if we have a valid applied model\n        return !!this.appliedModel;\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        const templateString = /* html */`\n            <div>\n                <div class=\"ag-filter-body-wrapper ag-${this.getCssIdentifier()}-body-wrapper\" ref=\"eFilterBodyWrapper\">\n                    ${this.createBodyTemplate()}\n                </div>\n            </div>`;\n\n        this.setTemplate(templateString);\n    }\n\n    public init(params: IFilterParams): void {\n        this.setParams(params);\n        this.resetUiToDefaults(true);\n        this.updateUiVisibility();\n        this.setupOnBtApplyDebounce();\n    }\n\n    protected setParams(params: IProvidedFilterParams): void {\n        this.providedFilterParams = params;\n\n        if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_KEEP) {\n            this.newRowsActionKeep = true;\n        } else if (params.newRowsAction === ProvidedFilter.NEW_ROWS_ACTION_CLEAR) {\n            this.newRowsActionKeep = false;\n        } else {\n            // the default for SSRM and IRM is 'keep', for CSRM and VRM the default is 'clear'\n            const rowModelType = this.rowModel.getType();\n            const modelsForKeep = [Constants.ROW_MODEL_TYPE_SERVER_SIDE, Constants.ROW_MODEL_TYPE_INFINITE];\n            this.newRowsActionKeep = modelsForKeep.indexOf(rowModelType) >= 0;\n        }\n\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n\n        this.createButtonPanel(params);\n    }\n\n    private createButtonPanel(params: IProvidedFilterParams): void {\n        const clearActive = params.clearButton === true;\n        const resetActive = params.resetButton === true;\n        const anyButtonVisible = this.applyActive || clearActive || resetActive;\n\n        if (anyButtonVisible) {\n            const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n            const eButtonsPanel = document.createElement('div');\n\n            _.addCssClass(eButtonsPanel, 'ag-filter-apply-panel');\n\n            const addButton = (text: string, clickListener: () => void): void => {\n                const button = _.loadTemplate(/* html */\n                    `<button type=\"button\" class=\"ag-standard-button ag-filter-apply-panel-button\">${text}</button>`);\n\n                eButtonsPanel.appendChild(button);\n                this.addDestroyableEventListener(button, 'click', clickListener);\n            };\n\n            if (clearActive) {\n                addButton(translate('clearFilter', 'Clear Filter'), () => this.onBtClear());\n            }\n\n            if (resetActive) {\n                addButton(translate('resetFilter', 'Reset Filter'), () => this.onBtReset());\n            }\n\n            if (this.applyActive) {\n                addButton(translate('applyFilter', 'Apply Filter'), () => this.onBtApply());\n            }\n\n            this.eFilterBodyWrapper.parentElement.appendChild(eButtonsPanel);\n        }\n    }\n\n    // subclasses can override this to provide alternative debounce defaults\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    private setupOnBtApplyDebounce(): void {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n        this.onBtApplyDebounce = _.debounce(this.onBtApply.bind(this), debounceMs);\n    }\n\n    public getModel(): ProvidedFilterModel {\n        return this.appliedModel;\n    }\n\n    public setModel(model: ProvidedFilterModel): void {\n        if (model) {\n            this.setModelIntoUi(model);\n        } else {\n            this.resetUiToDefaults();\n        }\n\n        this.updateUiVisibility();\n\n        // we set the model from the gui, rather than the provided model,\n        // so the model is consistent. eg handling of null/undefined will be the same,\n        // of if model is case insensitive, then casing is removed.\n        this.applyModel();\n    }\n\n    private onBtClear() {\n        this.resetUiToDefaults();\n        this.updateUiVisibility();\n        this.onUiChanged();\n    }\n\n    private onBtReset() {\n        this.onBtClear();\n        this.onBtApply();\n    }\n\n    // returns true if the new model is different to the old model\n    public applyModel(): boolean {\n        const oldAppliedModel = this.appliedModel;\n        this.appliedModel = this.getModelFromUi();\n\n        // models can be same if user pasted same content into text field, or maybe just changed the case\n        // and it's a case insensitive filter\n        return !this.areModelsEqual(this.appliedModel, oldAppliedModel);\n    }\n\n    protected onBtApply(afterFloatingFilter = false, afterDataChange = false) {\n        if (this.applyModel()) {\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n            // came from floating filter\n            this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange });\n        }\n\n        const { closeOnApply, applyButton, resetButton } = this.providedFilterParams;\n\n        if (closeOnApply && !afterFloatingFilter && this.hidePopup && (applyButton || resetButton)) {\n            this.hidePopup();\n            this.hidePopup = null;\n        }\n    }\n\n    public onNewRowsLoaded() {\n        if (!this.newRowsActionKeep) {\n            this.resetUiToDefaults();\n            this.appliedModel = null;\n        }\n    }\n\n    // called by set filter\n    protected isNewRowsActionKeep(): boolean {\n        return this.newRowsActionKeep;\n    }\n\n    protected onUiChanged(afterFloatingFilter = false): void {\n        this.updateUiVisibility();\n        this.providedFilterParams.filterModifiedCallback();\n\n        if (afterFloatingFilter) {\n            // floating filter changes are always applied immediately\n            this.onBtApply(true);\n        } else if (!this.applyActive) {\n            // if no apply button, we apply (but debounce for time delay)\n            this.onBtApplyDebounce();\n        }\n    }\n\n    public afterGuiAttached(params: IAfterGuiAttachedParams): void {\n        this.hidePopup = params.hidePopup;\n    }\n\n    // static, as used by floating filter also\n    public static getDebounceMs(params: IProvidedFilterParams, debounceDefault: number): number {\n        const applyActive = ProvidedFilter.isUseApplyButton(params);\n\n        if (applyActive) {\n            if (params.debounceMs != null) {\n                console.warn('ag-Grid: debounceMs is ignored when applyButton = true');\n            }\n\n            return 0;\n        }\n\n        return params.debounceMs != null ? params.debounceMs : debounceDefault;\n    }\n\n    // static, as used by floating filter also\n    public static isUseApplyButton(params: IProvidedFilterParams): boolean {\n        if ((params as any).apply && !params.applyButton) {\n            console.warn('ag-Grid: as of ag-Grid v21, filterParams.apply is now filterParams.applyButton, please change to applyButton');\n            params.applyButton = true;\n        }\n\n        return params.applyButton === true;\n    }\n\n    public destroy() {\n        this.hidePopup = null;\n\n        super.destroy();\n    }\n}\n"]}