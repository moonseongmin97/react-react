{"version":3,"sources":["../../src/ts/utils/promise.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAkC;AAIlC,IAAY,aAEX;AAFD,WAAY,aAAa;IACrB,+DAAW,CAAA;IAAE,yDAAQ,CAAA;AACzB,CAAC,EAFW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAExB;AAED;IA2BI,iBAAY,QAAqC;QAAjD,iBAEC;QA5BO,WAAM,GAAkB,aAAa,CAAC,WAAW,CAAC;QAClD,eAAU,GAAa,IAAI,CAAC;QAC5B,YAAO,GAA2B,EAAE,CAAC;QAyBzC,QAAQ,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAlB,CAAkB,EAAE,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAArB,CAAqB,CAAC,CAAC;IAC3E,CAAC;IAxBM,WAAG,GAAV,UAAc,QAAsB;QAChC,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,IAAI,kBAAkB,GAAG,QAAQ,CAAC,MAAM,CAAC;YACzC,IAAM,cAAc,GAAG,IAAI,KAAK,CAAI,kBAAkB,CAAC,CAAC;YAExD,eAAO,CAAC,QAAQ,EAAE,UAAC,OAAO,EAAE,KAAK;gBAC7B,OAAO,CAAC,IAAI,CAAC,UAAA,KAAK;oBACd,cAAc,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;oBAC9B,kBAAkB,EAAE,CAAC;oBAErB,IAAI,kBAAkB,KAAK,CAAC,EAAE;wBAC1B,OAAO,CAAC,cAAc,CAAC,CAAC;qBAC3B;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,eAAO,GAAd,UAAkB,KAAQ;QACtB,OAAO,IAAI,OAAO,CAAI,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,CAAC;IACrD,CAAC;IAMM,sBAAI,GAAX,UAAY,IAAyB;QACjC,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,CAAC,WAAW,EAAE;YAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3B;aAAM;YACH,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACzB;IACL,CAAC;IAEM,qBAAG,GAAV,UAAc,OAAuB;QAArC,iBAEC;QADG,OAAO,IAAI,OAAO,CAAI,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAvB,CAAuB,CAAC,EAA3C,CAA2C,CAAC,CAAC;IAClF,CAAC;IAEM,4BAAU,GAAjB,UAAqB,kBAAqB,EAAE,UAAoC;QAC5E,OAAO,IAAI,CAAC,MAAM,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvG,CAAC;IAEO,wBAAM,GAAd,UAAe,KAAQ;QACnB,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAExB,eAAO,CAAC,IAAI,CAAC,OAAO,EAAE,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,CAAC,EAAb,CAAa,CAAC,CAAC;IACnD,CAAC;IAEO,0BAAQ,GAAhB,UAAiB,MAAW;QACxB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IACL,cAAC;AAAD,CAzDA,AAyDC,IAAA;AAzDY,0BAAO","file":"promise.js","sourcesContent":["import { forEach } from './array';\n\nexport type ResolveAndRejectCallback<T> = (resolve: (value: T) => void, reject: (params: any) => void) => void;\n\nexport enum PromiseStatus {\n    IN_PROGRESS, RESOLVED\n}\n\nexport class Promise<T> {\n    private status: PromiseStatus = PromiseStatus.IN_PROGRESS;\n    private resolution: T | null = null;\n    private waiters: ((value: T) => void)[] = [];\n\n    static all<T>(promises: Promise<T>[]): Promise<T[]> {\n        return new Promise(resolve => {\n            let remainingToResolve = promises.length;\n            const combinedValues = new Array<T>(remainingToResolve);\n\n            forEach(promises, (promise, index) => {\n                promise.then(value => {\n                    combinedValues[index] = value;\n                    remainingToResolve--;\n\n                    if (remainingToResolve === 0) {\n                        resolve(combinedValues);\n                    }\n                });\n            });\n        });\n    }\n\n    static resolve<T>(value: T): Promise<T> {\n        return new Promise<T>(resolve => resolve(value));\n    }\n\n    constructor(callback: ResolveAndRejectCallback<T>) {\n        callback(value => this.onDone(value), params => this.onReject(params));\n    }\n\n    public then(func: (result: T) => void): void {\n        if (this.status === PromiseStatus.IN_PROGRESS) {\n            this.waiters.push(func);\n        } else {\n            func(this.resolution);\n        }\n    }\n\n    public map<Z>(adapter: (from: T) => Z): Promise<Z> {\n        return new Promise<Z>(resolve => this.then(value => resolve(adapter(value))));\n    }\n\n    public resolveNow<Z>(ifNotResolvedValue: Z, ifResolved: (current: T | null) => Z): Z {\n        return this.status == PromiseStatus.IN_PROGRESS ? ifNotResolvedValue : ifResolved(this.resolution);\n    }\n\n    private onDone(value: T): void {\n        this.status = PromiseStatus.RESOLVED;\n        this.resolution = value;\n\n        forEach(this.waiters, waiter => waiter(value));\n    }\n\n    private onReject(params: any): void {\n        console.warn('TBI');\n    }\n}\n"]}